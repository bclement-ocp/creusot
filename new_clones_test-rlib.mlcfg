
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Logic_Seq_Impl0_Singleton_Stub
  type t
  use seq.Seq
  function singleton (_1' : t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Singleton
  type t
  use seq.Seq
  use seq.Seq
  function singleton (_1' : t) : Seq.seq t =
    Seq.singleton _1'
  val singleton (_1' : t) : Seq.seq t
    ensures { result = singleton _1' }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Logic_Seq_Impl1_Index_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t
end
module CreusotContracts_Logic_Seq_Impl1_Index
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t =
    Seq.get self _2'
  val index (self : Seq.seq t) (_2' : int) : t
    ensures { result = index self _2' }
    
end
module CreusotContracts_Logic_Seq_Impl0_Len_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function len (self : Seq.seq t) : int
end
module CreusotContracts_Logic_Seq_Impl0_Len
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function len (self : Seq.seq t) : int =
    Seq.length self
  val len (self : Seq.seq t) : int
    ensures { result = len self }
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
end
module Core_Ops_Range_Range_Start_Stub
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  val function field_start (self : CRange0.t_range idx) : idx
end
module Core_Ops_Range_Range_Start
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  let function field_start (self : CRange0.t_range idx) : idx = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] match (self) with
      | CRange0.C_Range a _ -> a
      end
end
module CreusotContracts_Logic_Int_Impl23_ShallowModel_Stub
  use mach.int.Int
  use mach.int.Int32
  function shallow_model (self : int32) : int
end
module CreusotContracts_Logic_Int_Impl23_ShallowModel
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int32
  function shallow_model (self : int32) : int =
    Int32.to_int self
  val shallow_model (self : int32) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Int_Impl24_DeepModel_Stub
  use mach.int.Int
  use mach.int.Int32
  function deep_model (self : int32) : int
end
module CreusotContracts_Logic_Int_Impl24_DeepModel
  use prelude.Opaque
  use mach.int.Int
  use mach.int.Int32
  function deep_model (self : int32) : int =
    Int32.to_int self
  val deep_model (self : int32) : int
    ensures { result = deep_model self }
    
end
module Core_Ops_Range_Range_End_Stub
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  val function field_end (self : CRange0.t_range idx) : idx
end
module Core_Ops_Range_Range_End
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  let function field_end (self : CRange0.t_range idx) : idx = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] match (self) with
      | CRange0.C_Range _ a -> a
      end
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use prelude.Bool
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use mach.int.Int
  use seq.Seq
  use Core_Ops_Range_Range_Type as CRange0
  use prelude.Bool
  predicate produces (self : CRange0.t_range idx) (visited : Seq.seq idx) (o : CRange0.t_range idx)
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Ops_Range_Range_Type as CRange0
  use prelude.Bool
  clone Core_Ops_Range_Range_Start_Stub as FieldStart0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone Core_Ops_Range_Range_End_Stub as FieldEnd0 with
    type idx = idx
  predicate produces (self : CRange0.t_range idx) (visited : Seq.seq idx) (o : CRange0.t_range idx) =
    FieldEnd0.field_end self = FieldEnd0.field_end o /\ DeepModel1.deep_model (FieldStart0.field_start self) <= DeepModel1.deep_model (FieldStart0.field_start o) /\ (Seq.length visited > 0 -> DeepModel1.deep_model (FieldStart0.field_start o) <= DeepModel1.deep_model (FieldEnd0.field_end o)) /\ Seq.length visited = DeepModel1.deep_model (FieldStart0.field_start o) - DeepModel1.deep_model (FieldStart0.field_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel1.deep_model (Seq.get visited i) = DeepModel1.deep_model (FieldStart0.field_start self) + i)
  val produces (self : CRange0.t_range idx) (visited : Seq.seq idx) (o : CRange0.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Bool
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Bool
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate completed (self : borrowed (CRange0.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Range_Range_End_Stub as FieldEnd0 with
    type idx = idx
  clone Core_Ops_Range_Range_Start_Stub as FieldStart0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve1 with
    type t = CRange0.t_range idx
  predicate completed (self : borrowed (CRange0.t_range idx)) =
    Resolve1.resolve self /\ DeepModel1.deep_model (FieldStart0.field_start ( * self)) >= DeepModel1.deep_model (FieldEnd0.field_end ( * self))
  val completed (self : borrowed (CRange0.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Stub
  type idx
  use prelude.Bool
  use Core_Ops_Range_Range_Type as CRange0
  predicate invariant' (self : CRange0.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant
  type idx
  use prelude.Bool
  use Core_Ops_Range_Range_Type as CRange0
  predicate invariant' (self : CRange0.t_range idx) =
    true
  val invariant' (self : CRange0.t_range idx) : bool
    ensures { result = invariant' self }
    
end
module Core_Iter_Range_Impl3_Next_Stub
  type a
  use seq.Seq
  use prelude.Bool
  use Core_Option_Option_Type as TOption1
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as CRange1
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces1 with
    type self = CRange1.t_range a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed1 with
    type self = CRange1.t_range a
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant1 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (CRange1.t_range a)) : TOption1.t_option a
    requires {Invariant1.invariant' ( * self)}
    ensures { Invariant1.invariant' ( ^ self) }
    ensures { match (result) with
      | TOption1.C_None -> Completed1.completed self
      | TOption1.C_Some v -> Produces1.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module NewClonesTest_AllZero_Stub
  use mach.int.Int32
  use seq.Seq
  use prelude.Bool
  use Core_Option_Option_Type as TOption1
  use prelude.Borrow
  use mach.int.Int
  use Core_Ops_Range_Range_Type as CRange1
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces1 with
    type idx = int32
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub as Completed1 with
    type idx = int32
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant1 with
    type idx = int32
  val all_zero [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 0 5 17] (_1' : ()) : ()
end
module NewClonesTest_AllZero
  use mach.int.Int32
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use prelude.Bool
  use Core_Option_Option_Type as TOption1
  use prelude.Borrow
  use prelude.Opaque
  use mach.int.Int
  use Core_Ops_Range_Range_Type as CRange1
  clone Core_Ops_Range_Range_Start as FieldStart1 with
    type idx = int32
  clone CreusotContracts_Logic_Int_Impl24_DeepModel as DeepModel1
  clone Core_Ops_Range_Range_End as FieldEnd1 with
    type idx = int32
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces1 with
    type idx = int32,
    val FieldEnd0.field_end = FieldEnd1.field_end,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    val FieldStart0.field_start = FieldStart1.field_start
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = CRange1.t_range int32
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed1 with
    type idx = int32,
    predicate Resolve1.resolve = Resolve1.resolve,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    val FieldStart0.field_start = FieldStart1.field_start,
    val FieldEnd0.field_end = FieldEnd1.field_end
  clone CreusotContracts_Std1_Ops_Impl3_Invariant as Invariant1 with
    type idx = int32
  clone Core_Iter_Range_Impl3_Next_Stub as Next1 with
    type a = int32,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Completed1.completed = Completed1.completed,
    predicate Produces1.produces = Produces1.produces
  let rec cfg all_zero [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 0 5 17] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : TOption1.t_option int32;
  var _2 : borrowed (CRange1.t_range int32);
  var _3 : CRange1.t_range int32;
  {
    goto BB0
  }
  BB0 {
    _3 <- CRange1.C_Range ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 6 5 6 6] (0 : int32)) ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 6 8 6 9] (5 : int32));
    _2 <- borrow_mut _3;
    _3 <-  ^ _2;
    _1 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 6 4 6 17] Next1.next _2);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
