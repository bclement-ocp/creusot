
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
  val postcondition_once (self : self) (a : args) (res : Output0.output) : bool
    ensures { result = postcondition_once self a res }
    
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output1.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output1.output)
  val postcondition_once (self : f) (_2' : args) (_3' : Output1.output) : bool
    ensures { result = postcondition_once self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub
  type self
  type args
  use prelude.Bool
  predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Ops_FnOnceExt_Precondition
  type self
  type args
  use prelude.Bool
  predicate precondition (self : self) (a : args)
  val precondition (self : self) (a : args) : bool
    ensures { result = precondition self a }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  use prelude.Bool
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  use prelude.Bool
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module Core_Ops_Function_FnOnce_CallOnce_Stub
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition0 with
    type self = self,
    type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { PostconditionOnce0.postcondition_once self args result }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  use prelude.Bool
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  use prelude.Bool
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module NewClonesTest_Weaken3Std_Stub
  type a
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce2 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition2 with
    type args = a,
    type f = f
  val weaken_3_std [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 15 0 15 64] (f : f) (a : a) : Output1.output
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 13 11 13 28] Precondition2.precondition f a}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 14 10 14 41] PostconditionOnce2.postcondition_once f a result }
    
end
module NewClonesTest_Weaken3Std
  type a
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce2 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition2 with
    type args = a,
    type f = f
  clone Core_Ops_Function_FnOnce_CallOnce_Stub as CallOnce1 with
    type self = f,
    type args = a,
    predicate Precondition0.precondition = Precondition2.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce2.postcondition_once,
    type Output0.output = Output1.output
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = f
  let rec cfg weaken_3_std [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 15 0 15 64] (f : f) (a : a) : Output1.output
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 13 11 13 28] Precondition2.precondition f a}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 14 10 14 41] PostconditionOnce2.postcondition_once f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output1.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 16 4 16 27] CallOnce1.call_once _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
