
module CreusotContracts_Logic_Int_Impl17_ShallowModel_Stub
  use mach.int.Int
  use prelude.UIntSize
  function shallow_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl17_ShallowModel
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function shallow_model (self : usize) : int =
    UInt64.to_int self
  val shallow_model (self : usize) : int
    ensures { result = shallow_model self }
    
end
module NewClonesTest_Test_Closure0_Stub
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int8
  use mach.int.Int
  use mach.int.UInt64
  type newclonestest_test_closure0  =
    | NewClonesTest_Test_Closure0
    
  predicate precondition [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (self : newclonestest_test_closure0) (args : usize)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 19 5 28] let (x) = args in UInt64.to_int x < 1000
  predicate postcondition [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (self : newclonestest_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] let (x) = args in true
  predicate unnest [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (self : newclonestest_test_closure0) (_2' : newclonestest_test_closure0)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] true
  predicate postcondition_mut [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (self : borrowed newclonestest_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] (let (x) = args in true) /\ unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (self : newclonestest_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] let (x) = args in true
  predicate resolve [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (_1' : newclonestest_test_closure0)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] true
  val newClonesTest_Test_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (_1' : newclonestest_test_closure0) (x : usize) : usize
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 19 5 28] UInt64.to_int x < 1000}
    
end
module NewClonesTest_Test_Closure0
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int8
  use prelude.Opaque
  use mach.int.Int
  use mach.int.UInt64
  type newclonestest_test_closure0  =
    | NewClonesTest_Test_Closure0
    
  predicate precondition [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (self : newclonestest_test_closure0) (args : usize)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 19 5 28] let (x) = args in UInt64.to_int x < 1000
  predicate postcondition [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (self : newclonestest_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] let (x) = args in true
  predicate unnest [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (self : newclonestest_test_closure0) (_2' : newclonestest_test_closure0)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] true
  predicate postcondition_mut [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (self : borrowed newclonestest_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] (let (x) = args in true) /\ unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (self : newclonestest_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] let (x) = args in true
  predicate resolve [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (_1' : newclonestest_test_closure0)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] true
  let rec cfg newClonesTest_Test_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 8 5 30] (_1' : newclonestest_test_closure0) (x : usize) : usize
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 19 5 28] UInt64.to_int x < 1000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var _1 : newclonestest_test_closure0;
  var x_2 : usize;
  var res_3 : usize;
  var _4 : usize;
  {
    _1 <- _1';
    x_2 <- x;
    goto BB0
  }
  BB0 {
    _4 <- x_2;
    res_3 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 19 7 24] _4 + ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 23 7 24] (1 : usize)));
    _0 <- res_3;
    return _0
  }
  
end
module NewClonesTest_Test_Stub
  use prelude.UIntSize
  use prelude.Int8
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  clone NewClonesTest_Test_Closure0_Stub as Closure00
  val test [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 3 0 3 13] (_1' : ()) : ()
end
module NewClonesTest_Test
  use prelude.UIntSize
  use prelude.Int8
  use prelude.Borrow
  use prelude.Opaque
  use mach.int.Int
  use mach.int.UInt64
  clone NewClonesTest_Test_Closure0_Stub as Closure00
  let rec cfg test [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 3 0 3 13] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var c_1 : Closure00.newclonestest_test_closure0;
  {
    goto BB0
  }
  BB0 {
    c_1 <- Closure00.NewClonesTest_Test_Closure0;
    assume { Closure00.resolve c_1 };
    _0 <- ();
    return _0
  }
  
end
