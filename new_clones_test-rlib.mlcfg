
module NewClonesTest_MoveClosure_Closure0_Type
  use mach.int.Int32
  use prelude.Borrow
  use prelude.Int16
  type newclonestest_moveclosure_closure0  =
    | NewClonesTest_MoveClosure_Closure0 (borrowed int32)
    
  let function field_0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 16 7 23] (self : newclonestest_moveclosure_closure0) : borrowed int32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] let NewClonesTest_MoveClosure_Closure0 a = self in a
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module NewClonesTest_MoveClosure_Closure0_Stub
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int32
  use prelude.Int16
  use NewClonesTest_MoveClosure_Closure0_Type as Closure00
  val newClonesTest_MoveClosure_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 16 7 23] (_1' : borrowed Closure00.newclonestest_moveclosure_closure0) : ()
    
end
module NewClonesTest_MoveClosure_Closure0
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int32
  use prelude.Int16
  use NewClonesTest_MoveClosure_Closure0_Type as Closure00
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Closure00.newclonestest_moveclosure_closure0
  let rec cfg newClonesTest_MoveClosure_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 16 7 23] (_1' : borrowed Closure00.newclonestest_moveclosure_closure0) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : borrowed Closure00.newclonestest_moveclosure_closure0;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let Closure00.NewClonesTest_MoveClosure_Closure0 a =  * _1 in Closure00.NewClonesTest_MoveClosure_Closure0 ({ (Closure00.field_0 ( * _1)) with current = ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 8 8 8 15]  * Closure00.field_0 ( * _1) + ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 8 14 8 15] (1 : int32))) })) };
    assume { Resolve1.resolve _1 };
    _0 <- ();
    return _0
  }
  
end
module NewClonesTest_MoveClosure_Closure0_Resolve
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int32
  use prelude.Int16
  use NewClonesTest_MoveClosure_Closure0_Type as Closure00
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve1 with
    type t = Closure00.newclonestest_moveclosure_closure0
  clone NewClonesTest_MoveClosure_Closure0_Stub as Closure01
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve2 with
    type t = int32
  function resolve [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 16 7 23] (_1' : Closure00.newclonestest_moveclosure_closure0) : bool
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] Resolve2.resolve (Closure00.field_0 _1') /\ true
end
module NewClonesTest_MoveClosure_Stub
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int32
  use prelude.Int16
  use NewClonesTest_MoveClosure_Closure0_Type as Closure00
  val move_closure [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 4 0 4 21] (_1' : ()) : ()
end
module NewClonesTest_MoveClosure
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int32
  use prelude.Int16
  use NewClonesTest_MoveClosure_Closure0_Type as Closure00
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Closure00.newclonestest_moveclosure_closure0
  clone NewClonesTest_MoveClosure_Closure0_Stub as Closure01
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = int32
  clone NewClonesTest_MoveClosure_Closure0_Resolve as Closure02 with
    predicate Resolve2.resolve = Resolve2.resolve,
    val Closure01.newClonesTest_MoveClosure_Closure0 = Closure01.newClonesTest_MoveClosure_Closure0
  let rec cfg move_closure [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 4 0 4 21] (_1' : ()) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : borrowed int32;
  var _2 : int32;
  var x_3 : Closure00.newclonestest_moveclosure_closure0;
  var _4 : ();
  var _5 : borrowed Closure00.newclonestest_moveclosure_closure0;
  var _6 : ();
  var _7 : ();
  var _8 : borrowed Closure00.newclonestest_moveclosure_closure0;
  var _9 : ();
  {
    goto BB0
  }
  BB0 {
    _2 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 17 5 21] (0 : int32));
    a_1 <- borrow_mut _2;
    _2 <-  ^ a_1;
    x_3 <- Closure00.NewClonesTest_MoveClosure_Closure0 a_1;
    _5 <- borrow_mut x_3;
    x_3 <-  ^ _5;
    _6 <- ();
    _4 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 11 4 11 9] let () = _6 in Closure01.newClonesTest_MoveClosure_Closure0 _5);
    goto BB1
  }
  BB1 {
    _8 <- borrow_mut x_3;
    x_3 <-  ^ _8;
    assume { Closure02.newClonesTest_MoveClosure_Closure0 x_3 };
    _9 <- ();
    _7 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 12 4 12 9] let () = _9 in Closure01.newClonesTest_MoveClosure_Closure0 _8);
    goto BB2
  }
  BB2 {
    _0 <- ();
    return _0
  }
  
end
