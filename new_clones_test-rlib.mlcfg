
module NewClonesTest_Counter_Closure0_Type
  use mach.int.Int32
  use prelude.Borrow
  use prelude.Int16
  type newclonestest_counter_closure0  =
    | NewClonesTest_Counter_Closure0 (borrowed int32)

end
module NewClonesTest_Counter_Closure0_Field0
  use mach.int.Int32
  use prelude.Borrow
  use NewClonesTest_Counter_Closure0_Type

  let function field_0 (self : newclonestest_counter_closure0) : borrowed int32 =
    let NewClonesTest_Counter_Closure0 a = self in a
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  use prelude.Bool
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  use prelude.Bool
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }

end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }

end
module NewClonesTest_Counter_Closure0_Stub
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int32
  use prelude.Int16
  use NewClonesTest_Counter_Closure0_Type as Closure00
  val newClonesTest_Counter_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 6 13 6 15] (_1' : borrowed Closure00.newclonestest_counter_closure0) : int32

end
module NewClonesTest_Counter_Closure0
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int32
  use prelude.Int16
  use NewClonesTest_Counter_Closure0_Type as Closure00
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Closure00.newclonestest_counter_closure0
  clone NewClonesTest_Counter_Closure0_Field0 as Field00

  let rec cfg newClonesTest_Counter_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 6 13 6 15] (_1' : borrowed Closure00.newclonestest_counter_closure0) : int32

   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _1 : borrowed Closure00.newclonestest_counter_closure0;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let Closure00.NewClonesTest_Counter_Closure0 a =  * _1 in Closure00.NewClonesTest_Counter_Closure0 ({ (Field00.field_0 ( * _1)) with current = ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 8 7 14]  * Field00.field_0 ( * _1) + ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 13 7 14] (1 : int32))) })) };
    assume { Resolve1.resolve _1 };
    _0 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 8 8 8 13] ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 8 8 8 9] (0 : int32)) + ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 8 12 8 13] (0 : int32)));
    return _0
  }

end
module NewClonesTest_Counter_Stub
  use prelude.Bool
  use mach.int.Int32
  use prelude.Borrow
  use prelude.Int16
  clone NewClonesTest_Counter_Closure0_Type as Closure00
  val counter [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 4 0 4 16] (_1' : ()) : ()
end
module NewClonesTest_Counter
  use prelude.Bool
  use mach.int.Int32
  use prelude.Borrow
  use prelude.Int16
  use prelude.Opaque
  use mach.int.Int
  use NewClonesTest_Counter_Closure0_Type as Closure00
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Closure00.newclonestest_counter_closure0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Closure00.newclonestest_counter_closure0
  clone NewClonesTest_Counter_Closure0_Stub as Closure01

  let rec cfg counter [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 4 0 4 16] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : int32;
  var x_2 : int32;
  var _3 : borrowed Closure00.newclonestest_counter_closure0;
  var _4 : Closure00.newclonestest_counter_closure0;
  var _5 : borrowed int32;
  var _6 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 16 5 17] (0 : int32));
    _5 <- borrow_mut a_1;
    a_1 <-  ^ _5;
    _4 <- Closure00.NewClonesTest_Counter_Closure0 _5;
    _3 <- borrow_mut _4;
    _4 <-  ^ _3;
    assume { Resolve1.resolve _4 };
    _6 <- ();
    x_2 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 6 12 9 8] let () = _6 in Closure01.newClonesTest_Counter_Closure0 _3);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }

end
