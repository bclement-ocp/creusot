
module NewClonesTest_Iterator_Invariant_Stub
  type self
  use prelude.Bool
  predicate invariant' [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 32 4 32 30] (self : self)
end
module NewClonesTest_Iterator_Invariant
  type self
  use prelude.Bool
  predicate invariant' [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 32 4 32 30] (self : self) =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 33 8 33 12] true
  val invariant' [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 32 4 32 30] (self : self) : bool
    ensures { result = invariant' self }
    
end
module NewClonesTest_Iterator_Item_Type
  type self
  type item
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module NewClonesTest_Map_Type
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  type t_map 'i 'a 'f =
    | C_Map 'i 'f (Ghost.ghost_ty (Seq.seq 'a))
    
end
module NewClonesTest_Map_Func_Stub
  type i
  type a
  type f
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap0
  val function field_func [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 46 4 46 11] (self : CMap0.t_map i a f) : f
    
end
module NewClonesTest_Map_Func
  type i
  type a
  type f
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap0
  let function field_func [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 46 4 46 11] (self : CMap0.t_map i a f) : f
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] match (self) with
      | CMap0.C_Map _ a _ -> a
      end
end
module NewClonesTest_Map_Iter_Stub
  type i
  type a
  type f
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap0
  val function field_iter [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 45 4 45 11] (self : CMap0.t_map i a f) : i
    
end
module NewClonesTest_Map_Iter
  type i
  type a
  type f
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap0
  let function field_iter [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 45 4 45 11] (self : CMap0.t_map i a f) : i
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] match (self) with
      | CMap0.C_Map a _ _ -> a
      end
end
module NewClonesTest_Iterator_Completed_Stub
  type self
  use prelude.Bool
  use prelude.Borrow
  predicate completed [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 15 4 15 36] (self : borrowed self)
end
module NewClonesTest_Iterator_Completed
  type self
  use prelude.Bool
  use prelude.Borrow
  predicate completed [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 15 4 15 36] (self : borrowed self)
  val completed [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 15 4 15 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Empty_Stub
  type t
  use seq.Seq
  val constant eMPTY'  : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Empty
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  let constant eMPTY'  : Seq.seq t = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module NewClonesTest_Map_Produced_Stub
  type i
  type a
  type f
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap0
  val function field_produced [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 47 4 47 27] (self : CMap0.t_map i a f) : Ghost.ghost_ty (Seq.seq a)
    
end
module NewClonesTest_Map_Produced
  type i
  type a
  type f
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap0
  let function field_produced [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 47 4 47 27] (self : CMap0.t_map i a f) : Ghost.ghost_ty (Seq.seq a)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] match (self) with
      | CMap0.C_Map _ _ a -> a
      end
end
module CreusotContracts_Ghost_Impl0_Deref_Stub
  type t
  use prelude.Ghost
  function deref (self : Ghost.ghost_ty t) : t
end
module CreusotContracts_Ghost_Impl0_Deref
  type t
  use prelude.Ghost
  use prelude.Ghost
  function deref (self : Ghost.ghost_ty t) : t =
    Ghost.inner self
  val deref (self : Ghost.ghost_ty t) : t
    ensures { result = deref self }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module NewClonesTest_Impl0_Completed_Stub
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  predicate completed [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 54 4 54 35] (self : borrowed (CMap1.t_map i Item1.item f))
    
end
module NewClonesTest_Impl0_Completed
  type i
  type b
  type f
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Bool
  use prelude.Borrow
  use prelude.Opaque
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  predicate completed [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 54 4 54 35] (self : borrowed (CMap1.t_map i Item1.item f))
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 55 8 58 9] Ghost.inner (FieldProduced1.field_produced ( ^ self)) = Seq.empty  /\ Completed1.completed {current = FieldIter1.field_iter ( * self); final = FieldIter1.field_iter ( ^ self)} /\ FieldFunc1.field_func ( * self) = FieldFunc1.field_func ( ^ self)
  val completed [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 54 4 54 35] (self : borrowed (CMap1.t_map i Item1.item f)) : bool
    ensures { result = completed self }
    
end
module NewClonesTest_Iterator_Produces_Stub
  type self
  use prelude.Bool
  use seq.Seq
  clone NewClonesTest_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 12 4 12 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
    
end
module NewClonesTest_Iterator_Produces
  type self
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  clone NewClonesTest_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 12 4 12 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
    
  val produces [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 12 4 12 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module NewClonesTest_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  use prelude.Bool
  clone NewClonesTest_Iterator_Item_Type as Item0 with
    type self = self
  clone NewClonesTest_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 20 4 20 30] (a : self) : ()
end
module NewClonesTest_Iterator_ProducesRefl
  type self
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use prelude.Bool
  clone NewClonesTest_Iterator_Item_Type as Item0 with
    type self = self
  clone NewClonesTest_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 20 4 20 30] (a : self) : ()
  val produces_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 20 4 20 30] (a : self) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 18 15 18 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 18 15 18 28] Invariant0.invariant' a) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 19 14 19 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Logic_Seq_Impl1_Index_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t
end
module CreusotContracts_Logic_Seq_Impl1_Index
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t =
    Seq.get self _2'
  val index (self : Seq.seq t) (_2' : int) : t
    ensures { result = index self _2' }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub
  type self
  type args
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut
  type self
  type args
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output1.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output1.output)
  val postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output1.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module CreusotContracts_Logic_Seq_Impl0_Subsequence_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function subsequence (self : Seq.seq t) (_2' : int) (_3' : int) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Subsequence
  type t
  use mach.int.Int
  use seq.Seq
  use seq_ext.SeqExt
  function subsequence (self : Seq.seq t) (_2' : int) (_3' : int) : Seq.seq t =
    SeqExt.subsequence self _2' _3'
  val subsequence (self : Seq.seq t) (_2' : int) (_3' : int) : Seq.seq t
    ensures { result = subsequence self _2' _3' }
    
end
module CreusotContracts_Ghost_Impl2_New_Stub
  type t
  use prelude.Ghost
  function new (_1' : t) : Ghost.ghost_ty t
end
module CreusotContracts_Ghost_Impl2_New
  type t
  use prelude.Ghost
  use prelude.Ghost
  function new (_1' : t) : Ghost.ghost_ty t =
    Ghost.new _1'
  val new (_1' : t) : Ghost.ghost_ty t
    ensures { result = new _1' }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  use prelude.Bool
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  use prelude.Bool
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module CreusotContracts_Logic_Seq_Impl0_Len_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function len (self : Seq.seq t) : int
end
module CreusotContracts_Logic_Seq_Impl0_Len
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function len (self : Seq.seq t) : int =
    Seq.length self
  val len (self : Seq.seq t) : int
    ensures { result = len self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Concat_Stub
  type t
  use seq.Seq
  function concat (self : Seq.seq t) (_2' : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Concat
  type t
  use seq.Seq
  use seq.Seq
  function concat (self : Seq.seq t) (_2' : Seq.seq t) : Seq.seq t =
    Seq.(++) self _2'
  val concat (self : Seq.seq t) (_2' : Seq.seq t) : Seq.seq t
    ensures { result = concat self _2' }
    
end
module CreusotContracts_Ghost_Impl2_Inner_Stub
  type t
  use prelude.Ghost
  function inner (self : Ghost.ghost_ty t) : t
end
module CreusotContracts_Ghost_Impl2_Inner
  type t
  use prelude.Ghost
  use prelude.Ghost
  function inner (self : Ghost.ghost_ty t) : t =
    Ghost.inner self
  val inner (self : Ghost.ghost_ty t) : t
    ensures { result = inner self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  use prelude.Bool
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  use prelude.Bool
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module NewClonesTest_Impl0_Produces_Stub
  type i
  type b
  type f
  use mach.int.Int
  use seq.Seq
  use prelude.Bool
  use prelude.Borrow
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  predicate produces [@inline:trivial] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 77 4 77 67] (self : CMap1.t_map i Item1.item f) (visited : Seq.seq b) (succ : CMap1.t_map i Item1.item f)
    
end
module NewClonesTest_Impl0_Produces
  type i
  type b
  type f
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use prelude.Bool
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as CPhantomData2
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData3
  use prelude.Ghost
  use Core_Marker_PhantomData_Type as CPhantomData4
  use NewClonesTest_Map_Type as CMap1
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  predicate produces [@inline:trivial] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 77 4 77 67] (self : CMap1.t_map i Item1.item f) (visited : Seq.seq b) (succ : CMap1.t_map i Item1.item f)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 78 8 90 9] Unnest1.unnest (FieldFunc1.field_func self) (FieldFunc1.field_func succ) /\ (exists s : Seq.seq Item1.item . Seq.length s = Seq.length visited /\ Produces1.produces (FieldIter1.field_iter self) s (FieldIter1.field_iter succ) /\ Ghost.inner (FieldProduced1.field_produced succ) = Seq.(++) (Ghost.inner (FieldProduced1.field_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      FieldFunc1.field_func self = FieldFunc1.field_func succ
    else
       * Seq.get fs 0 = FieldFunc1.field_func self /\  ^ Seq.get fs (Seq.length visited - 1) = FieldFunc1.field_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Unnest1.unnest (FieldFunc1.field_func self) ( * Seq.get fs i) /\ Precondition1.precondition ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (FieldProduced1.field_produced self)) (SeqExt.subsequence s 0 i))) /\ PostconditionMut2.postcondition_mut (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (FieldProduced1.field_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces [@inline:trivial] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 77 4 77 67] (self : CMap1.t_map i Item1.item f) (visited : Seq.seq b) (succ : CMap1.t_map i Item1.item f) : bool
    ensures { result = produces self visited succ }
    
end
module CreusotContracts_Logic_Seq_Impl0_Singleton_Stub
  type t
  use seq.Seq
  function singleton (_1' : t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Singleton
  type t
  use seq.Seq
  use seq.Seq
  function singleton (_1' : t) : Seq.seq t =
    Seq.singleton _1'
  val singleton (_1' : t) : Seq.seq t
    ensures { result = singleton _1' }
    
end
module NewClonesTest_Impl1_NextPrecondition_Stub
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Bool
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  predicate next_precondition [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 129 4 129 38] (self : CMap1.t_map i Item1.item f)
    
end
module NewClonesTest_Impl1_NextPrecondition
  type i
  type b
  type f
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Bool
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  predicate next_precondition [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 129 4 129 38] (self : CMap1.t_map i Item1.item f)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 130 8 135 9] forall i : i . forall e : Item1.item . Invariant1.invariant' i -> Produces1.produces (FieldIter1.field_iter self) (Seq.singleton e) i -> Precondition1.precondition (FieldFunc1.field_func self) (e, FieldProduced1.field_produced self)
  val next_precondition [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 129 4 129 38] (self : CMap1.t_map i Item1.item f) : bool
    ensures { result = next_precondition self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Push_Stub
  type t
  use seq.Seq
  function push (self : Seq.seq t) (_2' : t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Push
  type t
  use seq.Seq
  use seq.Seq
  function push (self : Seq.seq t) (_2' : t) : Seq.seq t =
    Seq.snoc self _2'
  val push (self : Seq.seq t) (_2' : t) : Seq.seq t
    ensures { result = push self _2' }
    
end
module NewClonesTest_Impl1_Preservation_Stub
  type i
  type b
  type f
  use prelude.Bool
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  predicate preservation [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 164 4 164 45] (iter : i) (func : f)
end
module NewClonesTest_Impl1_Preservation
  type i
  type b
  type f
  use prelude.Bool
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  predicate preservation [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 164 4 164 45] (iter : i) (func : f) =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 165 8 173 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item1.item . forall e1 : Item1.item . forall s : Seq.seq Item1.item . Invariant1.invariant' i -> Unnest1.unnest func ( * f) -> Produces1.produces iter (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition1.precondition ( * f) (e1, Ghost.new s) -> PostconditionMut2.postcondition_mut f (e1, Ghost.new s) b -> Precondition1.precondition ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 164 4 164 45] (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module NewClonesTest_Impl1_PreservationInv_Stub
  type i
  type b
  type f
  use prelude.Bool
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  predicate preservation_inv [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 151 4 151 37] (self : CMap1.t_map i Item1.item f)
    
end
module NewClonesTest_Impl1_PreservationInv
  type i
  type b
  type f
  use prelude.Bool
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Opaque
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  predicate preservation_inv [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 151 4 151 37] (self : CMap1.t_map i Item1.item f)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 152 8 160 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item1.item . forall e1 : Item1.item . forall s : Seq.seq Item1.item . Invariant1.invariant' i -> Unnest1.unnest (FieldFunc1.field_func self) ( * f) -> Produces1.produces (FieldIter1.field_iter self) (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition1.precondition ( * f) (e1, Ghost.new (Seq.(++) (Ghost.inner (FieldProduced1.field_produced self)) s)) -> PostconditionMut2.postcondition_mut f (e1, Ghost.new (Seq.(++) (Ghost.inner (FieldProduced1.field_produced self)) s)) b -> Precondition1.precondition ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) (Ghost.inner (FieldProduced1.field_produced self)) s) e1))
  val preservation_inv [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 151 4 151 37] (self : CMap1.t_map i Item1.item f) : bool
    ensures { result = preservation_inv self }
    
  axiom preservation_inv_spec : forall self : CMap1.t_map i Item1.item f . [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 150 4 150 106] Ghost.inner (FieldProduced1.field_produced self) = Seq.empty  -> preservation_inv self = Preservation0.preservation (FieldIter1.field_iter self) (FieldFunc1.field_func self)
end
module NewClonesTest_Impl1_PreservationInv_Impl
  type i
  type b
  type f
  use prelude.Bool
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Opaque
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Produces as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Invariant as Invariant1 with
    type self = i
  clone NewClonesTest_Map_Func as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant1.invariant' = Invariant1.invariant',
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Map_Produced as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  let rec ghost predicate preservation_inv [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 151 4 151 37] (self : CMap1.t_map i Item1.item f)
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 150 4 150 106] Ghost.inner (FieldProduced1.field_produced self) = Seq.empty  -> result = Preservation0.preservation (FieldIter1.field_iter self) (FieldFunc1.field_func self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 152 8 160 9] pure {forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item1.item . forall e1 : Item1.item . forall s : Seq.seq Item1.item . Invariant1.invariant' i -> Unnest1.unnest (FieldFunc1.field_func self) ( * f) -> Produces1.produces (FieldIter1.field_iter self) (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition1.precondition ( * f) (e1, Ghost.new (Seq.(++) (Ghost.inner (FieldProduced1.field_produced self)) s)) -> PostconditionMut2.postcondition_mut f (e1, Ghost.new (Seq.(++) (Ghost.inner (FieldProduced1.field_produced self)) s)) b -> Precondition1.precondition ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) (Ghost.inner (FieldProduced1.field_produced self)) s) e1))}
end
module NewClonesTest_Impl1_Reinitialize_Stub
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  predicate reinitialize [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 139 4 139 29] (_1' : ())
end
module NewClonesTest_Impl1_Reinitialize
  type i
  type b
  type f
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Bool
  use prelude.Borrow
  use prelude.Opaque
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  predicate reinitialize [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 139 4 139 29] (_1' : ()) =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 140 8 146 9] forall reset : borrowed (CMap1.t_map i Item1.item f) . Completed2.completed reset -> Invariant1.invariant' (FieldIter1.field_iter ( ^ reset)) -> NextPrecondition0.next_precondition ( ^ reset) /\ Preservation0.preservation (FieldIter1.field_iter ( ^ reset)) (FieldFunc1.field_func ( ^ reset))
  val reinitialize [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 139 4 139 29] (_1' : ()) : bool
    ensures { result = reinitialize _1' }
    
end
module NewClonesTest_Impl0_Invariant_Stub
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  predicate invariant' [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 95 4 95 30] (self : CMap1.t_map i Item1.item f)
    
end
module NewClonesTest_Impl0_Invariant
  type i
  type b
  type f
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Bool
  use prelude.Borrow
  use prelude.Opaque
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_PreservationInv_Stub as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  predicate invariant' [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 95 4 95 30] (self : CMap1.t_map i Item1.item f)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 96 8 101 9] Reinitialize0.reinitialize () /\ PreservationInv0.preservation_inv self /\ Invariant1.invariant' (FieldIter1.field_iter self) /\ NextPrecondition0.next_precondition self
  val invariant' [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 95 4 95 30] (self : CMap1.t_map i Item1.item f) : bool
    ensures { result = invariant' self }
    
end
module NewClonesTest_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  use prelude.Bool
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use mach.int.Int
  use prelude.Borrow
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Impl0_Produces_Stub as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone NewClonesTest_Impl0_Invariant_Stub as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  function produces_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 64 4 64 29] (a : CMap1.t_map i Item1.item f) : ()
    
end
module NewClonesTest_Impl0_ProducesRefl
  type i
  type b
  type f
  use Core_Marker_PhantomData_Type as CPhantomData2
  use seq.Seq
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData3
  use Core_Marker_PhantomData_Type as CPhantomData4
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Opaque
  use mach.int.Int
  use prelude.Borrow
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData7
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl0_Produces_Stub as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_PreservationInv_Stub as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone NewClonesTest_Impl0_Invariant_Stub as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  function produces_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 64 4 64 29] (a : CMap1.t_map i Item1.item f) : ()
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 61 4 61 10] ()
  val produces_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 64 4 64 29] (a : CMap1.t_map i Item1.item f) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 62 15 62 28] Invariant2.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : CMap1.t_map i Item1.item f . ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 62 15 62 28] Invariant2.invariant' a) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 63 14 63 39] Produces2.produces a (Seq.empty ) a)
end
module NewClonesTest_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  use Core_Marker_PhantomData_Type as CPhantomData2
  use seq.Seq
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData3
  use Core_Marker_PhantomData_Type as CPhantomData4
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Opaque
  use mach.int.Int
  use prelude.Borrow
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData7
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl0_Produces as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Iterator_Invariant as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate Precondition1.precondition = Precondition1.precondition,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    val FieldProduced1.field_produced = FieldProduced1.field_produced
  clone NewClonesTest_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant1.invariant' = Invariant1.invariant',
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Iterator_Completed as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Completed1.completed = Completed1.completed,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed2.completed = Completed2.completed,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl0_Invariant as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  let rec ghost function produces_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 64 4 64 29] (a : CMap1.t_map i Item1.item f) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 62 15 62 28] Invariant2.invariant' a}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 63 14 63 39] Produces2.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 61 4 61 10] ()
end
module NewClonesTest_Iterator_ProducesTrans_Stub
  type self
  use prelude.Bool
  use seq.Seq
  clone NewClonesTest_Iterator_Item_Type as Item0 with
    type self = self
  clone NewClonesTest_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 29 4 29 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module NewClonesTest_Iterator_ProducesTrans
  type self
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  clone NewClonesTest_Iterator_Item_Type as Item0 with
    type self = self
  clone NewClonesTest_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 29 4 29 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 29 4 29 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 23 15 23 28] Invariant0.invariant' a}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 24 15 24 28] Invariant0.invariant' b}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 25 15 25 28] Invariant0.invariant' c}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 26 15 26 32] Produces0.produces a ab b}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 27 15 27 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 23 15 23 28] Invariant0.invariant' a) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 24 15 24 28] Invariant0.invariant' b) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 25 15 25 28] Invariant0.invariant' c) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 26 15 26 32] Produces0.produces a ab b) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 27 15 27 32] Produces0.produces b bc c) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 28 14 28 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module NewClonesTest_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use prelude.Bool
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use mach.int.Int
  use prelude.Borrow
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Impl0_Produces_Stub as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone NewClonesTest_Impl0_Invariant_Stub as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  function produces_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 73 4 73 90] (a : CMap1.t_map i Item1.item f) (ab : Seq.seq b) (b : CMap1.t_map i Item1.item f) (bc : Seq.seq b) (c : CMap1.t_map i Item1.item f) : ()
    
end
module NewClonesTest_Impl0_ProducesTrans
  type i
  type b
  type f
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData2
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData3
  use Core_Marker_PhantomData_Type as CPhantomData4
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Opaque
  use mach.int.Int
  use prelude.Borrow
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData7
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl0_Produces_Stub as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_PreservationInv_Stub as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone NewClonesTest_Impl0_Invariant_Stub as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  function produces_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 73 4 73 90] (a : CMap1.t_map i Item1.item f) (ab : Seq.seq b) (b : CMap1.t_map i Item1.item f) (bc : Seq.seq b) (c : CMap1.t_map i Item1.item f) : ()
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 66 4 66 10] ()
  val produces_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 73 4 73 90] (a : CMap1.t_map i Item1.item f) (ab : Seq.seq b) (b : CMap1.t_map i Item1.item f) (bc : Seq.seq b) (c : CMap1.t_map i Item1.item f) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 67 15 67 28] Invariant2.invariant' a}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 68 15 68 28] Invariant2.invariant' b}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 69 15 69 28] Invariant2.invariant' c}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 70 15 70 32] Produces2.produces a ab b}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 71 15 71 32] Produces2.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : CMap1.t_map i Item1.item f, ab : Seq.seq b, b : CMap1.t_map i Item1.item f, bc : Seq.seq b, c : CMap1.t_map i Item1.item f . ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 67 15 67 28] Invariant2.invariant' a) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 68 15 68 28] Invariant2.invariant' b) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 69 15 69 28] Invariant2.invariant' c) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 70 15 70 32] Produces2.produces a ab b) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 71 15 71 32] Produces2.produces b bc c) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 72 14 72 42] Produces2.produces a (Seq.(++) ab bc) c)
end
module NewClonesTest_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData2
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData3
  use Core_Marker_PhantomData_Type as CPhantomData4
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Opaque
  use mach.int.Int
  use prelude.Borrow
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData7
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl0_Produces as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Iterator_Invariant as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate Precondition1.precondition = Precondition1.precondition,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    val FieldProduced1.field_produced = FieldProduced1.field_produced
  clone NewClonesTest_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant1.invariant' = Invariant1.invariant',
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Iterator_Completed as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Completed1.completed = Completed1.completed,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed2.completed = Completed2.completed,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl0_Invariant as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  let rec ghost function produces_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 73 4 73 90] (a : CMap1.t_map i Item1.item f) (ab : Seq.seq b) (b : CMap1.t_map i Item1.item f) (bc : Seq.seq b) (c : CMap1.t_map i Item1.item f) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 67 15 67 28] Invariant2.invariant' a}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 68 15 68 28] Invariant2.invariant' b}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 69 15 69 28] Invariant2.invariant' c}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 70 15 70 32] Produces2.produces a ab b}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 71 15 71 32] Produces2.produces b bc c}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 72 14 72 42] Produces2.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 66 4 66 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  use prelude.Bool
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  use prelude.Bool
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module Core_Ops_Function_FnMut_CallMut_Stub
  type self
  type args
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = args,
    type f = self
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition1.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module NewClonesTest_Impl1_ProducesOne_Stub
  type i
  type b
  type f
  use prelude.Bool
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Impl0_Produces_Stub as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  predicate produces_one [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 185 4 185 57] (self : CMap1.t_map i Item1.item f) (visited : b) (succ : CMap1.t_map i Item1.item f)
    
end
module NewClonesTest_Impl1_ProducesOne
  type i
  type b
  type f
  use prelude.Bool
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use Core_Marker_PhantomData_Type as CPhantomData6
  use prelude.Opaque
  use mach.int.Int
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData7
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl0_Produces_Stub as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  predicate produces_one [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 185 4 185 57] (self : CMap1.t_map i Item1.item f) (visited : b) (succ : CMap1.t_map i Item1.item f)
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 186 8 192 9] exists f : borrowed f .  * f = FieldFunc1.field_func self /\  ^ f = FieldFunc1.field_func succ /\ (exists e : Item1.item . Produces1.produces (FieldIter1.field_iter self) (Seq.singleton e) (FieldIter1.field_iter succ) /\ Ghost.inner (FieldProduced1.field_produced succ) = Seq.snoc (Ghost.inner (FieldProduced1.field_produced self)) e /\ Precondition1.precondition ( * f) (e, FieldProduced1.field_produced self) /\ PostconditionMut2.postcondition_mut f (e, FieldProduced1.field_produced self) visited)
  val produces_one [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 185 4 185 57] (self : CMap1.t_map i Item1.item f) (visited : b) (succ : CMap1.t_map i Item1.item f) : bool
    ensures { result = produces_one self visited succ }
    
  axiom produces_one_spec : forall self : CMap1.t_map i Item1.item f, visited : b, succ : CMap1.t_map i Item1.item f . [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 184 14 184 68] produces_one self visited succ = Produces2.produces self (Seq.singleton visited) succ
end
module NewClonesTest_Impl1_ProducesOne_Impl
  type i
  type b
  type f
  use prelude.Bool
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use Core_Marker_PhantomData_Type as CPhantomData6
  use prelude.Opaque
  use mach.int.Int
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData7
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl0_Produces as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  let rec ghost predicate produces_one [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 185 4 185 57] (self : CMap1.t_map i Item1.item f) (visited : b) (succ : CMap1.t_map i Item1.item f)
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 184 14 184 68] result = Produces2.produces self (Seq.singleton visited) succ }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 186 8 192 9] pure {exists f : borrowed f .  * f = FieldFunc1.field_func self /\  ^ f = FieldFunc1.field_func succ /\ (exists e : Item1.item . Produces1.produces (FieldIter1.field_iter self) (Seq.singleton e) (FieldIter1.field_iter succ) /\ Ghost.inner (FieldProduced1.field_produced succ) = Seq.snoc (Ghost.inner (FieldProduced1.field_produced self)) e /\ Precondition1.precondition ( * f) (e, FieldProduced1.field_produced self) /\ PostconditionMut2.postcondition_mut f (e, FieldProduced1.field_produced self) visited)}
end
module NewClonesTest_Impl1_ProducesOneInvariant_Stub
  type i
  type b
  type f
  use prelude.Bool
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Borrow
  use mach.int.Int
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Impl0_Produces_Stub as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone NewClonesTest_Impl0_Invariant_Stub as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  function produces_one_invariant [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 181 4 181 54] (self : CMap1.t_map i Item1.item f) (e : b) (other : CMap1.t_map i Item1.item f) : ()
    
end
module NewClonesTest_Impl1_ProducesOneInvariant
  type i
  type b
  type f
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as CPhantomData6
  use prelude.Opaque
  use mach.int.Int
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData7
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl0_Produces_Stub as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_PreservationInv_Stub as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone NewClonesTest_Impl0_Invariant_Stub as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  function produces_one_invariant [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 181 4 181 54] (self : CMap1.t_map i Item1.item f) (e : b) (other : CMap1.t_map i Item1.item f) : ()
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 176 4 176 12] ()
  val produces_one_invariant [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 181 4 181 54] (self : CMap1.t_map i Item1.item f) (e : b) (other : CMap1.t_map i Item1.item f) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 177 15 177 31] Invariant2.invariant' self}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 178 15 178 42] ProducesOne0.produces_one self e other}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 179 4 179 39] Invariant1.invariant' (FieldIter1.field_iter other)}
    ensures { result = produces_one_invariant self e other }
    
  axiom produces_one_invariant_spec : forall self : CMap1.t_map i Item1.item f, e : b, other : CMap1.t_map i Item1.item f . ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 177 15 177 31] Invariant2.invariant' self) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 178 15 178 42] ProducesOne0.produces_one self e other) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 179 4 179 39] Invariant1.invariant' (FieldIter1.field_iter other)) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 180 14 180 31] Invariant2.invariant' other)
end
module NewClonesTest_Impl1_ProducesOneInvariant_Impl
  type i
  type b
  type f
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as CPhantomData6
  use prelude.Opaque
  use mach.int.Int
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData7
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Iter as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Invariant as Invariant1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl0_Produces as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces2.produces = Produces2.produces,
    type Item1.item = Item1.item,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate Precondition1.precondition = Precondition1.precondition,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    val FieldProduced1.field_produced = FieldProduced1.field_produced
  clone NewClonesTest_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant1.invariant' = Invariant1.invariant',
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Iterator_Completed as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Completed1.completed = Completed1.completed,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed2.completed = Completed2.completed,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl0_Invariant as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  let rec ghost function produces_one_invariant [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 181 4 181 54] (self : CMap1.t_map i Item1.item f) (e : b) (other : CMap1.t_map i Item1.item f) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 177 15 177 31] Invariant2.invariant' self}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 178 15 178 42] ProducesOne0.produces_one self e other}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 179 4 179 39] Invariant1.invariant' (FieldIter1.field_iter other)}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 180 14 180 31] Invariant2.invariant' other }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 176 4 176 12] ()
end
module Core_Option_Option_Some_0_Stub
  type t
  use Core_Option_Option_Type as TOption0
  val function field_0 (self : TOption0.t_option t) : t
end
module Core_Option_Option_Some_0
  type t
  use Core_Option_Option_Type as TOption0
  let function field_0 (self : TOption0.t_option t) : t = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] match (self) with
      | TOption0.C_None -> any t
      | TOption0.C_Some a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module NewClonesTest_Iterator_Next_Stub
  type self
  use seq.Seq
  use prelude.Bool
  use Core_Option_Option_Type as TOption1
  use prelude.Borrow
  clone NewClonesTest_Iterator_Item_Type as Item0 with
    type self = self
  clone NewClonesTest_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed0 with
    type self = self
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 41 4 41 45] (self : borrowed self) : TOption1.t_option Item0.item
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 36 4 36 40] Invariant0.invariant' ( * self)}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 36 4 36 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 37 14 40 5] match (result) with
      | TOption1.C_None -> Completed0.completed self
      | TOption1.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module NewClonesTest_Impl0_Next_Stub
  type i
  type b
  type f
  use seq.Seq
  use prelude.Bool
  use Core_Option_Option_Type as TOption1
  use prelude.Ghost
  use prelude.Borrow
  use NewClonesTest_Map_Type as CMap1
  use mach.int.Int
  use Core_Option_Option_Type as TOption2
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Impl0_Produces_Stub as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone NewClonesTest_Impl0_Invariant_Stub as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  val next [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 109 4 109 44] (self : borrowed (CMap1.t_map i Item1.item f)) : TOption1.t_option b
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 108 4 108 40] Invariant2.invariant' ( * self)}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 104 14 107 5] match (result) with
      | TOption1.C_None -> Completed2.completed self
      | TOption1.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
      end }
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 108 4 108 40] Invariant2.invariant' ( ^ self) }
    
end
module NewClonesTest_Impl0_Next
  type i
  type b
  type f
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use prelude.Bool
  use Core_Option_Option_Type as TOption1
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use prelude.Borrow
  use NewClonesTest_Map_Type as CMap1
  use Core_Marker_PhantomData_Type as CPhantomData6
  use prelude.Opaque
  use mach.int.Int
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData7
  use Core_Marker_PhantomData_Type as CPhantomData8
  use Core_Option_Option_Type as TOption2
  use prelude.IntSize
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = TOption1.t_option b
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = Ghost.ghost_ty (Seq.seq Item1.item)
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone Core_Ops_Function_FnMut_CallMut_Stub as CallMut1 with
    type self = f,
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut2.postcondition_mut,
    type Output0.output = b
  clone NewClonesTest_Map_Iter as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Invariant as Invariant1 with
    type self = i
  clone NewClonesTest_Map_Produced as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl0_Produces as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces2.produces = Produces2.produces,
    type Item1.item = Item1.item,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate Precondition1.precondition = Precondition1.precondition,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    val FieldProduced1.field_produced = FieldProduced1.field_produced
  clone NewClonesTest_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant1.invariant' = Invariant1.invariant',
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Iterator_Completed as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Completed1.completed = Completed1.completed,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed2.completed = Completed2.completed,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl0_Invariant as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  clone NewClonesTest_Impl1_ProducesOneInvariant as ProducesOneInvariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant2.invariant' = Invariant2.invariant',
    predicate ProducesOne0.produces_one = ProducesOne0.produces_one,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    type Item1.item = Item1.item
  clone Core_Option_Option_Some_0 as Field01 with
    type t = Item1.item
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve3 with
    type self = Item1.item
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve4 with
    type self = TOption2.t_option Item1.item
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve6 with
    type t = CMap1.t_map i Item1.item f
  clone NewClonesTest_Iterator_Next_Stub as Next1 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item1.item
  let rec cfg next [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 109 4 109 44] (self : borrowed (CMap1.t_map i Item1.item f)) : TOption1.t_option b
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 108 4 108 40] Invariant2.invariant' ( * self)}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 104 14 107 5] match (result) with
      | TOption1.C_None -> Completed2.completed self
      | TOption1.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
      end }
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 108 4 108 40] Invariant2.invariant' ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : TOption1.t_option b;
  var self_1 : borrowed (CMap1.t_map i Item1.item f);
  var _5 : TOption2.t_option Item1.item;
  var _6 : borrowed i;
  var _7 : isize;
  var v_8 : Item1.item;
  var _9 : ();
  var _11 : Ghost.ghost_ty ();
  var _14 : ();
  var produced_15 : Ghost.ghost_ty (Seq.seq Item1.item);
  var _17 : ();
  var r_18 : TOption1.t_option b;
  var _19 : b;
  var _20 : borrowed f;
  var _21 : (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item));
  var _22 : Item1.item;
  var _23 : Ghost.ghost_ty (Seq.seq Item1.item);
  var _25 : ();
  var _26 : Ghost.ghost_ty (Seq.seq Item1.item);
  var _27 : Ghost.ghost_ty (Seq.seq Item1.item);
  var _30 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut (FieldIter1.field_iter ( * self_1));
    self_1 <- { self_1 with current = (let CMap1.C_Map a b c =  * self_1 in CMap1.C_Map ( ^ _6) b c) };
    _5 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 110 14 110 30] Next1.next _6);
    goto BB1
  }
  BB1 {
    switch (_5)
      | TOption2.C_None -> goto BB2
      | TOption2.C_Some _ -> goto BB4
      end
  }
  BB2 {
    _30 <- ();
    _27 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 120 32 120 53] Ghost.new (Seq.empty ));
    goto BB14
  }
  BB3 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve4.resolve _5 };
    absurd
  }
  BB4 {
    assume { Resolve3.resolve v_8 };
    v_8 <- Field01.field_0 _5;
    _5 <- (let TOption2.C_Some a = _5 in TOption2.C_Some (any Item1.item));
    assert { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 112 16 112 76] Precondition1.precondition (FieldFunc1.field_func ( * self_1)) (v_8, FieldProduced1.field_produced ( * self_1)) };
    goto BB5
  }
  BB5 {
    _9 <- ();
    _14 <- ();
    _11 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 113 16 113 55] Ghost.new ());
    goto BB6
  }
  BB6 {
    _17 <- ();
    produced_15 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 114 31 114 63] Ghost.new (Seq.snoc (Ghost.inner (FieldProduced1.field_produced ( * self_1))) v_8));
    goto BB7
  }
  BB7 {
    _20 <- borrow_mut (FieldFunc1.field_func ( * self_1));
    self_1 <- { self_1 with current = (let CMap1.C_Map a b c =  * self_1 in CMap1.C_Map a ( ^ _20) c) };
    assume { Resolve3.resolve _22 };
    _22 <- v_8;
    v_8 <- any Item1.item;
    _25 <- ();
    _23 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 115 44 115 76] Ghost.new (Ghost.inner (FieldProduced1.field_produced ( * self_1))));
    goto BB8
  }
  BB8 {
    _21 <- (_22, _23);
    _19 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 115 29 115 77] CallMut1.call_mut _20 _21);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    r_18 <- TOption1.C_Some _19;
    goto BB11
  }
  BB11 {
    assume { Resolve2.resolve _26 };
    _26 <- produced_15;
    produced_15 <- any Ghost.ghost_ty (Seq.seq Item1.item);
    assume { Resolve2.resolve (FieldProduced1.field_produced ( * self_1)) };
    self_1 <- { self_1 with current = (let CMap1.C_Map a b c =  * self_1 in CMap1.C_Map a b _26) };
    _26 <- any Ghost.ghost_ty (Seq.seq Item1.item);
    assume { Resolve6.resolve self_1 };
    assume { Resolve1.resolve _0 };
    _0 <- r_18;
    r_18 <- any TOption1.t_option b;
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB15
  }
  BB14 {
    assume { Resolve2.resolve (FieldProduced1.field_produced ( * self_1)) };
    self_1 <- { self_1 with current = (let CMap1.C_Map a b c =  * self_1 in CMap1.C_Map a b _27) };
    _27 <- any Ghost.ghost_ty (Seq.seq Item1.item);
    assume { Resolve6.resolve self_1 };
    _0 <- TOption1.C_None;
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    assume { Resolve4.resolve _5 };
    return _0
  }
  
end
module NewClonesTest_Map_Stub
  type i
  type b
  type f
  use prelude.Bool
  use seq.Seq
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use mach.int.Int
  use prelude.Borrow
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed_Stub as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone NewClonesTest_Impl0_Invariant_Stub as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item
  val map [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 202 0 205 23] (iter : i) (func : f) : CMap1.t_map i Item1.item f
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 196 0 196 147] forall i2 : i . forall e : Item1.item . Invariant1.invariant' i2 -> Produces1.produces iter (Seq.singleton e) i2 -> Precondition1.precondition func (e, Ghost.new (Seq.empty ))}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 197 11 197 41] Reinitialize0.reinitialize ()}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 198 11 198 27] Invariant1.invariant' iter}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 199 11 199 57] Preservation0.preservation iter func}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 200 10 200 28] Invariant2.invariant' result }
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 201 10 201 72] result = CMap1.C_Map iter func (Ghost.new (Seq.empty )) }
    
end
module NewClonesTest_Map
  type i
  type b
  type f
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use prelude.Opaque
  use mach.int.Int
  use prelude.Borrow
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = f
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = i
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Map_Produced as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Func as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Iter as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate Precondition1.precondition = Precondition1.precondition,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    val FieldProduced1.field_produced = FieldProduced1.field_produced
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant1.invariant' = Invariant1.invariant',
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Iterator_Completed as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Completed1.completed = Completed1.completed,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed2.completed = Completed2.completed,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl0_Invariant as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  let rec cfg map [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 202 0 205 23] (iter : i) (func : f) : CMap1.t_map i Item1.item f
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 196 0 196 147] forall i2 : i . forall e : Item1.item . Invariant1.invariant' i2 -> Produces1.produces iter (Seq.singleton e) i2 -> Precondition1.precondition func (e, Ghost.new (Seq.empty ))}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 197 11 197 41] Reinitialize0.reinitialize ()}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 198 11 198 27] Invariant1.invariant' iter}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 199 11 199 57] Preservation0.preservation iter func}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 200 10 200 28] Invariant2.invariant' result }
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 201 10 201 72] result = CMap1.C_Map iter func (Ghost.new (Seq.empty )) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : CMap1.t_map i Item1.item f;
  var iter_1 : i;
  var func_2 : f;
  var _9 : i;
  var _10 : f;
  var _11 : Ghost.ghost_ty (Seq.seq Item1.item);
  var _14 : ();
  {
    iter_1 <- iter;
    func_2 <- func;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _9 };
    _9 <- iter_1;
    iter_1 <- any i;
    assume { Resolve1.resolve _10 };
    _10 <- func_2;
    func_2 <- any f;
    _14 <- ();
    _11 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 206 32 206 51] Ghost.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    _0 <- CMap1.C_Map _9 _10 _11;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module NewClonesTest_Identity_Closure0_Type
  use prelude.Int16
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  type newclonestest_identity_closure0  =
    | NewClonesTest_Identity_Closure0
    
end
module NewClonesTest_Identity_Closure0
  let function NewClonesTest_Identity_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 211 14 211 20] (_1' : Closure00.newclonestest_identity_closure0) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] true
end
module NewClonesTest_Identity_Closure0
  let function NewClonesTest_Identity_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 211 14 211 20] (self : Closure00.newclonestest_identity_closure0) (args : (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item))) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] let (x, _3') = args in true
end
module NewClonesTest_Identity_Closure0
  let function NewClonesTest_Identity_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 211 14 211 20] (self : Closure00.newclonestest_identity_closure0) (_2' : Closure00.newclonestest_identity_closure0) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] true
end
module NewClonesTest_Identity_Closure0
  let function NewClonesTest_Identity_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 211 14 211 20] (self : borrowed Closure00.newclonestest_identity_closure0) (args : (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item))) (result' : Item1.item) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] (let (x, _3') = args in true) /\ Closure01.newClonesTest_Identity_Closure0 ( * self) ( ^ self)
end
module NewClonesTest_Identity_Closure0_Stub
  type i
  use prelude.Bool
  use seq.Seq
  use prelude.Ghost
  use mach.int.Int
  use prelude.Borrow
  use prelude.Int16
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Identity_Closure0_Type as Closure00 with
    type i = i
  val newClonesTest_Identity_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 211 14 211 20] (_1' : borrowed Closure00.newclonestest_identity_closure0) (x : Item1.item) (_3' : Ghost.ghost_ty (Seq.seq Item1.item)) : Item1.item
    
end
module NewClonesTest_Identity_Closure0
  type i
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use prelude.Opaque
  use mach.int.Int
  use prelude.Borrow
  use prelude.Int16
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = Ghost.ghost_ty (Seq.seq Item1.item)
  clone NewClonesTest_Identity_Closure0_Type as Closure00 with
    type i = i
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Closure00.newclonestest_identity_closure0
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve4 with
    type self = Item1.item
  let rec cfg newClonesTest_Identity_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 211 14 211 20] (_1' : borrowed Closure00.newclonestest_identity_closure0) (x : Item1.item) (_3' : Ghost.ghost_ty (Seq.seq Item1.item)) : Item1.item
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Item1.item;
  var _1 : borrowed Closure00.newclonestest_identity_closure0;
  var x_2 : Item1.item;
  var _3 : Ghost.ghost_ty (Seq.seq Item1.item);
  {
    _1 <- _1';
    x_2 <- x;
    _3 <- _3';
    goto BB0
  }
  BB0 {
    assume { Resolve4.resolve _0 };
    _0 <- x_2;
    x_2 <- any Item1.item;
    assume { Resolve3.resolve _1 };
    assume { Resolve1.resolve _3 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module NewClonesTest_Identity_Stub
  type i
  use prelude.Bool
  use seq.Seq
  use prelude.Ghost
  use prelude.Int16
  use NewClonesTest_Map_Type as CMap1
  use mach.int.Int
  use prelude.Borrow
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Identity_Closure0_Type as Closure00 with
    type i = i
  clone NewClonesTest_Map_Produced_Stub as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = Closure00.newclonestest_identity_closure0
  clone NewClonesTest_Map_Func_Stub as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = Closure00.newclonestest_identity_closure0
  clone NewClonesTest_Identity_Closure0_Precondition_Stub as Closure02 with
    type i = i,
    type Item1.item = Item1.item
  clone NewClonesTest_Map_Iter_Stub as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = Closure00.newclonestest_identity_closure0
  clone NewClonesTest_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_Preservation_Stub as Preservation1 with
    type i = i,
    type b = Item1.item,
    type f = Closure00.newclonestest_identity_closure0,
    type Item1.item = Item1.item
  clone NewClonesTest_Iterator_Completed_Stub as Completed1 with
    type self = i
  clone NewClonesTest_Impl1_Reinitialize_Stub as Reinitialize1 with
    type i = i,
    type b = Item1.item,
    type f = Closure00.newclonestest_identity_closure0
  clone NewClonesTest_Impl0_Invariant_Stub as Invariant3 with
    type i = i,
    type b = Item1.item,
    type f = Closure00.newclonestest_identity_closure0,
    type Item1.item = Item1.item
  val identity [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 210 0 210 37] (iter : i) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 209 11 209 27] Invariant1.invariant' iter}
    
end
module NewClonesTest_Identity
  type i
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use prelude.Int16
  use NewClonesTest_Map_Type as CMap1
  use prelude.Opaque
  use mach.int.Int
  use prelude.Borrow
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone NewClonesTest_Identity_Closure0_Type as Closure00 with
    type i = i
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = CMap1.t_map i Item1.item Closure00.newclonestest_identity_closure0
  clone NewClonesTest_Identity_Closure0 as Closure01 with
    type i = i,
    type Item1.item = Item1.item,
    val Closure00.newClonesTest_Identity_Closure0 = Closure00.newClonesTest_Identity_Closure0
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = i
  clone NewClonesTest_Map_Produced as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = Closure00.newclonestest_identity_closure0
  clone NewClonesTest_Map_Func as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = Closure00.newclonestest_identity_closure0
  clone NewClonesTest_Identity_Closure0 as Closure02 with
    type i = i,
    type Item1.item = Item1.item,
    val Closure00.newClonesTest_Identity_Closure0 = Closure00.newClonesTest_Identity_Closure0
  clone NewClonesTest_Map_Iter as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = Closure00.newclonestest_identity_closure0
  clone NewClonesTest_Iterator_Produces as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Iterator_Invariant as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_NextPrecondition as NextPrecondition1 with
    type i = i,
    type b = Item1.item,
    type f = Closure00.newclonestest_identity_closure0,
    type Item1.item = Item1.item,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate Precondition1.precondition = Closure02.newClonesTest_Identity_Closure0,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    val FieldProduced1.field_produced = FieldProduced1.field_produced
  clone NewClonesTest_Identity_Closure0 as Closure03 with
    type i = i,
    type Item1.item = Item1.item,
    val Closure00.newClonesTest_Identity_Closure0 = Closure00.newClonesTest_Identity_Closure0
  clone NewClonesTest_Identity_Closure0 as Closure04 with
    type i = i,
    type Item1.item = Item1.item,
    val Closure00.newClonesTest_Identity_Closure0 = Closure00.newClonesTest_Identity_Closure0,
    val Closure01.newClonesTest_Identity_Closure0 = Closure03.newClonesTest_Identity_Closure0
  clone NewClonesTest_Impl1_Preservation as Preservation1 with
    type i = i,
    type b = Item1.item,
    type f = Closure00.newclonestest_identity_closure0,
    type Item1.item = Item1.item,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Unnest1.unnest = Closure03.newClonesTest_Identity_Closure0,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Closure02.newClonesTest_Identity_Closure0,
    predicate PostconditionMut2.postcondition_mut = Closure04.newClonesTest_Identity_Closure0
  clone NewClonesTest_Impl1_PreservationInv as PreservationInv1 with
    type i = i,
    type b = Item1.item,
    type f = Closure00.newclonestest_identity_closure0,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Preservation0.preservation = Preservation1.preservation,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Unnest1.unnest = Closure03.newClonesTest_Identity_Closure0,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Closure02.newClonesTest_Identity_Closure0,
    predicate PostconditionMut2.postcondition_mut = Closure04.newClonesTest_Identity_Closure0
  clone NewClonesTest_Iterator_Completed as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed as Completed3 with
    type i = i,
    type b = Item1.item,
    type f = Closure00.newclonestest_identity_closure0,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Completed1.completed = Completed1.completed,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl1_Reinitialize as Reinitialize1 with
    type i = i,
    type b = Item1.item,
    type f = Closure00.newclonestest_identity_closure0,
    predicate Completed2.completed = Completed3.completed,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition1.next_precondition,
    predicate Preservation0.preservation = Preservation1.preservation,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl0_Invariant as Invariant3 with
    type i = i,
    type b = Item1.item,
    type f = Closure00.newclonestest_identity_closure0,
    type Item1.item = Item1.item,
    predicate Reinitialize0.reinitialize = Reinitialize1.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv1.preservation_inv,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition1.next_precondition
  clone NewClonesTest_Map_Stub as Map1 with
    type i = i,
    type b = Item1.item,
    type f = Closure00.newclonestest_identity_closure0,
    type Item1.item = Item1.item,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Closure02.newClonesTest_Identity_Closure0,
    predicate Reinitialize0.reinitialize = Reinitialize1.reinitialize,
    predicate Preservation0.preservation = Preservation1.preservation,
    predicate Invariant2.invariant' = Invariant3.invariant'
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve4 with
    type self = Ghost.ghost_ty (Seq.seq Item1.item)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve6 with
    type t = Closure00.newclonestest_identity_closure0
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve7 with
    type self = Item1.item
  clone NewClonesTest_Identity_Closure0_Stub as Closure05 with
    type i = i,
    type Item1.item = Item1.item,
    val Closure00.newClonesTest_Identity_Closure0 = Closure00.newClonesTest_Identity_Closure0,
    predicate Resolve4.resolve = Resolve7.resolve,
    predicate Resolve3.resolve = Resolve6.resolve,
    predicate Resolve1.resolve = Resolve4.resolve
  let rec cfg identity [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 210 0 210 37] (iter : i) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 209 11 209 27] Invariant1.invariant' iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter_1 : i;
  var _3 : CMap1.t_map i Item1.item Closure00.newclonestest_identity_closure0;
  var _4 : i;
  var _5 : Closure00.newclonestest_identity_closure0;
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve2.resolve _4 };
    _4 <- iter_1;
    iter_1 <- any i;
    _5 <- Closure05.NewClonesTest_Identity_Closure0;
    _3 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 211 4 211 23] Map1.map _4 _5);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve _3 };
    _0 <- ();
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module NewClonesTest_Impl0
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Marker_PhantomData_Type as CPhantomData2
  use prelude.Ghost
  use NewClonesTest_Map_Type as CMap1
  use Core_Marker_PhantomData_Type as CPhantomData5
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  use prelude.Borrow
  use seq_ext.SeqExt
  use Core_Marker_PhantomData_Type as CPhantomData7
  clone NewClonesTest_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut2 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f,
    type Output1.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Map_Produced as FieldProduced1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Map_Iter as FieldIter1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone NewClonesTest_Iterator_Produces as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone NewClonesTest_Map_Func as FieldFunc1 with
    type i = i,
    type a = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest1 with
    type args = (Item1.item, Ghost.ghost_ty (Seq.seq Item1.item)),
    type f = f
  clone NewClonesTest_Impl0_Produces as Produces2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Iterator_Invariant as Invariant1 with
    type self = i
  clone NewClonesTest_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Produces1.produces = Produces1.produces,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate Precondition1.precondition = Precondition1.precondition,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    val FieldProduced1.field_produced = FieldProduced1.field_produced
  clone NewClonesTest_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant1.invariant' = Invariant1.invariant',
    type Item1.item = Item1.item,
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Unnest1.unnest = Unnest1.unnest,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate PostconditionMut2.postcondition_mut = PostconditionMut2.postcondition_mut
  clone NewClonesTest_Iterator_Completed as Completed1 with
    type self = i
  clone NewClonesTest_Impl0_Completed as Completed2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    val FieldProduced1.field_produced = FieldProduced1.field_produced,
    predicate Completed1.completed = Completed1.completed,
    val FieldIter1.field_iter = FieldIter1.field_iter,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed2.completed = Completed2.completed,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation,
    val FieldFunc1.field_func = FieldFunc1.field_func
  clone NewClonesTest_Impl0_Invariant as Invariant2 with
    type i = i,
    type b = b,
    type f = f,
    type Item1.item = Item1.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant1.invariant' = Invariant1.invariant',
    val FieldIter1.field_iter = FieldIter1.field_iter,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  clone NewClonesTest_Impl0_ProducesTrans as ProducesTrans1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant2.invariant' = Invariant2.invariant',
    predicate Produces2.produces = Produces2.produces,
    type Item1.item = Item1.item
  clone NewClonesTest_Impl0_ProducesRefl as ProducesRefl1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant2.invariant' = Invariant2.invariant',
    predicate Produces2.produces = Produces2.produces,
    type Item1.item = Item1.item
  goal produces_refl_spec : [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 64 4 64 29] forall a : CMap1.t_map i Item1.item f . (Invariant2.invariant' a -> Invariant2.invariant' a) /\ (forall result : () . Produces2.produces a (Seq.empty ) a -> Produces2.produces a (Seq.empty ) a)
  goal produces_trans_spec : [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 73 4 73 90] forall a : CMap1.t_map i Item1.item f . forall ab : Seq.seq b . forall b : CMap1.t_map i Item1.item f . forall bc : Seq.seq b . forall c : CMap1.t_map i Item1.item f . (Produces2.produces b bc c /\ Produces2.produces a ab b /\ Invariant2.invariant' c /\ Invariant2.invariant' b /\ Invariant2.invariant' a -> Produces2.produces b bc c /\ Produces2.produces a ab b /\ Invariant2.invariant' c /\ Invariant2.invariant' b /\ Invariant2.invariant' a) /\ (forall result : () . Produces2.produces a (Seq.(++) ab bc) c -> Produces2.produces a (Seq.(++) ab bc) c)
end
