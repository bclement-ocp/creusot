
module NewClonesTest_Impl0_Precondition_Stub
  type args
  type f
  use prelude.Bool
  predicate precondition [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 48 4 48 42] (self : f) (_2' : args)
end
module NewClonesTest_Impl0_Precondition
  type args
  type f
  use prelude.Bool
  predicate precondition [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 48 4 48 42] (self : f) (_2' : args)
  val precondition [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 48 4 48 42] (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module NewClonesTest_Impl0_PostconditionOnce_Stub
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 54 4 54 65] (self : f) (_2' : args) (_3' : Output1.output)
    
end
module NewClonesTest_Impl0_PostconditionOnce
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 54 4 54 65] (self : f) (_2' : args) (_3' : Output1.output)
    
  val postcondition_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 54 4 54 65] (self : f) (_2' : args) (_3' : Output1.output) : bool
    ensures { result = postcondition_once self _2' _3' }
    
end
module NewClonesTest_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_mut [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 62 4 62 69] (self : borrowed f) (_2' : args) (_3' : Output1.output)
    
end
module NewClonesTest_Impl1_PostconditionMut
  type args
  type f
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_mut [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 62 4 62 69] (self : borrowed f) (_2' : args) (_3' : Output1.output)
    
  val postcondition_mut [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 62 4 62 69] (self : borrowed f) (_2' : args) (_3' : Output1.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module NewClonesTest_Impl1_Unnest_Stub
  type args
  type f
  use prelude.Bool
  predicate unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 68 4 68 36] (self : f) (_2' : f)
end
module NewClonesTest_Impl1_Unnest
  type args
  type f
  use prelude.Bool
  predicate unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 68 4 68 36] (self : f) (_2' : f)
  val unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 68 4 68 36] (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module NewClonesTest_FnMutExt_Unnest_Stub
  type self
  type args
  use prelude.Bool
  predicate unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 21 4 21 37] (self : self) (_2' : self)
end
module NewClonesTest_FnMutExt_Unnest
  type self
  type args
  use prelude.Bool
  predicate unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 21 4 21 37] (self : self) (_2' : self)
  val unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 21 4 21 37] (self : self) (_2' : self) : bool
    ensures { result = unnest self _2' }
    
end
module NewClonesTest_FnMutExt_PostconditionMut_Stub
  type self
  type args
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 18 4 18 70] (self : borrowed self) (_2' : args) (_3' : Output0.output)
    
end
module NewClonesTest_FnMutExt_PostconditionMut
  type self
  type args
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 18 4 18 70] (self : borrowed self) (_2' : args) (_3' : Output0.output)
    
  val postcondition_mut [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 18 4 18 70] (self : borrowed self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module NewClonesTest_FnMutExt_PostconditionMutUnnest_Stub
  type self
  type args
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone NewClonesTest_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone NewClonesTest_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function postcondition_mut_unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 26 4 26 74] (self : borrowed self) (args : args) (res : Output0.output) : ()
    
end
module NewClonesTest_FnMutExt_PostconditionMutUnnest
  type self
  type args
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone NewClonesTest_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone NewClonesTest_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function postcondition_mut_unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 26 4 26 74] (self : borrowed self) (args : args) (res : Output0.output) : ()
    
  val postcondition_mut_unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 26 4 26 74] (self : borrowed self) (args : args) (res : Output0.output) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 24 15 24 48] PostconditionMut0.postcondition_mut self args res}
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed self, args : args, res : Output0.output . ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 24 15 24 48] PostconditionMut0.postcondition_mut self args res) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 25 14 25 35] Unnest0.unnest ( * self) ( ^ self))
end
module NewClonesTest_Impl1_PostconditionMutUnnest_Stub
  type args
  type f
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  clone NewClonesTest_Impl1_Unnest_Stub as Unnest1 with
    type args = args,
    type f = f
  clone NewClonesTest_Impl1_PostconditionMut_Stub as PostconditionMut1 with
    type args = args,
    type f = f,
    type Output1.output = Output1.output
  function postcondition_mut_unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 75 4 75 73] (self : borrowed f) (args : args) (res : Output1.output) : ()
    
end
module NewClonesTest_Impl1_PostconditionMutUnnest
  type args
  type f
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  clone NewClonesTest_Impl1_Unnest_Stub as Unnest1 with
    type args = args,
    type f = f
  clone NewClonesTest_Impl1_PostconditionMut_Stub as PostconditionMut1 with
    type args = args,
    type f = f,
    type Output1.output = Output1.output
  function postcondition_mut_unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 75 4 75 73] (self : borrowed f) (args : args) (res : Output1.output) : ()
    
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 72 4 72 10] ()
  val postcondition_mut_unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 75 4 75 73] (self : borrowed f) (args : args) (res : Output1.output) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 73 15 73 48] PostconditionMut1.postcondition_mut self args res}
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output1.output . ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 73 15 73 48] PostconditionMut1.postcondition_mut self args res) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 74 14 74 35] Unnest1.unnest ( * self) ( ^ self))
end
module NewClonesTest_Impl1_PostconditionMutUnnest_Impl
  type args
  type f
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  clone NewClonesTest_Impl1_Unnest as Unnest1 with
    type args = args,
    type f = f
  clone NewClonesTest_Impl1_PostconditionMut as PostconditionMut1 with
    type args = args,
    type f = f,
    type Output1.output = Output1.output
  let rec ghost function postcondition_mut_unnest [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 75 4 75 73] (self : borrowed f) (args : args) (res : Output1.output) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 73 15 73 48] PostconditionMut1.postcondition_mut self args res}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 74 14 74 35] Unnest1.unnest ( * self) ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 72 4 72 10] ()
end
module NewClonesTest_FnMutExt_UnnestRefl_Stub
  type self
  type args
  use prelude.Bool
  clone NewClonesTest_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 30 4 30 25] (self : self) : ()
end
module NewClonesTest_FnMutExt_UnnestRefl
  type self
  type args
  use prelude.Bool
  clone NewClonesTest_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 30 4 30 25] (self : self) : ()
  val unnest_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 30 4 30 25] (self : self) : ()
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : self . [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 29 14 29 31] Unnest0.unnest self self
end
module NewClonesTest_Impl1_UnnestRefl_Stub
  type args
  type f
  use prelude.Bool
  clone NewClonesTest_Impl1_Unnest_Stub as Unnest1 with
    type args = args,
    type f = f
  function unnest_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 79 4 79 24] (self : f) : ()
end
module NewClonesTest_Impl1_UnnestRefl
  type args
  type f
  use prelude.Bool
  clone NewClonesTest_Impl1_Unnest_Stub as Unnest1 with
    type args = args,
    type f = f
  function unnest_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 79 4 79 24] (self : f) : () =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 77 4 77 10] ()
  val unnest_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 79 4 79 24] (self : f) : ()
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 78 14 78 31] Unnest1.unnest self self
end
module NewClonesTest_Impl1_UnnestRefl_Impl
  type args
  type f
  use prelude.Bool
  clone NewClonesTest_Impl1_Unnest as Unnest1 with
    type args = args,
    type f = f
  let rec ghost function unnest_refl [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 79 4 79 24] (self : f) : ()
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 78 14 78 31] Unnest1.unnest self self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 77 4 77 10] ()
end
module NewClonesTest_FnMutExt_UnnestTrans_Stub
  type self
  type args
  use prelude.Bool
  clone NewClonesTest_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 36 4 36 44] (self : self) (b : self) (c : self) : ()
    
end
module NewClonesTest_FnMutExt_UnnestTrans
  type self
  type args
  use prelude.Bool
  clone NewClonesTest_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 36 4 36 44] (self : self) (b : self) (c : self) : ()
    
  val unnest_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 36 4 36 44] (self : self) (b : self) (c : self) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 33 15 33 29] Unnest0.unnest self b}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 34 15 34 26] Unnest0.unnest b c}
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : self, b : self, c : self . ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 33 15 33 29] Unnest0.unnest self b) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 34 15 34 26] Unnest0.unnest b c) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 35 14 35 28] Unnest0.unnest self c)
end
module NewClonesTest_Impl1_UnnestTrans_Stub
  type args
  type f
  use prelude.Bool
  clone NewClonesTest_Impl1_Unnest_Stub as Unnest1 with
    type args = args,
    type f = f
  function unnest_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 85 4 85 43] (self : f) (b : f) (c : f) : ()
end
module NewClonesTest_Impl1_UnnestTrans
  type args
  type f
  use prelude.Bool
  clone NewClonesTest_Impl1_Unnest_Stub as Unnest1 with
    type args = args,
    type f = f
  function unnest_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 85 4 85 43] (self : f) (b : f) (c : f) : ()
   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 81 4 81 10] ()
  val unnest_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 85 4 85 43] (self : f) (b : f) (c : f) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 82 15 82 29] Unnest1.unnest self b}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 83 15 83 26] Unnest1.unnest b c}
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 82 15 82 29] Unnest1.unnest self b) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 83 15 83 26] Unnest1.unnest b c) -> ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 84 14 84 28] Unnest1.unnest self c)
end
module NewClonesTest_Impl1_UnnestTrans_Impl
  type args
  type f
  use prelude.Bool
  clone NewClonesTest_Impl1_Unnest as Unnest1 with
    type args = args,
    type f = f
  let rec ghost function unnest_trans [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 85 4 85 43] (self : f) (b : f) (c : f) : ()
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 82 15 82 29] Unnest1.unnest self b}
    requires {[#"..//Users/xavier/Code/creusot/new_clones_test.rs" 83 15 83 26] Unnest1.unnest b c}
    ensures { [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 84 14 84 28] Unnest1.unnest self c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 81 4 81 10] ()
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  use prelude.Bool
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  use prelude.Bool
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module NewClonesTest_FnOnceExt_PostconditionOnce_Stub
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 13 4 13 68] (self : self) (a : args) (res : Output0.output)
    
end
module NewClonesTest_FnOnceExt_PostconditionOnce
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 13 4 13 68] (self : self) (a : args) (res : Output0.output)
    
  val postcondition_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 13 4 13 68] (self : self) (a : args) (res : Output0.output) : bool
    ensures { result = postcondition_once self a res }
    
end
module NewClonesTest_FnMutExt_FnMutOnce_Stub
  type self
  type args
  use prelude.Borrow
  use prelude.Bool
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone NewClonesTest_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone NewClonesTest_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_mut_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 40 4 42 20] (self : self) (args : args) (res : Output0.output) : ()
    
end
module NewClonesTest_FnMutExt_FnMutOnce
  type self
  type args
  use prelude.Borrow
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone NewClonesTest_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone NewClonesTest_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_mut_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 40 4 42 20] (self : self) (args : args) (res : Output0.output) : ()
    
  val fn_mut_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 40 4 42 20] (self : self) (args : args) (res : Output0.output) : ()
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : self, args : args, res : Output0.output . [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 39 14 39 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed self .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module NewClonesTest_Impl1_FnMutOnce_Stub
  type args
  type f
  use prelude.Borrow
  use prelude.Bool
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = f
  clone NewClonesTest_Impl1_PostconditionMut_Stub as PostconditionMut1 with
    type args = args,
    type f = f,
    type Output1.output = Output1.output
  clone NewClonesTest_Impl0_PostconditionOnce_Stub as PostconditionOnce1 with
    type args = args,
    type f = f,
    type Output1.output = Output1.output
  function fn_mut_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 90 4 90 55] (self : f) (args : args) (res : Output1.output) : ()
    
end
module NewClonesTest_Impl1_FnMutOnce
  type args
  type f
  use prelude.Borrow
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = f
  clone NewClonesTest_Impl1_PostconditionMut_Stub as PostconditionMut1 with
    type args = args,
    type f = f,
    type Output1.output = Output1.output
  clone NewClonesTest_Impl0_PostconditionOnce_Stub as PostconditionOnce1 with
    type args = args,
    type f = f,
    type Output1.output = Output1.output
  function fn_mut_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 90 4 90 55] (self : f) (args : args) (res : Output1.output) : ()
    
  val fn_mut_once [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 90 4 90 55] (self : f) (args : args) (res : Output1.output) : ()
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output1.output . [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 89 14 89 135] PostconditionOnce1.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut1.postcondition_mut s args res /\ Resolve1.resolve ( ^ s))
end
module NewClonesTest_Impl0
  
end
module NewClonesTest_Impl1
  use prelude.Bool
  use prelude.Borrow
  use prelude.Opaque
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  clone NewClonesTest_Impl1_Unnest as Unnest1 with
    type args = args,
    type f = f
  clone NewClonesTest_Impl1_PostconditionMut as PostconditionMut1 with
    type args = args,
    type f = f,
    type Output1.output = Output1.output
  clone NewClonesTest_Impl1_PostconditionMutUnnest as PostconditionMutUnnest1 with
    type args = args,
    type f = f,
    predicate PostconditionMut1.postcondition_mut = PostconditionMut1.postcondition_mut,
    predicate Unnest1.unnest = Unnest1.unnest,
    type Output1.output = Output1.output
  clone NewClonesTest_Impl1_UnnestTrans as UnnestTrans1 with
    type args = args,
    type f = f,
    predicate Unnest1.unnest = Unnest1.unnest
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = f
  clone NewClonesTest_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output1.output = Output1.output
  clone NewClonesTest_Impl1_FnMutOnce as FnMutOnce1 with
    type args = args,
    type f = f,
    predicate PostconditionOnce1.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut1.postcondition_mut = PostconditionMut1.postcondition_mut,
    predicate Resolve1.resolve = Resolve1.resolve,
    type Output1.output = Output1.output
  clone NewClonesTest_Impl1_UnnestRefl as UnnestRefl1 with
    type args = args,
    type f = f,
    predicate Unnest1.unnest = Unnest1.unnest
  goal unnest_refl_spec : [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 79 4 79 24] forall self : f . forall result : () . Unnest1.unnest self self -> Unnest1.unnest self self
  goal fn_mut_once_spec : [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 90 4 90 55] forall self : f . forall args : args . forall res : Output1.output . forall result : () . PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut1.postcondition_mut s args res /\ Resolve1.resolve ( ^ s)) -> PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut1.postcondition_mut s args res /\ Resolve1.resolve ( ^ s))
  goal unnest_trans_spec : [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 85 4 85 43] forall self : f . forall b : f . forall c : f . (Unnest1.unnest b c /\ Unnest1.unnest self b -> Unnest1.unnest b c /\ Unnest1.unnest self b) /\ (forall result : () . Unnest1.unnest self c -> Unnest1.unnest self c)
  goal postcondition_mut_unnest_spec : [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 75 4 75 73] forall self : borrowed f . forall args : args . forall res : Output1.output . (PostconditionMut1.postcondition_mut self args res -> PostconditionMut1.postcondition_mut self args res) /\ (forall result : () . Unnest1.unnest ( * self) ( ^ self) -> Unnest1.unnest ( * self) ( ^ self))
end
