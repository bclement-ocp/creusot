
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  use prelude.Bool
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  use prelude.Bool
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }

end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }

end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  use prelude.Bool
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  use prelude.Bool
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }

end
module NewClonesTest_Omg_Closure0_Stub
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use prelude.Borrow
  use mach.int.Int32
  use prelude.Int16
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve3 with
    type t = int32
  type newclonestest_omg_closure0  =
    | NewClonesTest_Omg_Closure0 (borrowed int32)

  let function field_0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (self : newclonestest_omg_closure0) : borrowed int32

   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] let NewClonesTest_Omg_Closure0 a = self in a
  predicate precondition [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (self : newclonestest_omg_closure0) (_ : ())

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] true
  predicate unnest [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (self : newclonestest_omg_closure0) (_2' : newclonestest_omg_closure0)

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0]  ^ field_0 _2' =  ^ field_0 self /\ true
  predicate postcondition_mut [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (self : borrowed newclonestest_omg_closure0) (_ : ()) (result' : int32)

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (self : newclonestest_omg_closure0) (_ : ()) (result' : int32)

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] true
  predicate resolve [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (_1' : newclonestest_omg_closure0)

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] Resolve3.resolve (field_0 _1') /\ true
  val newClonesTest_Omg_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (_1' : borrowed newclonestest_omg_closure0) : int32

end
module NewClonesTest_Omg_Closure0
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use prelude.Borrow
  use mach.int.Int32
  use prelude.Int16

  type newclonestest_omg_closure0  =
    | NewClonesTest_Omg_Closure0 (borrowed int32)

  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = newclonestest_omg_closure0

  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = int32

  let function field_0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (self : newclonestest_omg_closure0) : borrowed int32

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] let NewClonesTest_Omg_Closure0 a = self in a
  predicate precondition [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (self : newclonestest_omg_closure0) (_ : ())

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] true
  predicate unnest [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (self : newclonestest_omg_closure0) (_2' : newclonestest_omg_closure0)

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0]  ^ field_0 _2' =  ^ field_0 self /\ true
  predicate postcondition_mut [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (self : borrowed newclonestest_omg_closure0) (_ : ()) (result' : int32)

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (self : newclonestest_omg_closure0) (_ : ()) (result' : int32)

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] true
  predicate resolve [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (_1' : newclonestest_omg_closure0)

   =
    [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 1 0 1 0] Resolve3.resolve (field_0 _1') /\ true
  let rec cfg newClonesTest_Omg_Closure0 [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 5 7 7] (_1' : borrowed newclonestest_omg_closure0) : int32

   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _1 : borrowed newclonestest_omg_closure0;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let NewClonesTest_Omg_Closure0 a =  * _1 in NewClonesTest_Omg_Closure0 ({ (field_0 ( * _1)) with current = ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 8 8 8 14]  * field_0 ( * _1) + ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 8 13 8 14] (1 : int32))) })) };
    assume { Resolve2.resolve _1 };
    _0 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 9 8 9 9] (0 : int32));
    return _0
  }

end
module NewClonesTest_Omg_Stub
  use prelude.Borrow
  use prelude.Int16
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int32
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve3 with
    type t = int32
  clone NewClonesTest_Omg_Closure0_Stub as Closure00
  val omg [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 4 0 4 8] (_1' : ()) : ()
end
module NewClonesTest_Omg
  use prelude.Borrow
  use prelude.Int16
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.Int32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = int32
  clone NewClonesTest_Omg_Closure0_Stub as Closure00 with
    predicate Resolve3.resolve = Resolve3.resolve

  let rec cfg omg [@cfg:stackify] [#"..//Users/xavier/Code/creusot/new_clones_test.rs" 4 0 4 8] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : int32;
  var _2 : int32;
  var _3 : borrowed Closure00.newclonestest_omg_closure0;
  var _4 : Closure00.newclonestest_omg_closure0;
  var _5 : borrowed int32;
  var _6 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 5 16 5 17] (0 : int32));
    _5 <- borrow_mut a_1;
    a_1 <-  ^ _5;
    _4 <- Closure00.NewClonesTest_Omg_Closure0 _5;
    _3 <- borrow_mut _4;
    _4 <-  ^ _3;
    assume { Closure00.resolve _4 };
    _6 <- ();
    _2 <- ([#"..//Users/xavier/Code/creusot/new_clones_test.rs" 7 4 10 8] let () = _6 in Closure00.newClonesTest_Omg_Closure0 _3);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }

end
