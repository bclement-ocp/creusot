<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.11.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC5" version="1.0.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="06_knights_tour.mlcfg"/>
<theory name="C06KnightsTour_Impl3_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="14"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl0_Mov" proved="true">
 <goal name="mov&#39;vc" expl="VC for mov" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="399"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_New_Closure3" proved="true">
 <goal name="c06KnightsTour_Impl1_New_Closure3&#39;vc" expl="VC for c06KnightsTour_Impl1_New_Closure3" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="33"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_New" proved="true">
 <goal name="new&#39;vc" expl="VC for new" proved="true">
 <proof prover="0"><result status="valid" time="0.21" steps="752652"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_Available" proved="true">
 <goal name="available&#39;vc" expl="VC for available" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="533"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_CountDegree" proved="true">
 <goal name="count_degree&#39;vc" expl="VC for count_degree" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="count_degree&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="10"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="76"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="79"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.7" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="count_degree&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.07" steps="1463"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.8" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="count_degree&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.14" steps="1519"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.10" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="636"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.12" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="count_degree&#39;vc.12.0" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.13" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="count_degree&#39;vc.13.0" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="44"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <proof prover="1"><result status="valid" time="0.11" steps="2132"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Min" proved="true">
 <goal name="min&#39;vc" expl="VC for min" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="min&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="2"/></proof>
  </goal>
  <goal name="min&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="min&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
  <goal name="min&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="min&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="min&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="47"/></proof>
  </goal>
  <goal name="min&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
  <goal name="min&#39;vc.7" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="min&#39;vc.7.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.7.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="33"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="min&#39;vc.7.1" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.7.1.0" expl="loop invariant preservation" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="min&#39;vc.8" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="min&#39;vc.8.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.8.0.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="min&#39;vc.8.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="min&#39;vc.8.0.0.0.0" expl="loop invariant preservation" proved="true">
      <proof prover="1"><result status="valid" time="0.18" steps="2029"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="min&#39;vc.8.1" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.8.1.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="min&#39;vc.8.1.0.0" expl="loop invariant preservation" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="min&#39;vc.8.1.0.0.0" expl="loop invariant preservation" proved="true">
      <proof prover="1"><result status="valid" time="0.02" steps="143"/></proof>
      </goal>
      <goal name="min&#39;vc.8.1.0.0.1" expl="loop invariant preservation" proved="true">
      <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
       <goal name="min&#39;vc.8.1.0.0.1.0" expl="loop invariant preservation" proved="true">
       <proof prover="1"><result status="valid" time="0.20" steps="3772"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_DumbNonlinearArith_Impl" proved="true">
 <goal name="dumb_nonlinear_arith&#39;vc" expl="VC for dumb_nonlinear_arith" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_KnightsTour" proved="true">
 <goal name="knights_tour&#39;vc" expl="VC for knights_tour" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="knights_tour&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="32"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="388"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="23"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="48"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="45"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="171"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="49"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="49"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="2163"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="74"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="123"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.15" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="128"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.16" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="326"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.17" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="135"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.01" steps="144"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="170"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="1746"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="186"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.04" steps="516"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="191"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="191"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.19" steps="36589"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.26" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="684"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.27" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="714"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.28" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.28.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.30" steps="7964"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.29" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.29.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.29" steps="8198"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="222"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.31" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="227"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.32" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="227"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.33" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="156"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.34" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="knights_tour&#39;vc.34.0" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.11" steps="827"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.35" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.37" steps="66758"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl3" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
</file>
</why3session>
