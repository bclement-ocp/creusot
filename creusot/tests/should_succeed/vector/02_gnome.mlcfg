
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Seq_Impl3_Index_Stub
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  function index (self : Seq.seq t) (_2' : int) : t
end
module CreusotContracts_Logic_Seq_Impl3_Index_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  function index (self : Seq.seq t) (_2' : int) : t
end
module CreusotContracts_Logic_Seq_Impl3_Index
  type t
  function index (self : Seq.seq t) (_2' : Int.int) : t
  val index (self : Seq.seq t) (_2' : Int.int) : t
    ensures { result = index self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl1_LtLog_Stub
  use mach.int.Int
  predicate lt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LtLog_Interface
  use mach.int.Int
  predicate lt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LtLog
  predicate lt_log (self : Int.int) (_2' : Int.int)
  val lt_log (self : Int.int) (_2' : Int.int) : bool
    ensures { result = lt_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl1_LeLog_Stub
  use mach.int.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LeLog_Interface
  use mach.int.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LeLog
  predicate le_log (self : Int.int) (_2' : Int.int)
  val le_log (self : Int.int) (_2' : Int.int) : bool
    ensures { result = le_log self _2' }
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module C02Gnome_SortedRange_Stub
  type t
  use seq.Seq
  use mach.int.Int
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module C02Gnome_SortedRange_Interface
  type t
  use seq.Seq
  use mach.int.Int
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module C02Gnome_SortedRange
  type t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use CreusotContracts_Logic_Int_Int_Type as CreusotContracts_Logic_Int_Int_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use CreusotContracts_Logic_Seq_Seq_Type as CreusotContracts_Logic_Seq_Seq_Type
  clone CreusotContracts_Logic_Seq_Impl3_Index_Stub as Index0 with type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = t, val INVALID.prior = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_Impl1_LtLog_Stub as LtLog0
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  predicate sorted_range [#"../02_gnome.rs" 6 0 6 58] (s : Seq.seq t) (l : Int.int) (u : Int.int) =
    [#"../02_gnome.rs" 7 4 9 5] forall j : Int.int . forall i : Int.int . l <= i /\ i < j /\ j < u -> LeLog0.le_log (Seq.get s i) (Seq.get s j)
  val sorted_range [#"../02_gnome.rs" 6 0 6 58] (s : Seq.seq t) (l : Int.int) (u : Int.int) : bool
    ensures { result = sorted_range s l u }
    
end
module CreusotContracts_Logic_Seq_Impl2_Len_Stub
  type t
  use seq.Seq
  use mach.int.Int
  function len (self : Seq.seq t) : int
end
module CreusotContracts_Logic_Seq_Impl2_Len_Interface
  type t
  use seq.Seq
  use mach.int.Int
  function len (self : Seq.seq t) : int
end
module CreusotContracts_Logic_Seq_Impl2_Len
  type t
  function len (self : Seq.seq t) : Int.int
  val len (self : Seq.seq t) : Int.int
    ensures { result = len self }
    
end
module CreusotContracts_Logic_Int_Impl27_From_Stub
  use mach.int.Int
  use mach.int.Int32
  function from (_1' : int32) : int
end
module CreusotContracts_Logic_Int_Impl27_From_Interface
  use mach.int.Int
  use mach.int.Int32
  function from (_1' : int32) : int
end
module CreusotContracts_Logic_Int_Impl27_From
  function from (_1' : int32) : Int.int
  val from (_1' : int32) : Int.int
    ensures { result = from _1' }
    
end
module C02Gnome_Sorted_Stub
  type t
  use seq.Seq
  predicate sorted (s : Seq.seq t)
end
module C02Gnome_Sorted_Interface
  type t
  use seq.Seq
  predicate sorted (s : Seq.seq t)
end
module C02Gnome_Sorted
  type t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use CreusotContracts_Logic_Int_Int_Type as CreusotContracts_Logic_Int_Int_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use CreusotContracts_Logic_Seq_Seq_Type as CreusotContracts_Logic_Seq_Seq_Type
  clone CreusotContracts_Logic_Seq_Impl2_Len_Stub as Len0 with type t = t
  clone CreusotContracts_Logic_Int_Impl27_From_Stub as From0
  clone CreusotContracts_Logic_Seq_Impl3_Index_Stub as Index0 with type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = t, val INVALID.prior = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_Impl1_LtLog_Stub as LtLog0
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  clone C02Gnome_SortedRange_Stub as SortedRange0 with type t = t, val INVALID.prior = LeLog0.le_log,
    val INVALID.prior = LtLog0.lt_log, val INVALID.prior = LeLog0.le_log, val INVALID.prior = Index0.index
  predicate sorted [#"../02_gnome.rs" 13 0 13 36] (s : Seq.seq t) =
    [#"../02_gnome.rs" 14 4 14 31] SortedRange0.sorted_range s 0 (Seq.length s)
  val sorted [#"../02_gnome.rs" 13 0 13 36] (s : Seq.seq t) : bool
    ensures { result = sorted s }
    
end
