
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module CreusotContracts_Logic_Seq_Impl0_Len_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function len (self : Seq.seq t) : int
end
module CreusotContracts_Logic_Seq_Impl0_Len
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function len (self : Seq.seq t) : int =
    Seq.length self
  val len (self : Seq.seq t) : int
    ensures { result = len self }
    
end
module CreusotContracts_Logic_Seq_Impl1_Index_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t
end
module CreusotContracts_Logic_Seq_Impl1_Index
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t =
    Seq.get self _2'
  val index (self : Seq.seq t) (_2' : int) : t
    ensures { result = index self _2' }
    
end
module CreusotContracts_Logic_Int_Impl17_ShallowModel_Stub
  use mach.int.Int
  use prelude.UIntSize
  function shallow_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl17_ShallowModel
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function shallow_model (self : usize) : int =
    UInt64.to_int self
  val shallow_model (self : usize) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  use prelude.Bool
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy1.shallowModelTy) (fin : ShallowModelTy1.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  use prelude.Bool
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy1.shallowModelTy) (fin : ShallowModelTy1.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy1.shallowModelTy) (fin : ShallowModelTy1.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Bool
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Bool
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : int . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  type t_unique 't =
    | C_Unique (CNonNull0.t_nonnull 't) (CPhantomData0.t_phantomdata 't)
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  type t_rawvec 't 'a =
    | C_RawVec (CUnique0.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  type t_vec 't 'a =
    | C_Vec (CRawVec0.t_rawvec 't 'a) usize
    
end
module Core_Num_Impl12_Max_Stub
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use prelude.UIntSize
  use prelude.Bool
  use seq.Seq
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.Int
  use mach.int.UInt64
  clone Core_Num_Impl12_Max_Stub as MAx0
  function shallow_model (self : CVec0.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use prelude.UIntSize
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.Int
  use mach.int.UInt64
  clone Core_Num_Impl12_Max_Stub as MAx0
  function shallow_model (self : CVec0.t_vec t a) : Seq.seq t
  val shallow_model (self : CVec0.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : CVec0.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int MAx0.mAX'
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  use prelude.Bool
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy1.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  use prelude.Bool
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy1.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy1.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use seq.Seq
  use prelude.Bool
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use prelude.Bool
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy1.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel1 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy1.shallowModelTy =
    ShallowModel1.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy1.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  use prelude.Bool
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy1.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  use prelude.Bool
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy1.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy1.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Bool
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Bool
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module Alloc_Vec_Impl17_IndexMut_Stub
  type t
  type i
  type a
  use seq.Seq
  use prelude.Bool
  use prelude.Slice
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec1
  use mach.int.UInt64
  clone Core_Slice_Index_SliceIndex_Output_Type as Output1 with
    type self = i,
    type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere1 with
    type self = i,
    type t = seq t,
    type ShallowModelTy1.shallowModelTy = Seq.seq t
  clone Core_Num_Impl12_Max_Stub as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue1 with
    type self = i,
    type t = seq t,
    type ShallowModelTy1.shallowModelTy = Seq.seq t,
    type Output0.output = Output1.output
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel6 with
    type t = CVec1.t_vec t a,
    type ShallowModelTy1.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds1 with
    type self = i,
    type t = seq t,
    type ShallowModelTy1.shallowModelTy = Seq.seq t
  val index_mut [@cfg:stackify] (self : borrowed (CVec1.t_vec t a)) (index : i) : borrowed Output1.output
    requires {InBounds1.in_bounds index (ShallowModel6.shallow_model self)}
    ensures { HasValue1.has_value index (ShallowModel6.shallow_model self) ( * result) }
    ensures { HasValue1.has_value index (ShallowModel3.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere1.resolve_elswhere index (ShallowModel6.shallow_model self) (ShallowModel3.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel3.shallow_model ( ^ self)) = Seq.length (ShallowModel6.shallow_model self) }
    
end
module CreusotContracts_Logic_Seq_Impl0_Singleton_Stub
  type t
  use seq.Seq
  function singleton (_1' : t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Singleton
  type t
  use seq.Seq
  use seq.Seq
  function singleton (_1' : t) : Seq.seq t =
    Seq.singleton _1'
  val singleton (_1' : t) : Seq.seq t
    ensures { result = singleton _1' }
    
end
module CreusotContracts_Logic_Seq_Impl0_Concat_Stub
  type t
  use seq.Seq
  function concat (self : Seq.seq t) (_2' : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Concat
  type t
  use seq.Seq
  use seq.Seq
  function concat (self : Seq.seq t) (_2' : Seq.seq t) : Seq.seq t =
    Seq.(++) self _2'
  val concat (self : Seq.seq t) (_2' : Seq.seq t) : Seq.seq t
    ensures { result = concat self _2' }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Core_Option_Option_Some_0_Stub
  type t
  use Core_Option_Option_Type as TOption0
  val function field_0 (self : TOption0.t_option t) : t
end
module Core_Option_Option_Some_0
  type t
  use Core_Option_Option_Type as TOption0
  let function field_0 (self : TOption0.t_option t) : t = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01.rs" 1 0 1 0] match (self) with
      | TOption0.C_None -> any t
      | TOption0.C_Some a -> a
      end
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
end
module Core_Ops_Range_Range_Start_Stub
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  val function field_start (self : CRange0.t_range idx) : idx
end
module Core_Ops_Range_Range_Start
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  let function field_start (self : CRange0.t_range idx) : idx = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01.rs" 1 0 1 0] match (self) with
      | CRange0.C_Range a _ -> a
      end
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Int_Impl18_DeepModel_Stub
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function deep_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_DeepModel
  use prelude.Opaque
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function deep_model (self : usize) : int =
    UInt64.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module Core_Ops_Range_Range_End_Stub
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  val function field_end (self : CRange0.t_range idx) : idx
end
module Core_Ops_Range_Range_End
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  let function field_end (self : CRange0.t_range idx) : idx = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01.rs" 1 0 1 0] match (self) with
      | CRange0.C_Range _ a -> a
      end
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use prelude.Bool
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use mach.int.Int
  use seq.Seq
  use Core_Ops_Range_Range_Type as CRange0
  use prelude.Bool
  predicate produces (self : CRange0.t_range idx) (visited : Seq.seq idx) (o : CRange0.t_range idx)
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use Core_Ops_Range_Range_Type as CRange0
  use prelude.Bool
  clone Core_Ops_Range_Range_Start_Stub as FieldStart0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone Core_Ops_Range_Range_End_Stub as FieldEnd0 with
    type idx = idx
  predicate produces (self : CRange0.t_range idx) (visited : Seq.seq idx) (o : CRange0.t_range idx) =
    FieldEnd0.field_end self = FieldEnd0.field_end o /\ DeepModel1.deep_model (FieldStart0.field_start self) <= DeepModel1.deep_model (FieldStart0.field_start o) /\ (Seq.length visited > 0 -> DeepModel1.deep_model (FieldStart0.field_start o) <= DeepModel1.deep_model (FieldEnd0.field_end o)) /\ Seq.length visited = DeepModel1.deep_model (FieldStart0.field_start o) - DeepModel1.deep_model (FieldStart0.field_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel1.deep_model (Seq.get visited i) = DeepModel1.deep_model (FieldStart0.field_start self) + i)
  val produces (self : CRange0.t_range idx) (visited : Seq.seq idx) (o : CRange0.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Bool
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Bool
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate completed (self : borrowed (CRange0.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use Core_Ops_Range_Range_Type as CRange0
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Range_Range_End_Stub as FieldEnd0 with
    type idx = idx
  clone Core_Ops_Range_Range_Start_Stub as FieldStart0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve1 with
    type t = CRange0.t_range idx
  predicate completed (self : borrowed (CRange0.t_range idx)) =
    Resolve1.resolve self /\ DeepModel1.deep_model (FieldStart0.field_start ( * self)) >= DeepModel1.deep_model (FieldEnd0.field_end ( * self))
  val completed (self : borrowed (CRange0.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  use prelude.Bool
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  use prelude.Bool
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Stub
  type idx
  use prelude.Bool
  use Core_Ops_Range_Range_Type as CRange0
  predicate invariant' (self : CRange0.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant
  type idx
  use prelude.Bool
  use Core_Ops_Range_Range_Type as CRange0
  predicate invariant' (self : CRange0.t_range idx) =
    true
  val invariant' (self : CRange0.t_range idx) : bool
    ensures { result = invariant' self }
    
end
module Core_Iter_Range_Impl3_Next_Stub
  type a
  use seq.Seq
  use prelude.Bool
  use Core_Option_Option_Type as TOption1
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as CRange1
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces1 with
    type self = CRange1.t_range a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed1 with
    type self = CRange1.t_range a
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant1 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (CRange1.t_range a)) : TOption1.t_option a
    requires {Invariant1.invariant' ( * self)}
    ensures { Invariant1.invariant' ( ^ self) }
    ensures { match (result) with
      | TOption1.C_None -> Completed1.completed self
      | TOption1.C_Some v -> Produces1.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Ghost_Impl0_Deref_Stub
  type t
  use prelude.Ghost
  function deref (self : Ghost.ghost_ty t) : t
end
module CreusotContracts_Ghost_Impl0_Deref
  type t
  use prelude.Ghost
  use prelude.Ghost
  function deref (self : Ghost.ghost_ty t) : t =
    Ghost.inner self
  val deref (self : Ghost.ghost_ty t) : t
    ensures { result = deref self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy1.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel1 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy1.shallowModelTy =
    ShallowModel1.shallow_model self
  val shallow_model (self : t) : ShallowModelTy1.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy1.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel1 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel4 with
    type t = t,
    type ShallowModelTy1.shallowModelTy = ShallowModelTy1.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy1.shallowModelTy =
    ShallowModel4.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy1.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl2_Inner_Stub
  type t
  use prelude.Ghost
  function inner (self : Ghost.ghost_ty t) : t
end
module CreusotContracts_Ghost_Impl2_Inner
  type t
  use prelude.Ghost
  use prelude.Ghost
  function inner (self : Ghost.ghost_ty t) : t =
    Ghost.inner self
  val inner (self : Ghost.ghost_ty t) : t
    ensures { result = inner self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Empty_Stub
  type t
  use seq.Seq
  val constant eMPTY'  : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Empty
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  let constant eMPTY'  : Seq.seq t = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module CreusotContracts_Ghost_Impl2_New_Stub
  type t
  use prelude.Ghost
  function new (_1' : t) : Ghost.ghost_ty t
end
module CreusotContracts_Ghost_Impl2_New
  type t
  use prelude.Ghost
  use prelude.Ghost
  function new (_1' : t) : Ghost.ghost_ty t =
    Ghost.new _1'
  val new (_1' : t) : Ghost.ghost_ty t
    ensures { result = new _1' }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  use prelude.Bool
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  use prelude.Bool
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  use mach.int.Int
  use prelude.Bool
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  predicate into_iter_post (self : i) (res : i) =
    self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  use prelude.Bool
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  use prelude.Bool
  predicate into_iter_pre (self : self) =
    true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  use prelude.Bool
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant1 with
    type self = i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  use prelude.Bool
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant1 with
    type self = i
  predicate into_iter_pre (self : i) =
    Invariant1.invariant' self
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Stub
  type i
  use prelude.Bool
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant1 with
    type self = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost1 with
    type self = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre1 with
    type self = i
  val into_iter [@cfg:stackify] (self : i) : i
    requires {IntoIterPre1.into_iter_pre self}
    ensures { IntoIterPost1.into_iter_post self result }
    ensures { Invariant1.invariant' result }
    
end
module Alloc_Vec_Impl1_Len_Stub
  type t
  type a
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.Int
  use mach.int.UInt64
  clone Core_Num_Impl12_Max_Stub as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = t,
    type a = a
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel5 with
    type t = CVec0.t_vec t a,
    type ShallowModelTy1.shallowModelTy = Seq.seq t
  val len [@cfg:stackify] (self : CVec0.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel5.shallow_model self) }
    
end
module C01_AllZero_Stub
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.UInt32
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as CGlobal0
  use Alloc_Vec_Vec_Type as CVec1
  use Core_Option_Option_Type as TOption1
  use Core_Ops_Range_Range_Type as CRange1
  use prelude.Ghost
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub as ResolveElswhere1 with
    type t = uint32
  clone Core_Num_Impl12_Max_Stub as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with
    type t = uint32,
    type a = CGlobal0.t_global
  clone CreusotContracts_Std1_Slice_Impl5_HasValue_Stub as HasValue1 with
    type t = uint32
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel6 with
    type t = CVec1.t_vec uint32 (CGlobal0.t_global),
    type ShallowModelTy1.shallowModelTy = Seq.seq uint32
  clone CreusotContracts_Std1_Slice_Impl5_InBounds_Stub as InBounds1 with
    type t = uint32
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces2 with
    type idx = usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub as Completed1 with
    type idx = usize
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant2 with
    type idx = usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub as IntoIterPost1 with
    type i = CRange1.t_range usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub as IntoIterPre1 with
    type i = CRange1.t_range usize
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel15 with
    type t = CVec1.t_vec uint32 (CGlobal0.t_global),
    type ShallowModelTy1.shallowModelTy = Seq.seq uint32
  val all_zero [@cfg:stackify] [#"../01.rs" 7 0 7 33] (v : borrowed (CVec1.t_vec uint32 (CGlobal0.t_global))) : ()
    ensures { [#"../01.rs" 5 0 5 74] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel3.shallow_model ( ^ v)) -> Seq.get (ShallowModel3.shallow_model ( ^ v)) i = (0 : uint32) }
    ensures { [#"../01.rs" 6 10 6 35] Seq.length (ShallowModel6.shallow_model v) = Seq.length (ShallowModel3.shallow_model ( ^ v)) }
    
end
module C01_AllZero
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.UInt32
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_Alloc_Global_Type as CGlobal0
  use Alloc_RawVec_RawVec_Type as CRawVec1
  use Alloc_Vec_Vec_Type as CVec1
  use Core_Marker_PhantomData_Type as CPhantomData2
  use Core_Option_Option_Type as TOption1
  use Core_Ops_Range_Range_Type as CRange1
  use Core_Marker_PhantomData_Type as CPhantomData6
  use prelude.Ghost
  use Core_Marker_PhantomData_Type as CPhantomData7
  use Core_Marker_PhantomData_Type as CPhantomData8
  use prelude.IntSize
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere1 with
    type t = uint32
  clone Core_Num_Impl12_Max as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = uint32,
    type a = CGlobal0.t_global,
    val MAx0.mAX' = MAx0.mAX'
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = uint32
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel6 with
    type t = CVec1.t_vec uint32 (CGlobal0.t_global),
    type ShallowModelTy1.shallowModelTy = Seq.seq uint32,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = uint32
  clone Alloc_Vec_Impl17_IndexMut_Stub as IndexMut1 with
    type t = uint32,
    type i = usize,
    type a = CGlobal0.t_global,
    predicate InBounds1.in_bounds = InBounds1.in_bounds,
    function ShallowModel6.shallow_model = ShallowModel6.shallow_model,
    predicate HasValue1.has_value = HasValue1.has_value,
    function ShallowModel3.shallow_model = ShallowModel3.shallow_model,
    predicate ResolveElswhere1.resolve_elswhere = ResolveElswhere1.resolve_elswhere
  clone Core_Option_Option_Some_0 as Field01 with
    type t = usize
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = CVec1.t_vec uint32 (CGlobal0.t_global)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = CRange1.t_range usize
  clone Core_Ops_Range_Range_Start as FieldStart1 with
    type idx = usize
  clone CreusotContracts_Logic_Int_Impl18_DeepModel as DeepModel1
  clone Core_Ops_Range_Range_End as FieldEnd1 with
    type idx = usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces2 with
    type idx = usize,
    val FieldEnd0.field_end = FieldEnd1.field_end,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    val FieldStart0.field_start = FieldStart1.field_start
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed1 with
    type idx = usize,
    predicate Resolve1.resolve = Resolve3.resolve,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    val FieldStart0.field_start = FieldStart1.field_start,
    val FieldEnd0.field_end = FieldEnd1.field_end
  clone CreusotContracts_Std1_Ops_Impl3_Invariant as Invariant2 with
    type idx = usize
  clone Core_Iter_Range_Impl3_Next_Stub as Next1 with
    type a = usize,
    predicate Invariant1.invariant' = Invariant2.invariant',
    predicate Completed1.completed = Completed1.completed,
    predicate Produces1.produces = Produces2.produces
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel10 with
    type t = borrowed (CVec1.t_vec uint32 (CGlobal0.t_global)),
    type ShallowModelTy1.shallowModelTy = Seq.seq uint32,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel14 with
    type t = borrowed (CVec1.t_vec uint32 (CGlobal0.t_global)),
    type ShallowModelTy1.shallowModelTy = Seq.seq uint32,
    function ShallowModel4.shallow_model = ShallowModel10.shallow_model
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost1 with
    type i = CRange1.t_range usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre1 with
    type i = CRange1.t_range usize,
    predicate Invariant1.invariant' = Invariant2.invariant'
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Stub as IntoIter1 with
    type i = CRange1.t_range usize,
    predicate IntoIterPre1.into_iter_pre = IntoIterPre1.into_iter_pre,
    predicate IntoIterPost1.into_iter_post = IntoIterPost1.into_iter_post,
    predicate Invariant1.invariant' = Invariant2.invariant'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel15 with
    type t = CVec1.t_vec uint32 (CGlobal0.t_global),
    type ShallowModelTy1.shallowModelTy = Seq.seq uint32,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone Alloc_Vec_Impl1_Len_Stub as Len5 with
    type t = uint32,
    type a = CGlobal0.t_global,
    function ShallowModel5.shallow_model = ShallowModel15.shallow_model
  let rec cfg all_zero [@cfg:stackify] [#"../01.rs" 7 0 7 33] (v : borrowed (CVec1.t_vec uint32 (CGlobal0.t_global))) : ()
    ensures { [#"../01.rs" 5 0 5 74] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel3.shallow_model ( ^ v)) -> Seq.get (ShallowModel3.shallow_model ( ^ v)) i = (0 : uint32) }
    ensures { [#"../01.rs" 6 10 6 35] Seq.length (ShallowModel6.shallow_model v) = Seq.length (ShallowModel3.shallow_model ( ^ v)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (CVec1.t_vec uint32 (CGlobal0.t_global));
  var old_v_4 : Ghost.ghost_ty (borrowed (CVec1.t_vec uint32 (CGlobal0.t_global)));
  var _6 : ();
  var iter_7 : CRange1.t_range usize;
  var _8 : CRange1.t_range usize;
  var _9 : usize;
  var _10 : CVec1.t_vec uint32 (CGlobal0.t_global);
  var iter_old_11 : Ghost.ghost_ty (CRange1.t_range usize);
  var _13 : ();
  var produced_14 : Ghost.ghost_ty (Seq.seq usize);
  var _17 : ();
  var _23 : ();
  var _24 : TOption1.t_option usize;
  var _25 : borrowed (CRange1.t_range usize);
  var _26 : borrowed (CRange1.t_range usize);
  var _27 : isize;
  var i_28 : usize;
  var _29 : Ghost.ghost_ty (Seq.seq usize);
  var _31 : ();
  var i_32 : usize;
  var _33 : borrowed uint32;
  var _34 : borrowed (CVec1.t_vec uint32 (CGlobal0.t_global));
  var _35 : usize;
  var _36 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _6 <- ();
    old_v_4 <- ([#"../01.rs" 8 16 8 28] Ghost.new v_1);
    goto BB1
  }
  BB1 {
    _10 <-  * v_1;
    _9 <- ([#"../01.rs" 14 16 14 23] Len5.len _10);
    goto BB2
  }
  BB2 {
    _8 <- CRange1.C_Range ([#"../01.rs" 14 13 14 14] (0 : usize)) _9;
    iter_7 <- ([#"../01.rs" 11 4 11 51] IntoIter1.into_iter _8);
    goto BB3
  }
  BB3 {
    _13 <- ();
    iter_old_11 <- ([#"../01.rs" 11 4 11 51] Ghost.new iter_7);
    goto BB4
  }
  BB4 {
    _17 <- ();
    produced_14 <- ([#"../01.rs" 11 4 11 51] Ghost.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant type_invariant { [#"../01.rs" 11 4 11 51] Invariant2.invariant' iter_7 };
    invariant structural { [#"../01.rs" 11 4 11 51] Produces2.produces (Ghost.inner iter_old_11) (Ghost.inner produced_14) iter_7 };
    invariant proph_const { [#"../01.rs" 11 29 11 49]  ^ v_1 =  ^ Ghost.inner old_v_4 };
    invariant in_bounds { [#"../01.rs" 12 27 12 55] Seq.length (ShallowModel6.shallow_model v_1) = Seq.length (ShallowModel14.shallow_model old_v_4) };
    invariant all_zero { [#"../01.rs" 11 4 11 51] forall j : int . 0 <= j /\ j < Seq.length (Ghost.inner produced_14) -> Seq.get (ShallowModel6.shallow_model v_1) j = (0 : uint32) };
    _26 <- borrow_mut iter_7;
    iter_7 <-  ^ _26;
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _24 <- ([#"../01.rs" 11 4 11 51] Next1.next _25);
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _26 };
    switch (_24)
      | TOption1.C_None -> goto BB8
      | TOption1.C_Some _ -> goto BB10
      end
  }
  BB8 {
    assume { Resolve2.resolve v_1 };
    _0 <- ();
    return _0
  }
  BB9 {
    assume { Resolve2.resolve v_1 };
    absurd
  }
  BB10 {
    i_28 <- Field01.field_0 _24;
    _31 <- ();
    _29 <- ([#"../01.rs" 11 4 11 51] Ghost.new (Seq.(++) (Ghost.inner produced_14) (Seq.singleton i_28)));
    goto BB11
  }
  BB11 {
    produced_14 <- _29;
    _29 <- any Ghost.ghost_ty (Seq.seq usize);
    i_32 <- i_28;
    _34 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _34) };
    _35 <- i_32;
    _33 <- ([#"../01.rs" 15 8 15 12] IndexMut1.index_mut _34 _35);
    goto BB12
  }
  BB12 {
    _33 <- { _33 with current = ([#"../01.rs" 15 15 15 16] (0 : uint32)) };
    assume { Resolve1.resolve _33 };
    _23 <- ();
    goto BB6
  }
  
end
