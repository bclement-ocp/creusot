---- DefId(20:679 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::cmp_log) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
--------
---- DefId(20:680 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::le_log) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
--------
---- DefId(0:9 ~ 02_gnome[1736]::sorted_range) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone Index0.index with type t = t
clone CmpLog0.cmp_log with type self = t
clone LeLog0.le_log with type self = t, val INVALID.prior = CmpLog0.cmp_log
clone LtLog0.lt_log
clone LeLog0.le_log
--------
---- DefId(0:13 ~ 02_gnome[1736]::sorted) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone Len0.len with type t = t
clone From0.from
clone Index0.index with type t = t
clone CmpLog0.cmp_log with type self = t
clone LeLog0.le_log with type self = t, val INVALID.prior = CmpLog0.cmp_log
clone LtLog0.lt_log
clone LeLog0.le_log
clone SortedRange0.sorted_range with type t = t, val INVALID.prior = LeLog0.le_log, val INVALID.prior = LtLog0.lt_log,
  val LeLog0.le_log = LeLog0.le_log, val INVALID.prior = Index0.index
--------
---- DefId(20:2240 ~ creusot_contracts[be3c]::std#1::vec::{impl#0}::model) ----
use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
--------
---- DefId(20:852 ~ creusot_contracts[be3c]::logic::seq::{impl#2}::permutation_of) ----
--------
---- DefId(20:2140 ~ creusot_contracts[be3c]::std#1::slice::SliceIndexSpec::in_bounds) ----
clone ModelTy0.modelTy with type self = t
--------
---- DefId(20:2141 ~ creusot_contracts[be3c]::std#1::slice::SliceIndexSpec::has_value) ----
clone Output0.output with type self = self, type t = t
clone ModelTy0.modelTy with type self = t
--------
---- DefId(20:2130 ~ creusot_contracts[be3c]::std#1::slice::{impl#0}::model) ----
--------
---- DefId(20:671 ~ creusot_contracts[be3c]::logic::model::Model::model) ----
clone ModelTy0.modelTy with type self = self
--------
---- DefId(20:673 ~ creusot_contracts[be3c]::logic::model::{impl#1}::model) ----
clone ModelTy0.modelTy with type self = t
clone Model0.model with type self = t, val INVALID.prior = ModelTy0.modelTy
--------
---- DefId(20:826 ~ creusot_contracts[be3c]::logic::resolve::Resolve::resolve) ----
--------
---- DefId(20:582 ~ creusot_contracts[be3c]::logic::ghost::{impl#1}::inner) ----
use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
--------
---- DefId(20:833 ~ creusot_contracts[be3c]::logic::resolve::{impl#1}::resolve) ----
--------
---- DefId(20:2143 ~ creusot_contracts[be3c]::std#1::slice::{impl#3}::in_bounds) ----
--------
---- DefId(20:2144 ~ creusot_contracts[be3c]::std#1::slice::{impl#3}::has_value) ----
--------
---- DefId(20:682 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::cmp_le_log) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
clone LeLog0.le_log with type self = self, val CmpLog0.cmp_log = CmpLog0.cmp_log
--------
---- DefId(20:683 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::lt_log) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
--------
---- DefId(20:685 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::cmp_lt_log) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
clone LtLog0.lt_log with type self = self, val CmpLog0.cmp_log = CmpLog0.cmp_log
--------
---- DefId(20:686 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::ge_log) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
--------
---- DefId(20:688 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::cmp_ge_log) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
clone GeLog0.ge_log with type self = self, val CmpLog0.cmp_log = CmpLog0.cmp_log
--------
---- DefId(20:689 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::gt_log) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
--------
---- DefId(20:691 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::cmp_gt_log) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
clone GtLog0.gt_log with type self = self, val CmpLog0.cmp_log = CmpLog0.cmp_log
--------
---- DefId(20:693 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::refl) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
--------
---- DefId(20:697 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::trans) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
--------
---- DefId(20:700 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::antisym1) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
--------
---- DefId(20:703 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::antisym2) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
--------
---- DefId(20:705 ~ creusot_contracts[be3c]::logic::ord::OrdLogic::eq_cmp) ----
use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
clone CmpLog0.cmp_log with type self = self
--------
