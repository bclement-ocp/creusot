
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_Impls_Impl9_Eq_Stub
  type a
  type b
  use prelude.Bool
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel3 with
    type t = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq [@cfg:stackify] (self : a) (other : b) : bool
    ensures { result = (DeepModel3.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  use prelude.Bool
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  use prelude.Bool
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module EqPanic_Omg_Stub
  type t
  use prelude.Bool
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel2 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val omg [@cfg:stackify] [#"../eq_panic.rs" 6 0 6 51] (x : t) (y : t) : bool
end
module EqPanic_Omg
  type t
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel1 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel2 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Core_Cmp_Impls_Impl9_Eq_Stub as Eq0 with
    type a = t,
    type b = t,
    function DeepModel3.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = t
  let rec cfg omg [@cfg:stackify] [#"../eq_panic.rs" 6 0 6 51] (x : t) (y : t) : bool = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x_1 : t;
  var y_2 : t;
  var _3 : t;
  var _4 : t;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    assume { Resolve0.resolve x_1 };
    _4 <- y_2;
    assume { Resolve0.resolve y_2 };
    _0 <- ([#"../eq_panic.rs" 7 4 7 10] Eq0.eq _3 _4);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
