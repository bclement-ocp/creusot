
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  type t_unique 't =
    | C_Unique (CNonNull0.t_nonnull 't) (CPhantomData0.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  type t_rawvec 't 'a =
    | C_RawVec (CUnique0.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  type t_vec 't 'a =
    | C_Vec (CRawVec0.t_rawvec 't 'a) usize
    
end
module Core_Num_Impl12_Max_Stub
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Logic_Int_Impl17_ShallowModel_Stub
  use mach.int.Int
  use prelude.UIntSize
  function shallow_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl17_ShallowModel
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function shallow_model (self : usize) : int =
    UInt64.to_int self
  val shallow_model (self : usize) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Len_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function len (self : Seq.seq t) : int
end
module CreusotContracts_Logic_Seq_Impl0_Len
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function len (self : Seq.seq t) : int =
    Seq.length self
  val len (self : Seq.seq t) : int
    ensures { result = len self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use prelude.UIntSize
  use prelude.Bool
  use seq.Seq
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as MAx0
  function shallow_model (self : CVec0.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use prelude.UIntSize
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use prelude.Opaque
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as MAx0
  function shallow_model (self : CVec0.t_vec t a) : Seq.seq t
  val shallow_model (self : CVec0.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : CVec0.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int MAx0.mAX'
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy1.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel1 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy1.shallowModelTy =
    ShallowModel1.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy1.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Push_Stub
  type t
  use seq.Seq
  function push (self : Seq.seq t) (_2' : t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Push
  type t
  use seq.Seq
  use seq.Seq
  function push (self : Seq.seq t) (_2' : t) : Seq.seq t =
    Seq.snoc self _2'
  val push (self : Seq.seq t) (_2' : t) : Seq.seq t
    ensures { result = push self _2' }
    
end
module Alloc_Vec_Impl1_Push_Stub
  type t
  type a
  use seq.Seq
  use prelude.Bool
  use prelude.Borrow
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = t,
    type a = a
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel5 with
    type t = CVec0.t_vec t a,
    type ShallowModelTy1.shallowModelTy = Seq.seq t
  val push [@cfg:stackify] (self : borrowed (CVec0.t_vec t a)) (value : t) : ()
    ensures { ShallowModel2.shallow_model ( ^ self) = Seq.snoc (ShallowModel5.shallow_model self) value }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy1.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy1 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel1 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy1.shallowModelTy =
    ShallowModel1.shallow_model self
  val shallow_model (self : t) : ShallowModelTy1.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Len_Stub
  type t
  type a
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = t,
    type a = a
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel5 with
    type t = CVec0.t_vec t a,
    type ShallowModelTy1.shallowModelTy = Seq.seq t
  val len [@cfg:stackify] (self : CVec0.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel5.shallow_model self) }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Logic_Seq_Impl1_Index_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t
end
module CreusotContracts_Logic_Seq_Impl1_Index
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t =
    Seq.get self _2'
  val index (self : Seq.seq t) (_2' : int) : t
    ensures { result = index self _2' }
    
end
module TwoPhase_Test_Stub
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec1
  use mach.int.UInt64
  use seq.Seq
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with
    type t = usize,
    type a = CGlobal0.t_global
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel6 with
    type t = CVec1.t_vec usize (CGlobal0.t_global),
    type ShallowModelTy1.shallowModelTy = Seq.seq usize
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel9 with
    type t = CVec1.t_vec usize (CGlobal0.t_global),
    type ShallowModelTy1.shallowModelTy = Seq.seq usize
  val test [@cfg:stackify] [#"../two_phase.rs" 6 0 6 31] (v : borrowed (CVec1.t_vec usize (CGlobal0.t_global))) : ()
    ensures { [#"../two_phase.rs" 5 10 5 42] UInt64.to_int (Seq.get (ShallowModel3.shallow_model ( ^ v)) (Seq.length (ShallowModel6.shallow_model v))) = Seq.length (ShallowModel6.shallow_model v) }
    
end
module TwoPhase_Test
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as CPhantomData1
  use seq.Seq
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_RawVec_RawVec_Type as CRawVec1
  use Alloc_Vec_Vec_Type as CVec1
  use mach.int.UInt64
  use seq.Seq
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  use seq.Seq
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = CVec1.t_vec usize (CGlobal0.t_global)
  clone Core_Num_Impl12_Max as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = usize,
    type a = CGlobal0.t_global,
    val MAx0.mAX' = MAx0.mAX'
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel6 with
    type t = CVec1.t_vec usize (CGlobal0.t_global),
    type ShallowModelTy1.shallowModelTy = Seq.seq usize,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone Alloc_Vec_Impl1_Push_Stub as Push3 with
    type t = usize,
    type a = CGlobal0.t_global,
    function ShallowModel2.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel5.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel9 with
    type t = CVec1.t_vec usize (CGlobal0.t_global),
    type ShallowModelTy1.shallowModelTy = Seq.seq usize,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone Alloc_Vec_Impl1_Len_Stub as Len3 with
    type t = usize,
    type a = CGlobal0.t_global,
    function ShallowModel5.shallow_model = ShallowModel9.shallow_model
  let rec cfg test [@cfg:stackify] [#"../two_phase.rs" 6 0 6 31] (v : borrowed (CVec1.t_vec usize (CGlobal0.t_global))) : ()
    ensures { [#"../two_phase.rs" 5 10 5 42] UInt64.to_int (Seq.get (ShallowModel3.shallow_model ( ^ v)) (Seq.length (ShallowModel6.shallow_model v))) = Seq.length (ShallowModel6.shallow_model v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (CVec1.t_vec usize (CGlobal0.t_global));
  var _3 : ();
  var _4 : borrowed (CVec1.t_vec usize (CGlobal0.t_global));
  var _5 : usize;
  var _6 : CVec1.t_vec usize (CGlobal0.t_global);
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _4) };
    _6 <-  * _4;
    _5 <- ([#"../two_phase.rs" 7 11 7 18] Len3.len _6);
    goto BB1
  }
  BB1 {
    _3 <- ([#"../two_phase.rs" 7 4 7 19] Push3.push _4 _5);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
