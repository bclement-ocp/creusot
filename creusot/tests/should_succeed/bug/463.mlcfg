
module C463_Test_Closure0_Stub
  use prelude.Borrow
  use prelude.Bool
  use prelude.UIntSize
  use prelude.Int8
  type c463_test_closure0  =
    | C463_Test_Closure0
    
  predicate precondition [@cfg:stackify] [#"../463.rs" 7 8 7 18] (self : c463_test_closure0) (args : usize) =
    [#"../463.rs" 1 0 1 0] let (x) = args in true
  predicate postcondition [@cfg:stackify] [#"../463.rs" 7 8 7 18] (self : c463_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"../463.rs" 1 0 1 0] let (x) = args in true
  predicate unnest [@cfg:stackify] [#"../463.rs" 7 8 7 18] (self : c463_test_closure0) (_2' : c463_test_closure0) =
    [#"../463.rs" 1 0 1 0] true
  predicate postcondition_mut [@cfg:stackify] [#"../463.rs" 7 8 7 18] (self : borrowed c463_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"../463.rs" 1 0 1 0] (let (x) = args in true) /\ unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../463.rs" 7 8 7 18] (self : c463_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"../463.rs" 1 0 1 0] let (x) = args in true
  predicate resolve [@cfg:stackify] [#"../463.rs" 7 8 7 18] (_1' : c463_test_closure0) =
    [#"../463.rs" 1 0 1 0] true
  val c463_Test_Closure0 [@cfg:stackify] [#"../463.rs" 7 8 7 18] (_1' : c463_test_closure0) (x : usize) : usize
end
module C463_Test_Closure0
  use prelude.Borrow
  use prelude.Bool
  use prelude.UIntSize
  use prelude.Int8
  type c463_test_closure0  =
    | C463_Test_Closure0
    
  predicate precondition [@cfg:stackify] [#"../463.rs" 7 8 7 18] (self : c463_test_closure0) (args : usize) =
    [#"../463.rs" 1 0 1 0] let (x) = args in true
  predicate postcondition [@cfg:stackify] [#"../463.rs" 7 8 7 18] (self : c463_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"../463.rs" 1 0 1 0] let (x) = args in true
  predicate unnest [@cfg:stackify] [#"../463.rs" 7 8 7 18] (self : c463_test_closure0) (_2' : c463_test_closure0) =
    [#"../463.rs" 1 0 1 0] true
  predicate postcondition_mut [@cfg:stackify] [#"../463.rs" 7 8 7 18] (self : borrowed c463_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"../463.rs" 1 0 1 0] (let (x) = args in true) /\ unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../463.rs" 7 8 7 18] (self : c463_test_closure0) (args : usize) (result' : usize)
    
   =
    [#"../463.rs" 1 0 1 0] let (x) = args in true
  predicate resolve [@cfg:stackify] [#"../463.rs" 7 8 7 18] (_1' : c463_test_closure0) =
    [#"../463.rs" 1 0 1 0] true
  let rec cfg c463_Test_Closure0 [@cfg:stackify] [#"../463.rs" 7 8 7 18] (_1' : c463_test_closure0) (x : usize) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var _1 : c463_test_closure0;
  var x_2 : usize;
  var _3 : usize;
  {
    _1 <- _1';
    x_2 <- x;
    goto BB0
  }
  BB0 {
    _3 <- x_2;
    _0 <- ([#"../463.rs" 7 19 7 24] _3 + ([#"../463.rs" 7 23 7 24] (1 : usize)));
    return _0
  }
  
end
module C463_Test_Stub
  use prelude.UIntSize
  use prelude.Int8
  use prelude.Borrow
  use prelude.Bool
  clone C463_Test_Closure0_Stub as Closure00
  val test [@cfg:stackify] [#"../463.rs" 3 0 3 13] (_1' : ()) : ()
end
module C463_Test
  use prelude.UIntSize
  use prelude.Int8
  use prelude.Borrow
  use prelude.Bool
  clone C463_Test_Closure0_Stub as Closure00
  let rec cfg test [@cfg:stackify] [#"../463.rs" 3 0 3 13] (_1' : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var c_1 : Closure00.c463_test_closure0;
  {
    goto BB0
  }
  BB0 {
    c_1 <- Closure00.C463_Test_Closure0;
    assume { Closure00.resolve c_1 };
    _0 <- ();
    return _0
  }
  
end
