
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module PureNeq_F_Stub
  use prelude.Bool
  use Core_Option_Option_Type as TOption0
  use mach.int.Int
  function f [#"../pure_neq.rs" 6 0 6 48] (x : TOption0.t_option int) (y : TOption0.t_option int) : bool
end
module PureNeq_F
  use prelude.Bool
  use Core_Option_Option_Type as TOption0
  use prelude.Opaque
  use mach.int.Int
  function f [#"../pure_neq.rs" 6 0 6 48] (x : TOption0.t_option int) (y : TOption0.t_option int) : bool =
    [#"../pure_neq.rs" 7 16 7 22] x <> y
  val f [#"../pure_neq.rs" 6 0 6 48] (x : TOption0.t_option int) (y : TOption0.t_option int) : bool
    ensures { result = f x y }
    
  axiom f_spec : forall x : TOption0.t_option int, y : TOption0.t_option int . [#"../pure_neq.rs" 5 10 5 29] f x y = (not x = y)
end
module PureNeq_F_Impl
  use prelude.Bool
  use Core_Option_Option_Type as TOption0
  use prelude.Opaque
  use mach.int.Int
  let rec ghost function f [#"../pure_neq.rs" 6 0 6 48] (x : TOption0.t_option int) (y : TOption0.t_option int) : bool
    ensures { [#"../pure_neq.rs" 5 10 5 29] result = (not x = y) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../pure_neq.rs" 7 16 7 22] pure {x <> y}
end
