
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module CreusotContracts_Logic_Seq_Impl1_Index_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t
end
module CreusotContracts_Logic_Seq_Impl1_Index
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t =
    Seq.get self _2'
  val index (self : Seq.seq t) (_2' : int) : t
    ensures { result = index self _2' }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  use prelude.Bool
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  use prelude.Bool
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  type t_unique 't =
    | C_Unique (CNonNull0.t_nonnull 't) (CPhantomData0.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  type t_rawvec 't 'a =
    | C_RawVec (CUnique0.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  type t_vec 't 'a =
    | C_Vec (CRawVec0.t_rawvec 't 'a) usize
    
end
module Core_Num_Impl12_Max_Stub
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Logic_Int_Impl17_ShallowModel_Stub
  use mach.int.Int
  use prelude.UIntSize
  function shallow_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl17_ShallowModel
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function shallow_model (self : usize) : int =
    UInt64.to_int self
  val shallow_model (self : usize) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Len_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function len (self : Seq.seq t) : int
end
module CreusotContracts_Logic_Seq_Impl0_Len
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function len (self : Seq.seq t) : int =
    Seq.length self
  val len (self : Seq.seq t) : int
    ensures { result = len self }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use prelude.UIntSize
  use prelude.Bool
  use seq.Seq
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as MAx0
  function shallow_model (self : CVec0.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use prelude.UIntSize
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use prelude.Opaque
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as MAx0
  function shallow_model (self : CVec0.t_vec t a) : Seq.seq t
  val shallow_model (self : CVec0.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : CVec0.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int MAx0.mAX'
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl9_Resolve_Stub
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  clone Core_Num_Impl12_Max_Stub as MAx0
  predicate resolve (self : CVec0.t_vec t (CGlobal0.t_global))
end
module CreusotContracts_Std1_Vec_Impl9_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone Core_Num_Impl12_Max_Stub as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = CGlobal0.t_global
  predicate resolve (self : CVec0.t_vec t (CGlobal0.t_global)) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel1.shallow_model self) i)
  val resolve (self : CVec0.t_vec t (CGlobal0.t_global)) : bool
    ensures { result = resolve self }
    
end
module Specialize_Impl0_X_Stub
  type u
  use mach.int.Int
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  clone Core_Num_Impl12_Max_Stub as MAx0
  val x [@cfg:stackify] [#"../specialize.rs" 12 4 12 22] (self : CVec0.t_vec u (CGlobal0.t_global)) : ()
    ensures { [#"../specialize.rs" 11 14 11 19] false }
    
end
module Specialize_Impl0_X
  type u
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = u
  clone Core_Num_Impl12_Max as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = u,
    type a = CGlobal0.t_global,
    val MAx0.mAX' = MAx0.mAX'
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve1 with
    type t = u,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Resolve0.resolve = Resolve0.resolve
  let rec cfg x [@cfg:stackify] [#"../specialize.rs" 12 4 12 22] (self : CVec0.t_vec u (CGlobal0.t_global)) : ()
    ensures { [#"../specialize.rs" 11 14 11 19] false }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : CVec0.t_vec u (CGlobal0.t_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  use prelude.Bool
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  use prelude.Bool
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module Specialize_Impl1_X_Stub
  use mach.int.Int
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.UInt32
  clone Core_Num_Impl12_Max_Stub as MAx0
  val x [@cfg:stackify] [#"../specialize.rs" 18 4 18 14] (self : CVec0.t_vec uint32 (CGlobal0.t_global)) : ()
    ensures { [#"../specialize.rs" 17 14 17 18] true }
    
end
module Specialize_Impl1_X
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.UInt32
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve0 with
    type t = uint32
  clone Core_Num_Impl12_Max as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = uint32,
    type a = CGlobal0.t_global,
    val MAx0.mAX' = MAx0.mAX'
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve1 with
    type t = uint32,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Resolve0.resolve = Resolve0.resolve
  let rec cfg x [@cfg:stackify] [#"../specialize.rs" 18 4 18 14] (self : CVec0.t_vec uint32 (CGlobal0.t_global)) : ()
    ensures { [#"../specialize.rs" 17 14 17 18] true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : CVec0.t_vec uint32 (CGlobal0.t_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Specialize_F_Stub
  use prelude.Bool
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.UInt32
  clone Core_Num_Impl12_Max_Stub as MAx0
  val f [@cfg:stackify] [#"../specialize.rs" 21 0 21 17] (v : CVec0.t_vec uint32 (CGlobal0.t_global)) : ()
end
module Specialize_F
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use seq.Seq
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.UInt32
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve0 with
    type t = uint32
  clone Core_Num_Impl12_Max as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = uint32,
    type a = CGlobal0.t_global,
    val MAx0.mAX' = MAx0.mAX'
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve1 with
    type t = uint32,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Resolve0.resolve = Resolve0.resolve
  clone Specialize_Impl1_X_Stub as X0
  let rec cfg f [@cfg:stackify] [#"../specialize.rs" 21 0 21 17] (v : CVec0.t_vec uint32 (CGlobal0.t_global)) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : CVec0.t_vec uint32 (CGlobal0.t_global);
  var _2 : ();
  var _3 : CVec0.t_vec uint32 (CGlobal0.t_global);
  var _4 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    assume { Resolve1.resolve _3 };
    _3 <- v_1;
    v_1 <- any CVec0.t_vec uint32 (CGlobal0.t_global);
    _2 <- ([#"../specialize.rs" 22 4 22 9] X0.x _3);
    goto BB1
  }
  BB1 {
    assert { [#"../specialize.rs" 24 20 24 25] false };
    _4 <- ();
    _0 <- ();
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Specialize_G_Stub
  type t
  use prelude.Bool
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  clone Core_Num_Impl12_Max_Stub as MAx0
  val g [@cfg:stackify] [#"../specialize.rs" 27 0 27 18] (v : CVec0.t_vec t (CGlobal0.t_global)) : ()
end
module Specialize_G
  type t
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use seq.Seq
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  clone Specialize_T_X_Stub as X0 with
    type self = CVec0.t_vec t (CGlobal0.t_global)
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = t
  clone Core_Num_Impl12_Max as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = t,
    type a = CGlobal0.t_global,
    val MAx0.mAX' = MAx0.mAX'
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve1 with
    type t = t,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Resolve0.resolve = Resolve0.resolve
  let rec cfg g [@cfg:stackify] [#"../specialize.rs" 27 0 27 18] (v : CVec0.t_vec t (CGlobal0.t_global)) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : CVec0.t_vec t (CGlobal0.t_global);
  var _2 : ();
  var _3 : CVec0.t_vec t (CGlobal0.t_global);
  var _4 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    assume { Resolve1.resolve _3 };
    _3 <- v_1;
    v_1 <- any CVec0.t_vec t (CGlobal0.t_global);
    _2 <- ([#"../specialize.rs" 28 4 28 9] X0.x _3);
    goto BB1
  }
  BB1 {
    assert { [#"../specialize.rs" 31 20 31 25] false };
    _4 <- ();
    _0 <- ();
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Specialize_H_Stub
  use prelude.Bool
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.Int32
  clone Core_Num_Impl12_Max_Stub as MAx0
  val h [@cfg:stackify] [#"../specialize.rs" 34 0 34 17] (v : CVec0.t_vec int32 (CGlobal0.t_global)) : ()
end
module Specialize_H
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use seq.Seq
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.Int32
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve0 with
    type t = int32
  clone Core_Num_Impl12_Max as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = int32,
    type a = CGlobal0.t_global,
    val MAx0.mAX' = MAx0.mAX'
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve1 with
    type t = int32,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Resolve0.resolve = Resolve0.resolve
  clone Specialize_Impl0_X_Stub as X0 with
    type u = int32
  let rec cfg h [@cfg:stackify] [#"../specialize.rs" 34 0 34 17] (v : CVec0.t_vec int32 (CGlobal0.t_global)) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : CVec0.t_vec int32 (CGlobal0.t_global);
  var _2 : ();
  var _3 : CVec0.t_vec int32 (CGlobal0.t_global);
  var _4 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    assume { Resolve1.resolve _3 };
    _3 <- v_1;
    v_1 <- any CVec0.t_vec int32 (CGlobal0.t_global);
    _2 <- ([#"../specialize.rs" 35 4 35 9] X0.x _3);
    goto BB1
  }
  BB1 {
    assert { [#"../specialize.rs" 37 20 37 25] false };
    _4 <- ();
    _0 <- ();
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Specialize_Impl0
  
end
module Specialize_Impl1
  
end
