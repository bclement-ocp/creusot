
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  type t_unique 't =
    | C_Unique (CNonNull0.t_nonnull 't) (CPhantomData0.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  type t_box 't 'a =
    | C_Box (CUnique0.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C387_Node_Type
  use mach.int.UInt32
  use Core_Option_Option_Type as TOption1
  use Core_Marker_PhantomData_Type as CPhantomData1
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_Boxed_Box_Type as CBox1
  use Alloc_Alloc_Global_Type as CGlobal0
  use C387_Node_Type as CTree0
  type t_node  =
    | C_Node (CTree0.t_tree) uint32 (CTree0.t_tree)
    with t_tree  =
    | C_Tree (TOption1.t_option (t_node))
    
end
module C387_Node_Type
  use Core_Option_Option_Type as TOption1
  use Core_Marker_PhantomData_Type as CPhantomData1
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_Boxed_Box_Type as CBox1
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.UInt32
  use C387_Node_Type as CNode0
  type t_node  =
    | C_Node (t_tree) uint32 (t_tree)
    with t_tree  =
    | C_Tree (TOption1.t_option (CNode0.t_node))
    
end
module C387_UseTree_Stub
  use Core_Option_Option_Type as TOption1
  use C387_Node_Type as CNode0
  use C387_Node_Type as CTree0
  val use_tree [@cfg:stackify] [#"../387.rs" 13 0 13 25] (_1' : CTree0.t_tree) : ()
end
module C387_UseTree
  use Core_Option_Option_Type as TOption1
  use Core_Marker_PhantomData_Type as CPhantomData1
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_Boxed_Box_Type as CBox1
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.UInt32
  use C387_Node_Type as CNode0
  use C387_Node_Type as CTree0
  let rec cfg use_tree [@cfg:stackify] [#"../387.rs" 13 0 13 25] (_1' : CTree0.t_tree) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : CTree0.t_tree;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as TOrdering0
  function cmp_log (self : self) (_2' : self) : TOrdering0.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as TOrdering0
  function cmp_log (self : self) (_2' : self) : TOrdering0.t_ordering
  val cmp_log (self : self) (_2' : self) : TOrdering0.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as TOrdering0
  use mach.int.Int
  use prelude.Bool
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as TOrdering0
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = TOrdering0.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl2_LtLog_Stub
  use prelude.Bool
  use mach.int.Int
  predicate lt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_LtLog
  use prelude.Bool
  use mach.int.Int
  use int.Int
  predicate lt_log (self : int) (_2' : int) =
    Int.(<) self _2'
  val lt_log (self : int) (_2' : int) : bool
    ensures { result = lt_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as TOrdering0
  use mach.int.Int
  use prelude.Bool
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as TOrdering0
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> TOrdering0.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl2_LeLog_Stub
  use prelude.Bool
  use mach.int.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_LeLog
  use prelude.Bool
  use mach.int.Int
  use int.Int
  predicate le_log (self : int) (_2' : int) =
    Int.(<=) self _2'
  val le_log (self : int) (_2' : int) : bool
    ensures { result = le_log self _2' }
    
end
module CreusotContracts_Logic_Int_Impl13_ShallowModel_Stub
  use mach.int.Int
  use mach.int.UInt64
  function shallow_model (self : uint64) : int
end
module CreusotContracts_Logic_Int_Impl13_ShallowModel
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.UInt64
  function shallow_model (self : uint64) : int =
    UInt64.to_int self
  val shallow_model (self : uint64) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Int_Impl14_DeepModel_Stub
  use mach.int.Int
  use mach.int.UInt64
  function deep_model (self : uint64) : int
end
module CreusotContracts_Logic_Int_Impl14_DeepModel
  use prelude.Opaque
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.UInt64
  function deep_model (self : uint64) : int =
    UInt64.to_int self
  val deep_model (self : uint64) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as TOrdering0
  use mach.int.Int
  use prelude.Bool
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as TOrdering0
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> TOrdering0.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl2_GeLog_Stub
  use prelude.Bool
  use mach.int.Int
  predicate ge_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_GeLog
  use prelude.Bool
  use mach.int.Int
  use int.Int
  predicate ge_log (self : int) (_2' : int) =
    Int.(>=) self _2'
  val ge_log (self : int) (_2' : int) : bool
    ensures { result = ge_log self _2' }
    
end
module Core_Cmp_Ord_Max_Stub
  type self
  use prelude.Bool
  use Core_Cmp_Ordering_Type as TOrdering0
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog1 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog1 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog1 with
    type self = DeepModelTy0.deepModelTy
  val max [@cfg:stackify] (self : self) (other : self) : self
    ensures { GeLog1.ge_log (DeepModel0.deep_model result) (DeepModel0.deep_model self) }
    ensures { GeLog1.ge_log (DeepModel0.deep_model result) (DeepModel0.deep_model other) }
    ensures { result = self \/ result = other }
    ensures { LeLog1.le_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) -> result = other }
    ensures { LtLog1.lt_log (DeepModel0.deep_model other) (DeepModel0.deep_model self) -> result = self }
    
end
module C387_Node_Right_Stub
  use Core_Option_Option_Type as TOption1
  use C387_Node_Type as CNode0
  use C387_Node_Type as CTree0
  val function field_right [#"../387.rs" 9 4 9 15] (self : CNode0.t_node) : CTree0.t_tree
end
module C387_Node_Right
  use Core_Option_Option_Type as TOption1
  use Core_Marker_PhantomData_Type as CPhantomData1
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_Boxed_Box_Type as CBox1
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.UInt32
  use C387_Node_Type as CNode0
  use C387_Node_Type as CTree0
  let function field_right [#"../387.rs" 9 4 9 15] (self : CNode0.t_node) : CTree0.t_tree
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../387.rs" 1 0 1 0] match (self) with
      | CNode0.C_Node _ _ a -> a
      end
end
module C387_Node_Left_Stub
  use Core_Option_Option_Type as TOption1
  use C387_Node_Type as CNode0
  use C387_Node_Type as CTree0
  val function field_left [#"../387.rs" 7 4 7 14] (self : CNode0.t_node) : CTree0.t_tree
end
module C387_Node_Left
  use Core_Option_Option_Type as TOption1
  use Core_Marker_PhantomData_Type as CPhantomData1
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_Boxed_Box_Type as CBox1
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.UInt32
  use C387_Node_Type as CNode0
  use C387_Node_Type as CTree0
  let function field_left [#"../387.rs" 7 4 7 14] (self : CNode0.t_node) : CTree0.t_tree
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../387.rs" 1 0 1 0] match (self) with
      | CNode0.C_Node a _ _ -> a
      end
end
module Core_Option_Option_Some_0_Stub
  type t
  use Core_Option_Option_Type as TOption0
  val function field_0 (self : TOption0.t_option t) : t
end
module Core_Option_Option_Some_0
  type t
  use Core_Option_Option_Type as TOption0
  let function field_0 (self : TOption0.t_option t) : t = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../387.rs" 1 0 1 0] match (self) with
      | TOption0.C_None -> any t
      | TOption0.C_Some a -> a
      end
end
module C387_Tree_0_Stub
  use Core_Option_Option_Type as TOption1
  use C387_Node_Type as CNode0
  use C387_Node_Type as CTree0
  val function field_0 [#"../387.rs" 3 16 3 33] (self : CTree0.t_tree) : TOption1.t_option (CNode0.t_node)
end
module C387_Tree_0
  use Core_Option_Option_Type as TOption1
  use Core_Marker_PhantomData_Type as CPhantomData1
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_Boxed_Box_Type as CBox1
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.UInt32
  use C387_Node_Type as CNode0
  use C387_Node_Type as CTree0
  let function field_0 [#"../387.rs" 3 16 3 33] (self : CTree0.t_tree) : TOption1.t_option (CNode0.t_node)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../387.rs" 1 0 1 0] match (self) with
      | CTree0.C_Tree a -> a
      end
end
module C387_Impl0_Height_Stub
  use prelude.Bool
  use mach.int.Int
  use int.Int
  use int.Int
  use mach.int.UInt64
  use int.Int
  use Core_Option_Option_Type as TOption1
  use C387_Node_Type as CNode0
  use C387_Node_Type as CTree0
  clone CreusotContracts_Logic_Int_Impl14_DeepModel_Stub as DeepModel1
  val height [@cfg:stackify] [#"../387.rs" 16 4 16 31] (self : CTree0.t_tree) : uint64
end
module C387_Impl0_Height
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  use int.Int
  use int.Int
  use mach.int.UInt64
  use mach.int.UInt64
  use int.Int
  use Core_Option_Option_Type as TOption1
  use Core_Marker_PhantomData_Type as CPhantomData1
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_Boxed_Box_Type as CBox1
  use Alloc_Alloc_Global_Type as CGlobal0
  use mach.int.UInt32
  use C387_Node_Type as CNode0
  use C387_Node_Type as CTree0
  use prelude.IntSize
  clone CreusotContracts_Logic_Int_Impl14_DeepModel as DeepModel1
  clone Core_Cmp_Ord_Max_Stub as Max1 with
    type self = uint64,
    type DeepModelTy0.deepModelTy = int,
    predicate GeLog1.ge_log = Int.(>=),
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LeLog1.le_log = Int.(<=),
    predicate LtLog1.lt_log = Int.(<)
  clone C387_Node_Right as FieldRight0
  clone C387_Node_Left as FieldLeft0
  clone Core_Option_Option_Some_0 as Field01 with
    type t = CNode0.t_node
  clone C387_Tree_0 as Field02
  let rec cfg height [@cfg:stackify] [#"../387.rs" 16 4 16 31] (self : CTree0.t_tree) : uint64
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self_1 : CTree0.t_tree;
  var _2 : isize;
  var n_3 : CNode0.t_node;
  var _4 : uint64;
  var _5 : uint64;
  var _6 : CTree0.t_tree;
  var _7 : uint64;
  var _8 : CTree0.t_tree;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (Field02.field_0 self_1)
      | TOption1.C_None -> goto BB3
      | TOption1.C_Some _ -> goto BB1
      end
  }
  BB1 {
    n_3 <- Field01.field_0 (Field02.field_0 self_1);
    _6 <- FieldLeft0.field_left n_3;
    _5 <- ([#"../387.rs" 19 29 19 44] height _6);
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- ([#"../387.rs" 18 26 18 27] (0 : uint64));
    goto BB7
  }
  BB4 {
    _8 <- FieldRight0.field_right n_3;
    _7 <- ([#"../387.rs" 19 49 19 65] height _8);
    goto BB5
  }
  BB5 {
    _4 <- ([#"../387.rs" 19 29 19 66] Max1.max _5 _7);
    goto BB6
  }
  BB6 {
    _0 <- ([#"../387.rs" 19 29 19 70] _4 + ([#"../387.rs" 19 69 19 70] (1 : uint64)));
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
