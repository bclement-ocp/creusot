
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C492_ReborrowTuple_Stub
  type t
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.UInt32
  val reborrow_tuple [@cfg:stackify] [#"../492.rs" 5 0 5 52] (x : borrowed t) : (borrowed t, uint32)
    ensures { [#"../492.rs" 4 10 4 27]  * (let (a, _) = result in a) =  * x }
    
end
module C492_ReborrowTuple
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = t
  let rec cfg reborrow_tuple [@cfg:stackify] [#"../492.rs" 5 0 5 52] (x : borrowed t) : (borrowed t, uint32)
    ensures { [#"../492.rs" 4 10 4 27]  * (let (a, _) = result in a) =  * x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (borrowed t, uint32);
  var x_1 : borrowed t;
  var _3 : borrowed t;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut ( * x_1);
    x_1 <- { x_1 with current = ( ^ _3) };
    assume { Resolve1.resolve x_1 };
    _0 <- (_3, [#"../492.rs" 6 8 6 10] (32 : uint32));
    return _0
  }
  
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  use prelude.Bool
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  use prelude.Bool
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  use prelude.Bool
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  use prelude.Bool
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  use prelude.Bool
  use mach.int.Int
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve2 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve2.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module C492_Test_Stub
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.UInt32
  val test [@cfg:stackify] [#"../492.rs" 10 0 10 13] (_1' : ()) : ()
    ensures { [#"../492.rs" 9 10 9 15] false }
    
end
module C492_Test
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.UInt32
  use mach.int.Int32
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = int32
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve7 with
    type t1 = borrowed int32,
    type t2 = uint32,
    predicate Resolve2.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  clone C492_ReborrowTuple_Stub as ReborrowTuple1 with
    type t = int32
  let rec cfg test [@cfg:stackify] [#"../492.rs" 10 0 10 13] (_1' : ()) : ()
    ensures { [#"../492.rs" 9 10 9 15] false }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_2 : int32;
  var res_3 : borrowed int32;
  var _4 : (borrowed int32, uint32);
  var _5 : borrowed int32;
  var _6 : borrowed int32;
  var _7 : ();
  {
    goto BB0
  }
  BB0 {
    x_2 <- ([#"../492.rs" 11 16 11 17] (5 : int32));
    _6 <- borrow_mut x_2;
    x_2 <-  ^ _6;
    _5 <- borrow_mut ( * _6);
    _6 <- { _6 with current = ( ^ _5) };
    _4 <- ([#"../492.rs" 12 19 12 41] ReborrowTuple1.reborrow_tuple _5);
    goto BB1
  }
  BB1 {
    assume { Resolve3.resolve _6 };
    assume { Resolve3.resolve res_3 };
    res_3 <- (let (a, _) = _4 in a);
    _4 <- (let (a, b) = _4 in (any borrowed int32, b));
    assume { Resolve7.resolve _4 };
    assert { [#"../492.rs" 13 18 13 30]  ^ res_3 = (5 : int32) };
    _7 <- ();
    res_3 <- { res_3 with current = ([#"../492.rs" 14 11 14 13] (10 : int32)) };
    assume { Resolve3.resolve res_3 };
    _0 <- ();
    return _0
  }
  
end
