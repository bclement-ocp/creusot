
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module CreusotContracts_Logic_Seq_Impl1_Index_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t
end
module CreusotContracts_Logic_Seq_Impl1_Index
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function index (self : Seq.seq t) (_2' : int) : t =
    Seq.get self _2'
  val index (self : Seq.seq t) (_2' : int) : t
    ensures { result = index self _2' }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  use prelude.Bool
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  use prelude.Bool
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  type t_unique 't =
    | C_Unique (CNonNull0.t_nonnull 't) (CPhantomData0.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  type t_rawvec 't 'a =
    | C_RawVec (CUnique0.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  type t_vec 't 'a =
    | C_Vec (CRawVec0.t_rawvec 't 'a) usize
    
end
module Core_Num_Impl12_Max_Stub
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Logic_Int_Impl17_ShallowModel_Stub
  use mach.int.Int
  use prelude.UIntSize
  function shallow_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl17_ShallowModel
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function shallow_model (self : usize) : int =
    UInt64.to_int self
  val shallow_model (self : usize) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Len_Stub
  type t
  use mach.int.Int
  use seq.Seq
  function len (self : Seq.seq t) : int
end
module CreusotContracts_Logic_Seq_Impl0_Len
  type t
  use mach.int.Int
  use seq.Seq
  use seq.Seq
  function len (self : Seq.seq t) : int =
    Seq.length self
  val len (self : Seq.seq t) : int
    ensures { result = len self }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use prelude.UIntSize
  use prelude.Bool
  use seq.Seq
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as MAx0
  function shallow_model (self : CVec0.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use prelude.UIntSize
  use prelude.Bool
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use prelude.Opaque
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as MAx0
  function shallow_model (self : CVec0.t_vec t a) : Seq.seq t
  val shallow_model (self : CVec0.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : CVec0.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int MAx0.mAX'
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl9_Resolve_Stub
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  clone Core_Num_Impl12_Max_Stub as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = CGlobal0.t_global
  predicate resolve (self : CVec0.t_vec t (CGlobal0.t_global))
end
module CreusotContracts_Std1_Vec_Impl9_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone Core_Num_Impl12_Max_Stub as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = CGlobal0.t_global
  predicate resolve (self : CVec0.t_vec t (CGlobal0.t_global)) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel1.shallow_model self) i)
  val resolve (self : CVec0.t_vec t (CGlobal0.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Push_Stub
  type t
  use seq.Seq
  function push (self : Seq.seq t) (_2' : t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Push
  type t
  use seq.Seq
  use seq.Seq
  function push (self : Seq.seq t) (_2' : t) : Seq.seq t =
    Seq.snoc self _2'
  val push (self : Seq.seq t) (_2' : t) : Seq.seq t
    ensures { result = push self _2' }
    
end
module C01ResolveUnsoundness_MakeVecOfSize_Stub
  use mach.int.Int
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  use prelude.Borrow
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = bool,
    type a = CGlobal0.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = bool,
    type a = CGlobal0.t_global
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel2 with
    type t = CVec0.t_vec bool (CGlobal0.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val make_vec_of_size [@cfg:stackify] [#"../01_resolve_unsoundness.rs" 9 0 9 46] (n : usize) : CVec0.t_vec bool (CGlobal0.t_global)
    ensures { [#"../01_resolve_unsoundness.rs" 8 10 8 31] Seq.length (ShallowModel1.shallow_model result) = UInt64.to_int n }
    
end
module C01ResolveUnsoundness_MakeVecOfSize
  use prelude.Opaque
  use mach.int.Int
  use Core_Marker_PhantomData_Type as CPhantomData0
  use seq.Seq
  use seq.Seq
  use prelude.Bool
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  use Alloc_Vec_Vec_Type as CVec0
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as CGlobal0
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve0 with
    type t = bool
  clone Core_Num_Impl12_Max as MAx0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = bool,
    type a = CGlobal0.t_global,
    val MAx0.mAX' = MAx0.mAX'
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve1 with
    type t = bool,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Resolve0.resolve = Resolve0.resolve
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = bool,
    type a = CGlobal0.t_global
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = CVec0.t_vec bool (CGlobal0.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Alloc_Vec_Impl1_Push_Stub as Push1 with
    type t = bool,
    type a = CGlobal0.t_global,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model
  clone Alloc_Vec_Impl0_New_Stub as New0 with
    type t = bool,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  let rec cfg make_vec_of_size [@cfg:stackify] [#"../01_resolve_unsoundness.rs" 9 0 9 46] (n : usize) : CVec0.t_vec bool (CGlobal0.t_global)
    ensures { [#"../01_resolve_unsoundness.rs" 8 10 8 31] Seq.length (ShallowModel1.shallow_model result) = UInt64.to_int n }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : CVec0.t_vec bool (CGlobal0.t_global);
  var n_1 : usize;
  var _2 : ();
  var out_4 : CVec0.t_vec bool (CGlobal0.t_global);
  var i_5 : usize;
  var _6 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : usize;
  var _12 : ();
  var _13 : borrowed (CVec0.t_vec bool (CGlobal0.t_global));
  var _14 : ();
  var _15 : ();
  var _16 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    out_4 <- ([#"../01_resolve_unsoundness.rs" 10 29 10 39] New0.new ());
    goto BB1
  }
  BB1 {
    i_5 <- ([#"../01_resolve_unsoundness.rs" 11 16 11 17] (0 : usize));
    goto BB2
  }
  BB2 {
    invariant loop_invariant { [#"../01_resolve_unsoundness.rs" 12 32 12 53] (0 : usize) <= i_5 /\ i_5 <= n_1 };
    _10 <- i_5;
    _11 <- n_1;
    _9 <- ([#"../01_resolve_unsoundness.rs" 13 10 13 16] _10 <= _11);
    switch (_9)
      | False -> goto BB5
      | True -> goto BB3
      end
  }
  BB3 {
    _13 <- borrow_mut out_4;
    out_4 <-  ^ _13;
    _12 <- ([#"../01_resolve_unsoundness.rs" 14 8 14 23] Push1.push _13 ([#"../01_resolve_unsoundness.rs" 14 17 14 22] false));
    goto BB4
  }
  BB4 {
    i_5 <- ([#"../01_resolve_unsoundness.rs" 15 8 15 14] i_5 + ([#"../01_resolve_unsoundness.rs" 15 13 15 14] (1 : usize)));
    _8 <- ();
    goto BB2
  }
  BB5 {
    _6 <- ();
    assume { Resolve1.resolve _0 };
    _0 <- out_4;
    out_4 <- any CVec0.t_vec bool (CGlobal0.t_global);
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  use prelude.Bool
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  use prelude.Bool
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
