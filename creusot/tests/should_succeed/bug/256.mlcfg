
module C256_U8Safe_Stub
  use prelude.UInt8
  val u8_safe [@cfg:stackify] [#"../256.rs" 3 0 3 21] (u : uint8) : ()
end
module C256_U8Safe
  use prelude.UInt8
  let rec cfg u8_safe [@cfg:stackify] [#"../256.rs" 3 0 3 21] (u : uint8) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var u_1 : uint8;
  var _2 : uint8;
  var _3 : uint8;
  {
    u_1 <- u;
    goto BB0
  }
  BB0 {
    _3 <- u_1;
    _2 <- ([#"../256.rs" 4 12 4 17] _3 + ([#"../256.rs" 4 16 4 17] (0 : uint8)));
    _0 <- ();
    return _0
  }
  
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  type t_unique 't =
    | C_Unique (CNonNull0.t_nonnull 't) (CPhantomData0.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  type t_rawvec 't 'a =
    | C_RawVec (CUnique0.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData0
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull0
  use Core_Ptr_Unique_Unique_Type as CUnique0
  use Alloc_RawVec_RawVec_Type as CRawVec0
  type t_vec 't 'a =
    | C_Vec (CRawVec0.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Alloc_String_String_Type
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData1
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_RawVec_RawVec_Type as CRawVec1
  use Alloc_Vec_Vec_Type as CVec1
  use Alloc_Alloc_Global_Type as CGlobal0
  use prelude.UInt8
  type t_string  =
    | C_String (CVec1.t_vec uint8 (CGlobal0.t_global))
    
end
module C256_Bug256_Stub
  use prelude.UInt8
  use Alloc_String_String_Type as CString0
  val bug_256 [@cfg:stackify] [#"../256.rs" 8 0 8 26] (_x : CString0.t_string) : ()
end
module C256_Bug256
  use prelude.UIntSize
  use Core_Marker_PhantomData_Type as CPhantomData1
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as CNonNull1
  use Core_Ptr_Unique_Unique_Type as CUnique1
  use Alloc_RawVec_RawVec_Type as CRawVec1
  use Alloc_Vec_Vec_Type as CVec1
  use Alloc_Alloc_Global_Type as CGlobal0
  use prelude.UInt8
  use Alloc_String_String_Type as CString0
  let rec cfg bug_256 [@cfg:stackify] [#"../256.rs" 8 0 8 26] (_x : CString0.t_string) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _x_1 : CString0.t_string;
  {
    _x_1 <- _x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
