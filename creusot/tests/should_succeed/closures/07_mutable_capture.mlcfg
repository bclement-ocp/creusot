
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  use prelude.Bool
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  use prelude.Bool
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  use prelude.Bool
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  use prelude.Bool
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module CreusotContracts_Logic_Int_Impl11_ShallowModel_Stub
  use mach.int.Int
  use mach.int.UInt32
  function shallow_model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl11_ShallowModel
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.UInt32
  function shallow_model (self : uint32) : int =
    UInt32.to_int self
  val shallow_model (self : uint32) : int
    ensures { result = shallow_model self }
    
end
module C07MutableCapture_TestFnmut_Closure1_Type
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use prelude.Borrow
  use mach.int.UInt32
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Int16
  type c07mutablecapture_testfnmut_closure1  =
    | C07MutableCapture_TestFnmut_Closure1 (borrowed uint32)
    
end
module C07MutableCapture_TestFnmut_Closure1_Stub
  use export C07MutableCapture_TestFnmut_Closure1_Type
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use mach.int.UInt32
  use mach.int.Int32
  use prelude.Borrow
  use mach.int.UInt32
  use prelude.Int16
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve3 with
    type t = uint32
  let function field_0 [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) : borrowed uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../07_mutable_capture.rs" 1 0 1 0] let C07MutableCapture_TestFnmut_Closure1 a = self in a
  predicate precondition [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_ : ())
    
   =
    [#"../07_mutable_capture.rs" 7 19 7 33] UInt32.to_int ( * field_0 ( * _1')) < 1000000
  predicate unnest [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_2' : c07mutablecapture_testfnmut_closure1)
    
   =
    [#"../07_mutable_capture.rs" 1 0 1 0]  ^ field_0 _2' =  ^ field_0 self /\ true
  predicate postcondition_mut [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (self : borrowed c07mutablecapture_testfnmut_closure1) (_ : ()) (result' : int32)
    
   =
    [#"../07_mutable_capture.rs" 1 0 1 0] UInt32.to_int ( * field_0 ( ^ _1')) = UInt32.to_int ( * field_0 ( * _1')) + 1 /\ unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_ : ()) (result' : int32)
    
   =
    [#"../07_mutable_capture.rs" 8 18 8 35] UInt32.to_int ( * field_0 ( ^ _1')) = UInt32.to_int ( * field_0 ( * _1')) + 1
  predicate resolve [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (_1' : c07mutablecapture_testfnmut_closure1)
   =
    [#"../07_mutable_capture.rs" 1 0 1 0] Resolve3.resolve (field_0 _1') /\ true
  val c07MutableCapture_TestFnmut_Closure1 [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (_1' : borrowed c07mutablecapture_testfnmut_closure1) : int32
    requires {[#"../07_mutable_capture.rs" 7 19 7 33] UInt32.to_int ( * field_0 ( * _1')) < 1000000}
    ensures { [#"../07_mutable_capture.rs" 8 18 8 35] UInt32.to_int ( * field_0 ( ^ _1')) = UInt32.to_int ( * field_0 ( * _1')) + 1 }
    
end
module C07MutableCapture_TestFnmut_Closure1
  use export C07MutableCapture_TestFnmut_Closure1_Type
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use prelude.Borrow
  use prelude.Borrow
  use mach.int.UInt32
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Int16
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = c07mutablecapture_testfnmut_closure1
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = uint32
  let function field_0 [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) : borrowed uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../07_mutable_capture.rs" 1 0 1 0] let C07MutableCapture_TestFnmut_Closure1 a = self in a
  predicate precondition [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_ : ())
    
   =
    [#"../07_mutable_capture.rs" 7 19 7 33] UInt32.to_int ( * field_0 ( * _1')) < 1000000
  predicate unnest [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_2' : c07mutablecapture_testfnmut_closure1)
    
   =
    [#"../07_mutable_capture.rs" 1 0 1 0]  ^ field_0 _2' =  ^ field_0 self /\ true
  predicate postcondition_mut [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (self : borrowed c07mutablecapture_testfnmut_closure1) (_ : ()) (result' : int32)
    
   =
    [#"../07_mutable_capture.rs" 1 0 1 0] UInt32.to_int ( * field_0 ( ^ _1')) = UInt32.to_int ( * field_0 ( * _1')) + 1 /\ unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_ : ()) (result' : int32)
    
   =
    [#"../07_mutable_capture.rs" 8 18 8 35] UInt32.to_int ( * field_0 ( ^ _1')) = UInt32.to_int ( * field_0 ( * _1')) + 1
  predicate resolve [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (_1' : c07mutablecapture_testfnmut_closure1)
   =
    [#"../07_mutable_capture.rs" 1 0 1 0] Resolve3.resolve (field_0 _1') /\ true
  let rec cfg c07MutableCapture_TestFnmut_Closure1 [@cfg:stackify] [#"../07_mutable_capture.rs" 8 8 8 37] (_1' : borrowed c07mutablecapture_testfnmut_closure1) : int32
    requires {[#"../07_mutable_capture.rs" 7 19 7 33] UInt32.to_int ( * field_0 ( * _1')) < 1000000}
    ensures { [#"../07_mutable_capture.rs" 8 18 8 35] UInt32.to_int ( * field_0 ( ^ _1')) = UInt32.to_int ( * field_0 ( * _1')) + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _1 : borrowed c07mutablecapture_testfnmut_closure1;
  var res_2 : int32;
  var res_3 : int32;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let C07MutableCapture_TestFnmut_Closure1 a =  * _1 in C07MutableCapture_TestFnmut_Closure1 ({ (field_0 ( * _1)) with current = ([#"../07_mutable_capture.rs" 10 12 10 18]  * field_0 ( * _1) + ([#"../07_mutable_capture.rs" 10 17 10 18] (1 : uint32))) })) };
    assume { Resolve2.resolve _1 };
    res_3 <- ([#"../07_mutable_capture.rs" 11 12 11 13] (5 : int32));
    res_2 <- res_3;
    _0 <- res_2;
    return _0
  }
  
end
module C07MutableCapture_TestFnmut_Stub
  use prelude.Bool
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.UInt32
  val test_fnmut [@cfg:stackify] [#"../07_mutable_capture.rs" 5 0 5 29] (x : uint32) : ()
    requires {[#"../07_mutable_capture.rs" 4 11 4 24] UInt32.to_int x = 100000}
    
end
module C07MutableCapture_TestFnmut
  use prelude.Borrow
  use prelude.Borrow
  use mach.int.Int32
  use prelude.Int16
  use prelude.Opaque
  use mach.int.Int
  use prelude.Bool
  use mach.int.UInt32
  use mach.int.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = uint32
  clone C07MutableCapture_TestFnmut_Closure1_Stub as Closure10 with
    predicate Resolve3.resolve = Resolve3.resolve
  let rec cfg test_fnmut [@cfg:stackify] [#"../07_mutable_capture.rs" 5 0 5 29] (x : uint32) : ()
    requires {[#"../07_mutable_capture.rs" 4 11 4 24] UInt32.to_int x = 100000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : uint32;
  var c_3 : Closure10.c07mutablecapture_testfnmut_closure1;
  var _4 : borrowed uint32;
  var _5 : int32;
  var _6 : borrowed Closure10.c07mutablecapture_testfnmut_closure1;
  var _7 : ();
  var _8 : int32;
  var _9 : borrowed Closure10.c07mutablecapture_testfnmut_closure1;
  var _10 : ();
  var _11 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut x_1;
    x_1 <-  ^ _4;
    c_3 <- Closure10.C07MutableCapture_TestFnmut_Closure1 _4;
    _6 <- borrow_mut c_3;
    c_3 <-  ^ _6;
    _7 <- ();
    _5 <- ([#"../07_mutable_capture.rs" 14 4 14 7] let () = _7 in Closure10.c07MutableCapture_TestFnmut_Closure1 _6);
    goto BB1
  }
  BB1 {
    _9 <- borrow_mut c_3;
    c_3 <-  ^ _9;
    assume { Closure10.resolve c_3 };
    _10 <- ();
    _8 <- ([#"../07_mutable_capture.rs" 15 4 15 7] let () = _10 in Closure10.c07MutableCapture_TestFnmut_Closure1 _9);
    goto BB2
  }
  BB2 {
    assert { [#"../07_mutable_capture.rs" 17 20 17 33] UInt32.to_int x_1 = 100002 };
    _11 <- ();
    _0 <- ();
    return _0
  }
  
end
