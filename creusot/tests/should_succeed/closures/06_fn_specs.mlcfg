
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
  val postcondition_once (self : self) (a : args) (res : Output0.output) : bool
    ensures { result = postcondition_once self a res }
    
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output1.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output1.output)
  val postcondition_once (self : f) (_2' : args) (_3' : Output1.output) : bool
    ensures { result = postcondition_once self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub
  type self
  type args
  use prelude.Bool
  predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Ops_FnOnceExt_Precondition
  type self
  type args
  use prelude.Bool
  predicate precondition (self : self) (a : args)
  val precondition (self : self) (a : args) : bool
    ensures { result = precondition self a }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  use prelude.Bool
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  use prelude.Bool
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module Core_Ops_Function_FnOnce_CallOnce_Stub
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition0 with
    type self = self,
    type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { PostconditionOnce0.postcondition_once self args result }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  use prelude.Bool
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  use prelude.Bool
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C06FnSpecs_Weaken3_Stub
  type a
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce3 with
    type self = f,
    type args = a,
    type Output0.output = Output1.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition3 with
    type self = f,
    type args = a
  val weaken_3 [@cfg:stackify] [#"../06_fn_specs.rs" 32 0 32 73] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 30 11 30 28] Precondition3.precondition f a}
    ensures { [#"../06_fn_specs.rs" 31 10 31 41] PostconditionOnce3.postcondition_once f a result }
    
end
module C06FnSpecs_Weaken3
  type a
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce2 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition2 with
    type args = a,
    type f = f
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce as PostconditionOnce3 with
    type self = f,
    type args = a,
    type Output0.output = Output1.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition as Precondition3 with
    type self = f,
    type args = a
  clone Core_Ops_Function_FnOnce_CallOnce_Stub as CallOnce1 with
    type self = f,
    type args = a,
    predicate Precondition0.precondition = Precondition3.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce3.postcondition_once,
    type Output0.output = Output1.output,
    predicate Precondition0.precondition = Precondition2.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce2.postcondition_once
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = f
  let rec cfg weaken_3 [@cfg:stackify] [#"../06_fn_specs.rs" 32 0 32 73] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 30 11 30 28] Precondition3.precondition f a}
    ensures { [#"../06_fn_specs.rs" 31 10 31 41] PostconditionOnce3.postcondition_once f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output1.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 33 4 33 27] CallOnce1.call_once _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub
  type self
  type args
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut
  type self
  type args
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module C06FnSpecs_Weaken2_Stub
  type a
  type f
  use prelude.Borrow
  use prelude.Bool
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve2 with
    type self = f
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut1 with
    type self = f,
    type args = a,
    type Output0.output = Output1.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition3 with
    type self = f,
    type args = a
  val weaken_2 [@cfg:stackify] [#"../06_fn_specs.rs" 20 0 20 62] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 18 11 18 28] Precondition3.precondition f a}
    ensures { [#"../06_fn_specs.rs" 19 0 19 93] exists f2 : borrowed f .  * f2 = f /\ PostconditionMut1.postcondition_mut f2 a result /\ Resolve2.resolve ( ^ f2) }
    
end
module C06FnSpecs_Weaken2
  type a
  type f
  use prelude.Bool
  use prelude.Borrow
  use prelude.Opaque
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce as PostconditionOnce3 with
    type self = f,
    type args = a,
    type Output0.output = Output1.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition as Precondition3 with
    type self = f,
    type args = a
  clone C06FnSpecs_Weaken3_Stub as Weaken30 with
    type a = a,
    type f = f,
    predicate Precondition3.precondition = Precondition3.precondition,
    predicate PostconditionOnce3.postcondition_once = PostconditionOnce3.postcondition_once,
    type Output1.output = Output1.output
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = f
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut as PostconditionMut1 with
    type self = f,
    type args = a,
    type Output0.output = Output1.output
  let rec cfg weaken_2 [@cfg:stackify] [#"../06_fn_specs.rs" 20 0 20 62] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 18 11 18 28] Precondition3.precondition f a}
    ensures { [#"../06_fn_specs.rs" 19 0 19 93] exists f2 : borrowed f .  * f2 = f /\ PostconditionMut1.postcondition_mut f2 a result /\ Resolve2.resolve ( ^ f2) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output1.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 21 4 21 18] Weaken30.weaken_3 _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
  val postcondition (self : self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition self _2' _3' }
    
end
module C06FnSpecs_Weaken_Stub
  type a
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition1 with
    type self = f,
    type args = a,
    type Output0.output = Output1.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition3 with
    type self = f,
    type args = a
  val weaken [@cfg:stackify] [#"../06_fn_specs.rs" 8 0 8 71] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 6 11 6 28] Precondition3.precondition f a}
    ensures { [#"../06_fn_specs.rs" 7 10 7 36] Postcondition1.postcondition f a result }
    
end
module C06FnSpecs_Weaken
  type a
  type f
  use prelude.Borrow
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = f
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut as PostconditionMut1 with
    type self = f,
    type args = a,
    type Output0.output = Output1.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition as Precondition3 with
    type self = f,
    type args = a
  clone C06FnSpecs_Weaken2_Stub as Weaken20 with
    type a = a,
    type f = f,
    predicate Precondition3.precondition = Precondition3.precondition,
    predicate PostconditionMut1.postcondition_mut = PostconditionMut1.postcondition_mut,
    predicate Resolve2.resolve = Resolve2.resolve,
    type Output1.output = Output1.output
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = a
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition as Postcondition1 with
    type self = f,
    type args = a,
    type Output0.output = Output1.output
  let rec cfg weaken [@cfg:stackify] [#"../06_fn_specs.rs" 8 0 8 71] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 6 11 6 28] Precondition3.precondition f a}
    ensures { [#"../06_fn_specs.rs" 7 10 7 36] Postcondition1.postcondition f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output1.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 9 4 9 18] Weaken20.weaken_2 _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_Weaken3Std_Stub
  type a
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce2 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition2 with
    type args = a,
    type f = f
  val weaken_3_std [@cfg:stackify] [#"../06_fn_specs.rs" 38 0 38 64] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 36 11 36 28] Precondition2.precondition f a}
    ensures { [#"../06_fn_specs.rs" 37 10 37 41] PostconditionOnce2.postcondition_once f a result }
    
end
module C06FnSpecs_Weaken3Std
  type a
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce2 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition2 with
    type args = a,
    type f = f
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce as PostconditionOnce3 with
    type self = f,
    type args = a,
    type Output0.output = Output1.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition as Precondition3 with
    type self = f,
    type args = a
  clone Core_Ops_Function_FnOnce_CallOnce_Stub as CallOnce1 with
    type self = f,
    type args = a,
    predicate Precondition0.precondition = Precondition3.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce3.postcondition_once,
    type Output0.output = Output1.output,
    predicate Precondition0.precondition = Precondition2.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce2.postcondition_once
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = f
  let rec cfg weaken_3_std [@cfg:stackify] [#"../06_fn_specs.rs" 38 0 38 64] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 36 11 36 28] Precondition2.precondition f a}
    ensures { [#"../06_fn_specs.rs" 37 10 37 41] PostconditionOnce2.postcondition_once f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output1.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 39 4 39 27] CallOnce1.call_once _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output1.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Bool
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output1.output)
  val postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output1.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module C06FnSpecs_Weaken2Std_Stub
  type a
  type f
  use prelude.Borrow
  use prelude.Bool
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve2 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut1 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition2 with
    type args = a,
    type f = f
  val weaken_2_std [@cfg:stackify] [#"../06_fn_specs.rs" 26 0 26 73] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 24 11 24 28] Precondition2.precondition f a}
    ensures { [#"../06_fn_specs.rs" 25 0 25 93] exists f2 : borrowed f .  * f2 = f /\ PostconditionMut1.postcondition_mut f2 a result /\ Resolve2.resolve ( ^ f2) }
    
end
module C06FnSpecs_Weaken2Std
  type a
  type f
  use prelude.Bool
  use prelude.Borrow
  use prelude.Opaque
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce2 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition2 with
    type args = a,
    type f = f
  clone C06FnSpecs_Weaken3Std_Stub as Weaken3Std0 with
    type a = a,
    type f = f,
    predicate Precondition2.precondition = Precondition2.precondition,
    predicate PostconditionOnce2.postcondition_once = PostconditionOnce2.postcondition_once,
    type Output1.output = Output1.output
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut1 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  let rec cfg weaken_2_std [@cfg:stackify] [#"../06_fn_specs.rs" 26 0 26 73] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 24 11 24 28] Precondition2.precondition f a}
    ensures { [#"../06_fn_specs.rs" 25 0 25 93] exists f2 : borrowed f .  * f2 = f /\ PostconditionMut1.postcondition_mut f2 a result /\ Resolve2.resolve ( ^ f2) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output1.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 27 4 27 22] Weaken3Std0.weaken_3_std _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output1.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output1.output)
  val postcondition (self : f) (_2' : args) (_3' : Output1.output) : bool
    ensures { result = postcondition self _2' _3' }
    
end
module C06FnSpecs_WeakenStd_Stub
  type a
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition1 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition2 with
    type args = a,
    type f = f
  val weaken_std [@cfg:stackify] [#"../06_fn_specs.rs" 14 0 14 62] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 12 11 12 28] Precondition2.precondition f a}
    ensures { [#"../06_fn_specs.rs" 13 10 13 36] Postcondition1.postcondition f a result }
    
end
module C06FnSpecs_WeakenStd
  type a
  type f
  use prelude.Borrow
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = a
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut1 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition2 with
    type args = a,
    type f = f
  clone C06FnSpecs_Weaken2Std_Stub as Weaken2Std0 with
    type a = a,
    type f = f,
    predicate Precondition2.precondition = Precondition2.precondition,
    predicate PostconditionMut1.postcondition_mut = PostconditionMut1.postcondition_mut,
    predicate Resolve2.resolve = Resolve2.resolve,
    type Output1.output = Output1.output
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = a
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition as Postcondition1 with
    type args = a,
    type f = f,
    type Output1.output = Output1.output
  let rec cfg weaken_std [@cfg:stackify] [#"../06_fn_specs.rs" 14 0 14 62] (f : f) (a : a) : Output1.output
    requires {[#"../06_fn_specs.rs" 12 11 12 28] Precondition2.precondition f a}
    ensures { [#"../06_fn_specs.rs" 13 10 13 36] Postcondition1.postcondition f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output1.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 15 4 15 22] Weaken2Std0.weaken_2_std _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_FnOnceUser_Stub
  type f
  use prelude.Bool
  use prelude.UIntSize
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition2 with
    type args = usize,
    type f = f
  val fn_once_user [@cfg:stackify] [#"../06_fn_specs.rs" 44 0 44 43] (f : f) : ()
    requires {[#"../06_fn_specs.rs" 43 11 43 36] Precondition2.precondition f ((0 : usize))}
    
end
module C06FnSpecs_FnOnceUser
  type f
  use prelude.Bool
  use prelude.UIntSize
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce1 with
    type args = usize,
    type f = f,
    type Output1.output = ()
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition2 with
    type args = usize,
    type f = f
  clone Core_Ops_Function_FnOnce_CallOnce_Stub as CallOnce1 with
    type self = f,
    type args = usize,
    predicate Precondition0.precondition = Precondition2.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce1.postcondition_once,
    type Output0.output = ()
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = f
  let rec cfg fn_once_user [@cfg:stackify] [#"../06_fn_specs.rs" 44 0 44 43] (f : f) : ()
    requires {[#"../06_fn_specs.rs" 43 11 43 36] Precondition2.precondition f ((0 : usize))}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var f_1 : f;
  var _3 : f;
  var _4 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve _3 };
    _3 <- f_1;
    f_1 <- any f;
    _4 <- ([#"../06_fn_specs.rs" 45 6 45 7] (0 : usize));
    _0 <- ([#"../06_fn_specs.rs" 45 4 45 8] CallOnce1.call_once _3 _4);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  use prelude.Bool
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  use prelude.Bool
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C06FnSpecs_Caller_Closure0_Type
  use prelude.Bool
  use prelude.UIntSize
  use mach.int.Int32
  type c06fnspecs_caller_closure0  =
    | C06FnSpecs_Caller_Closure0
    
end
module C06FnSpecs_Caller_Closure0_Stub
  use export C06FnSpecs_Caller_Closure0_Type
  use prelude.Bool
  use prelude.UIntSize
  use mach.int.Int32
  predicate precondition [@cfg:stackify] [#"../06_fn_specs.rs" 49 17 49 20] (self : c06fnspecs_caller_closure0) (args : usize)
    
   =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2') = args in true
  predicate postcondition_once [@cfg:stackify] [#"../06_fn_specs.rs" 49 17 49 20] (self : c06fnspecs_caller_closure0) (args : usize) (result' : ())
    
   =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2') = args in true
  predicate resolve [@cfg:stackify] [#"../06_fn_specs.rs" 49 17 49 20] (_1' : c06fnspecs_caller_closure0) =
    [#"../06_fn_specs.rs" 1 0 1 0] true
  val c06FnSpecs_Caller_Closure0 [@cfg:stackify] [#"../06_fn_specs.rs" 49 17 49 20] (_1' : c06fnspecs_caller_closure0) (_2' : usize) : ()
    
end
module C06FnSpecs_Caller_Closure0
  use export C06FnSpecs_Caller_Closure0_Type
  use prelude.Bool
  use prelude.UIntSize
  use mach.int.Int32
  predicate precondition [@cfg:stackify] [#"../06_fn_specs.rs" 49 17 49 20] (self : c06fnspecs_caller_closure0) (args : usize)
    
   =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2') = args in true
  predicate postcondition_once [@cfg:stackify] [#"../06_fn_specs.rs" 49 17 49 20] (self : c06fnspecs_caller_closure0) (args : usize) (result' : ())
    
   =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2') = args in true
  predicate resolve [@cfg:stackify] [#"../06_fn_specs.rs" 49 17 49 20] (_1' : c06fnspecs_caller_closure0) =
    [#"../06_fn_specs.rs" 1 0 1 0] true
  let rec cfg c06FnSpecs_Caller_Closure0 [@cfg:stackify] [#"../06_fn_specs.rs" 49 17 49 20] (_1' : c06fnspecs_caller_closure0) (_2' : usize) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : c06fnspecs_caller_closure0;
  var _2 : usize;
  {
    _1 <- _1';
    _2 <- _2';
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { resolve _1 };
    return _0
  }
  
end
module C06FnSpecs_Caller_Stub
  val caller [@cfg:stackify] [#"../06_fn_specs.rs" 48 0 48 15] (_1' : ()) : ()
end
module C06FnSpecs_Caller
  use prelude.Bool
  use prelude.UIntSize
  use mach.int.Int32
  clone C06FnSpecs_Caller_Closure0_Stub as Closure00
  clone C06FnSpecs_FnOnceUser_Stub as FnOnceUser1 with
    type f = Closure00.c06fnspecs_caller_closure0
  let rec cfg caller [@cfg:stackify] [#"../06_fn_specs.rs" 48 0 48 15] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : Closure00.c06fnspecs_caller_closure0;
  {
    goto BB0
  }
  BB0 {
    _1 <- Closure00.C06FnSpecs_Caller_Closure0;
    _0 <- ([#"../06_fn_specs.rs" 49 4 49 24] FnOnceUser1.fn_once_user _1);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
