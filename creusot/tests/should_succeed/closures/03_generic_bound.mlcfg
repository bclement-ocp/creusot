
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  use prelude.Bool
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  use prelude.Bool
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
  val postcondition (self : self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output1.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output1.output)
  val postcondition (self : f) (_2' : args) (_3' : Output1.output) : bool
    ensures { result = postcondition self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  use prelude.Bool
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  use prelude.Bool
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module Core_Ops_Function_Fn_Call_Stub
  type self
  type args
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = args,
    type f = self
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition1.precondition self args}
    ensures { Postcondition0.postcondition self args result }
    
end
module C03GenericBound_ClosureParam_Stub
  type f
  use prelude.Bool
  use mach.int.UInt32
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition1 with
    type args = uint32,
    type f = f,
    type Output1.output = ()
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = uint32,
    type f = f
  val closure_param [@cfg:stackify] [#"../03_generic_bound.rs" 3 0 3 34] (f : f) : ()
end
module C03GenericBound_ClosureParam
  type f
  use prelude.Bool
  use mach.int.UInt32
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition as Postcondition1 with
    type args = uint32,
    type f = f,
    type Output1.output = ()
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition1 with
    type args = uint32,
    type f = f
  clone Core_Ops_Function_Fn_Call_Stub as Call1 with
    type self = f,
    type args = uint32,
    predicate Precondition1.precondition = Precondition1.precondition,
    predicate Postcondition0.postcondition = Postcondition1.postcondition,
    type Output0.output = ()
  let rec cfg closure_param [@cfg:stackify] [#"../03_generic_bound.rs" 3 0 3 34] (f : f) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var f_1 : f;
  var _2 : f;
  var _3 : uint32;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _2 <- f_1;
    _3 <- ([#"../03_generic_bound.rs" 4 8 4 9] (0 : uint32));
    _0 <- ([#"../03_generic_bound.rs" 4 4 4 10] Call1.call _2 _3);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve f_1 };
    return _0
  }
  
end
module C03GenericBound_Caller_Closure0_Type
  use prelude.Int8
  type c03genericbound_caller_closure0  =
    | C03GenericBound_Caller_Closure0
    
end
module C03GenericBound_Caller_Closure0
  let function C03GenericBound_Caller_Closure0 [@cfg:stackify] [#"../03_generic_bound.rs" 8 18 8 27] (_1' : Closure00.c03genericbound_caller_closure0) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../03_generic_bound.rs" 1 0 1 0] true
end
module C03GenericBound_Caller_Closure0_Stub
  use mach.int.UInt32
  use prelude.Int8
  clone C03GenericBound_Caller_Closure0_Type as Closure00
  val c03GenericBound_Caller_Closure0 [@cfg:stackify] [#"../03_generic_bound.rs" 8 18 8 27] (_1' : Closure00.c03genericbound_caller_closure0) (_x : uint32) : ()
    
end
module C03GenericBound_Caller_Closure0
  use mach.int.UInt32
  use prelude.Int8
  clone C03GenericBound_Caller_Closure0_Type as Closure00
  let rec cfg c03GenericBound_Caller_Closure0 [@cfg:stackify] [#"../03_generic_bound.rs" 8 18 8 27] (_1' : Closure00.c03genericbound_caller_closure0) (_x : uint32) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : Closure00.c03genericbound_caller_closure0;
  var _x_2 : uint32;
  {
    _1 <- _1';
    _x_2 <- _x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C03GenericBound_Caller_Stub
  use prelude.Bool
  use mach.int.UInt32
  use prelude.Int8
  clone C03GenericBound_Caller_Closure0_Type as Closure00
  val caller [@cfg:stackify] [#"../03_generic_bound.rs" 7 0 7 15] (_1' : ()) : ()
end
module C03GenericBound_Caller
  use prelude.Bool
  use mach.int.UInt32
  use prelude.Int8
  clone C03GenericBound_Caller_Closure0_Type as Closure00
  clone C03GenericBound_Caller_Closure0 as Closure01 with
    val Closure00.c03GenericBound_Caller_Closure0 = Closure00.c03GenericBound_Caller_Closure0
  clone C03GenericBound_Caller_Closure0_Stub as Closure02 with
    val Closure00.c03GenericBound_Caller_Closure0 = Closure00.c03GenericBound_Caller_Closure0
  clone C03GenericBound_ClosureParam_Stub as ClosureParam1 with
    type f = Closure00.c03genericbound_caller_closure0
  let rec cfg caller [@cfg:stackify] [#"../03_generic_bound.rs" 7 0 7 15] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : Closure00.c03genericbound_caller_closure0;
  {
    goto BB0
  }
  BB0 {
    _1 <- Closure02.C03GenericBound_Caller_Closure0;
    _0 <- ([#"../03_generic_bound.rs" 8 4 8 31] ClosureParam1.closure_param _1);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
