
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output1.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition
  type args
  type f
  use prelude.Bool
  clone Core_Ops_Function_FnOnce_Output_Type as Output1 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output1.output)
  val postcondition (self : f) (_2' : args) (_3' : Output1.output) : bool
    ensures { result = postcondition self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  use prelude.Bool
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  use prelude.Bool
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  use prelude.Bool
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  use prelude.Bool
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  use prelude.Bool
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  use prelude.Bool
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module C08MultipleCalls_MultiUse_Closure0_Type
  use prelude.Bool
  use prelude.Borrow
  use prelude.Borrow
  use prelude.Borrow
  use mach.int.UInt32
  use prelude.Opaque
  use mach.int.Int
  use prelude.Int8
  type c08multiplecalls_multiuse_closure0  =
    | C08MultipleCalls_MultiUse_Closure0 t
    
end
module C08MultipleCalls_MultiUse_Closure0_Stub
  type t
  use export C08MultipleCalls_MultiUse_Closure0_Type
  use prelude.Bool
  use prelude.Borrow
  use prelude.Borrow
  use mach.int.UInt32
  use mach.int.Int
  use prelude.Int8
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve2 with
    type self = t
  let function field_0 [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0) : t
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../08_multiple_calls.rs" 1 0 1 0] let C08MultipleCalls_MultiUse_Closure0 a = self in a
  predicate precondition [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0) (_ : ())
    
   =
    [#"../08_multiple_calls.rs" 5 23 5 29] field_0 _1' = field_0 _1'
  predicate postcondition [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0) (_ : ()) (result' : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate unnest [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0) (_2' : c08multiplecalls_multiuse_closure0)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] field_0 _2' = field_0 self /\ true
  predicate postcondition_mut [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : borrowed c08multiplecalls_multiuse_closure0) (_ : ()) (result' : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0) (_ : ()) (result' : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate resolve [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (_1' : c08multiplecalls_multiuse_closure0) =
    [#"../08_multiple_calls.rs" 1 0 1 0] Resolve2.resolve (field_0 _1') /\ true
  val c08MultipleCalls_MultiUse_Closure0 [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (_1' : c08multiplecalls_multiuse_closure0) : uint32
    requires {[#"../08_multiple_calls.rs" 5 23 5 29] field_0 _1' = field_0 _1'}
    
end
module C08MultipleCalls_MultiUse_Closure0
  type t
  use export C08MultipleCalls_MultiUse_Closure0_Type
  use prelude.Bool
  use prelude.Borrow
  use prelude.Borrow
  use prelude.Borrow
  use mach.int.UInt32
  use prelude.Opaque
  use mach.int.Int
  use prelude.Int8
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = c08multiplecalls_multiuse_closure0
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = t
  let function field_0 [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0) : t
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../08_multiple_calls.rs" 1 0 1 0] let C08MultipleCalls_MultiUse_Closure0 a = self in a
  predicate precondition [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0) (_ : ())
    
   =
    [#"../08_multiple_calls.rs" 5 23 5 29] field_0 _1' = field_0 _1'
  predicate postcondition [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0) (_ : ()) (result' : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate unnest [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0) (_2' : c08multiplecalls_multiuse_closure0)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] field_0 _2' = field_0 self /\ true
  predicate postcondition_mut [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : borrowed c08multiplecalls_multiuse_closure0) (_ : ()) (result' : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0) (_ : ()) (result' : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate resolve [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (_1' : c08multiplecalls_multiuse_closure0) =
    [#"../08_multiple_calls.rs" 1 0 1 0] Resolve2.resolve (field_0 _1') /\ true
  let rec cfg c08MultipleCalls_MultiUse_Closure0 [@cfg:stackify] [#"../08_multiple_calls.rs" 5 12 5 31] (_1' : c08multiplecalls_multiuse_closure0) : uint32
    requires {[#"../08_multiple_calls.rs" 5 23 5 29] field_0 _1' = field_0 _1'}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : c08multiplecalls_multiuse_closure0;
  var res_2 : uint32;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    assume { Resolve1.resolve _1 };
    res_2 <- ([#"../08_multiple_calls.rs" 8 8 8 9] (0 : uint32));
    _0 <- res_2;
    return _0
  }
  
end
module C08MultipleCalls_UsesFn_Stub
  type f
  use mach.int.UInt32
  use prelude.Bool
  use mach.int.Int
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition1 with
    type args = (),
    type f = f,
    type Output1.output = uint32
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition1 with
    type args = (),
    type f = f
  val uses_fn [@cfg:stackify] [#"../08_multiple_calls.rs" 19 0 19 32] (f : f) : ()
    requires {[#"../08_multiple_calls.rs" 17 11 17 29] Precondition1.precondition f ()}
    ensures { [#"../08_multiple_calls.rs" 18 0 18 70] exists r : uint32 . exists f2 : f . f2 = f /\ Postcondition1.postcondition f2 () r }
    
end
module C08MultipleCalls_MultiUse_Stub
  type t
  val multi_use [@cfg:stackify] [#"../08_multiple_calls.rs" 4 0 4 26] (x : t) : ()
end
module C08MultipleCalls_MultiUse
  type t
  use mach.int.UInt32
  use prelude.Bool
  use prelude.Opaque
  use mach.int.Int
  use prelude.Borrow
  use prelude.Borrow
  use prelude.Int8
  use prelude.Borrow
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = t
  clone C08MultipleCalls_MultiUse_Closure0_Stub as Closure00 with
    type t = t,
    predicate Resolve2.resolve = Resolve2.resolve
  clone C08MultipleCalls_UsesFn_Stub as UsesFn1 with
    type f = Closure00.c08multiplecalls_multiuse_closure0
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve3 with
    type self = t
  let rec cfg multi_use [@cfg:stackify] [#"../08_multiple_calls.rs" 4 0 4 26] (x : t) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : t;
  var c_2 : Closure00.c08multiplecalls_multiuse_closure0;
  var _3 : t;
  var _4 : ();
  var _5 : Closure00.c08multiplecalls_multiuse_closure0;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    assume { Resolve3.resolve x_1 };
    c_2 <- Closure00.C08MultipleCalls_MultiUse_Closure0 _3;
    assume { Closure00.resolve _5 };
    _5 <- c_2;
    assume { Closure00.resolve c_2 };
    _4 <- ([#"../08_multiple_calls.rs" 11 4 11 14] UsesFn1.uses_fn _5);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
