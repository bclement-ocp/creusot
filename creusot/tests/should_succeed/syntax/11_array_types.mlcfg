
module C11ArrayTypes_UsesArray_Type
  use prelude.Slice
  use prelude.Seq
  use prelude.Int
  use prelude.Int64
  type t_usesarray  =
    | C_UsesArray (array int64)
    
  let function usesarray_0 (self : t_usesarray) : array int64 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_UsesArray a -> a
      end
end
module Core_Num_Impl12_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl1_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl1_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl1_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Model_Impl6_ShallowModel_Stub
  type t
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  function shallow_model (self : array t) : Seq.seq t
end
module CreusotContracts_Model_Impl6_ShallowModel_Interface
  type t
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  function shallow_model (self : array t) : Seq.seq t
end
module CreusotContracts_Model_Impl6_ShallowModel
  type t
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  function shallow_model (self : array t) : Seq.seq t =
    Slice.id self
  val shallow_model (self : array t) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module C11ArrayTypes_Omg_Interface
  use prelude.Slice
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use C11ArrayTypes_UsesArray_Type as C11ArrayTypes_UsesArray_Type
  val omg [#"../11_array_types.rs" 8 0 8 28] (x : C11ArrayTypes_UsesArray_Type.t_usesarray) : ()
    requires {[#"../11_array_types.rs" 7 11 7 57] Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x)) > 0 /\ Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x)) < UIntSize.to_int Max0.mAX'}
    
end
module C11ArrayTypes_Omg
  use prelude.Int
  use prelude.UIntSize
  use prelude.Slice
  use seq.Seq
  use prelude.Int64
  use prelude.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl6_ShallowModel as ShallowModel0 with
    type t = int64
  clone CreusotContracts_Logic_Ops_Impl1_IndexLogic as IndexLogic0 with
    type t = int64,
    type s = array int64,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Core_Num_Impl12_Max as Max0
  use C11ArrayTypes_UsesArray_Type as C11ArrayTypes_UsesArray_Type
  let rec cfg omg [#"../11_array_types.rs" 8 0 8 28] [@cfg:stackify] [@cfg:subregion_analysis] (x : C11ArrayTypes_UsesArray_Type.t_usesarray) : ()
    requires {[#"../11_array_types.rs" 7 11 7 57] Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x)) > 0 /\ Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x)) < UIntSize.to_int Max0.mAX'}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : C11ArrayTypes_UsesArray_Type.t_usesarray;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  var _6 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _3 <- ([#"../11_array_types.rs" 9 8 9 9] (0 : usize));
    _4 <- UIntSize.of_int (Seq.length (C11ArrayTypes_UsesArray_Type.usesarray_0 x_1));
    _5 <- ([#"../11_array_types.rs" 9 4 9 10] _3 < _4);
    assert { [#"../11_array_types.rs" 9 4 9 10] _5 };
    goto BB1
  }
  BB1 {
    x_1 <- (let C11ArrayTypes_UsesArray_Type.C_UsesArray a = x_1 in C11ArrayTypes_UsesArray_Type.C_UsesArray (Seq.set (C11ArrayTypes_UsesArray_Type.usesarray_0 x_1) (UIntSize.to_int _3) ([#"../11_array_types.rs" 9 13 9 14] (5 : int64))));
    assert { [#"../11_array_types.rs" 11 20 11 32] Int64.to_int (IndexLogic0.index_logic (C11ArrayTypes_UsesArray_Type.usesarray_0 x_1) 0) = 5 };
    _6 <- ();
    _0 <- ();
    return _0
  }
  
end
