
module C12Zip_Common_Iterator_Invariant_Stub
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C12Zip_Common_Iterator_Invariant_Interface
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C12Zip_Common_Iterator_Invariant
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) =
    [#"../common.rs" 29 8 29 12] true
  val invariant' [#"../common.rs" 28 4 28 30] (self : self) : bool
    ensures { result = invariant' self }
    
end
module C12Zip_Zip_Type
  type t_zip 'i 'j =
    | C_Zip 'i 'j
    
  let function zip_iter1 (self : t_zip 'i 'j) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Zip a _ -> a
      end
  let function zip_iter2 (self : t_zip 'i 'j) : 'j = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Zip _ a -> a
      end
end
module C12Zip_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C12Zip_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C12Zip_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C12Zip_Impl0_Completed_Stub
  type i
  type j
  use prelude.Borrow
  use prelude.Int
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate completed [#"../12_zip.rs" 17 4 17 35] (self : borrowed (C12Zip_Zip_Type.t_zip i j))
end
module C12Zip_Impl0_Completed_Interface
  type i
  type j
  use prelude.Borrow
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate completed [#"../12_zip.rs" 17 4 17 35] (self : borrowed (C12Zip_Zip_Type.t_zip i j))
end
module C12Zip_Impl0_Completed
  type i
  type j
  use prelude.Borrow
  use prelude.Int
  clone C12Zip_Common_Iterator_Completed_Stub as Completed1 with
    type self = j
  clone C12Zip_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate completed [#"../12_zip.rs" 17 4 17 35] (self : borrowed (C12Zip_Zip_Type.t_zip i j)) =
    [#"../12_zip.rs" 16 4 16 16] Completed0.completed {current = C12Zip_Zip_Type.zip_iter1 ( * self); final = C12Zip_Zip_Type.zip_iter1 ( ^ self)} \/ Completed1.completed {current = C12Zip_Zip_Type.zip_iter2 ( * self); final = C12Zip_Zip_Type.zip_iter2 ( ^ self)}
  val completed [#"../12_zip.rs" 17 4 17 35] (self : borrowed (C12Zip_Zip_Type.t_zip i j)) : bool
    ensures { result = completed self }
    
end
module C12Zip_Common_Iterator_Item_Type
  type self
  type item
end
module C12Zip_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C12Zip_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C12Zip_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module C12Zip_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
end
module C12Zip_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C12Zip_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  val produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C12Zip_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C12Zip_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C12Zip_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C12Zip_Impl0_Produces_Stub
  type i
  type j
  use seq.Seq
  use prelude.Int
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate produces [#"../12_zip.rs" 22 4 22 65] (self : C12Zip_Zip_Type.t_zip i j) (visited : Seq.seq (Item0.item, Item1.item)) (tl : C12Zip_Zip_Type.t_zip i j)
    
end
module C12Zip_Impl0_Produces_Interface
  type i
  type j
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate produces [#"../12_zip.rs" 22 4 22 65] (self : C12Zip_Zip_Type.t_zip i j) (visited : Seq.seq (Item0.item, Item1.item)) (tl : C12Zip_Zip_Type.t_zip i j)
    
end
module C12Zip_Impl0_Produces
  type i
  type j
  use seq.Seq
  use prelude.Int
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Produces_Stub as Produces1 with
    type self = j,
    type Item0.item = Item1.item
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate produces [#"../12_zip.rs" 22 4 22 65] (self : C12Zip_Zip_Type.t_zip i j) (visited : Seq.seq (Item0.item, Item1.item)) (tl : C12Zip_Zip_Type.t_zip i j)
    
   =
    [#"../12_zip.rs" 23 8 29 9] exists p2 : Seq.seq Item1.item . exists p1 : Seq.seq Item0.item . Seq.length p1 = Seq.length p2 /\ Seq.length p2 = Seq.length visited /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i)) /\ Produces0.produces (C12Zip_Zip_Type.zip_iter1 self) p1 (C12Zip_Zip_Type.zip_iter1 tl) /\ Produces1.produces (C12Zip_Zip_Type.zip_iter2 self) p2 (C12Zip_Zip_Type.zip_iter2 tl)
  val produces [#"../12_zip.rs" 22 4 22 65] (self : C12Zip_Zip_Type.t_zip i j) (visited : Seq.seq (Item0.item, Item1.item)) (tl : C12Zip_Zip_Type.t_zip i j) : bool
    ensures { result = produces self visited tl }
    
end
module C12Zip_Impl0_Invariant_Stub
  type i
  type j
  use prelude.Int
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant' [#"../12_zip.rs" 33 4 33 30] (self : C12Zip_Zip_Type.t_zip i j)
end
module C12Zip_Impl0_Invariant_Interface
  type i
  type j
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant' [#"../12_zip.rs" 33 4 33 30] (self : C12Zip_Zip_Type.t_zip i j)
end
module C12Zip_Impl0_Invariant
  type i
  type j
  use prelude.Int
  clone C12Zip_Common_Iterator_Invariant_Stub as Invariant1 with
    type self = j
  clone C12Zip_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant' [#"../12_zip.rs" 33 4 33 30] (self : C12Zip_Zip_Type.t_zip i j) =
    [#"../12_zip.rs" 32 4 32 16] Invariant0.invariant' (C12Zip_Zip_Type.zip_iter1 self) /\ Invariant1.invariant' (C12Zip_Zip_Type.zip_iter2 self)
  val invariant' [#"../12_zip.rs" 33 4 33 30] (self : C12Zip_Zip_Type.t_zip i j) : bool
    ensures { result = invariant' self }
    
end
module C12Zip_Impl0_ProducesRefl_Stub
  type i
  type j
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone C12Zip_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type j = j
  function produces_refl [#"../12_zip.rs" 40 4 40 29] (a : C12Zip_Zip_Type.t_zip i j) : ()
end
module C12Zip_Impl0_ProducesRefl_Interface
  type i
  type j
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone C12Zip_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type j = j
  function produces_refl [#"../12_zip.rs" 40 4 40 29] (a : C12Zip_Zip_Type.t_zip i j) : ()
  axiom produces_refl_spec : forall a : C12Zip_Zip_Type.t_zip i j . ([#"../12_zip.rs" 38 15 38 28] Invariant0.invariant' a) -> ([#"../12_zip.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a)
end
module C12Zip_Impl0_ProducesRefl
  type i
  type j
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone C12Zip_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type j = j
  function produces_refl [#"../12_zip.rs" 40 4 40 29] (a : C12Zip_Zip_Type.t_zip i j) : () =
    [#"../12_zip.rs" 37 4 37 10] ()
  val produces_refl [#"../12_zip.rs" 40 4 40 29] (a : C12Zip_Zip_Type.t_zip i j) : ()
    requires {[#"../12_zip.rs" 38 15 38 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C12Zip_Zip_Type.t_zip i j . ([#"../12_zip.rs" 38 15 38 28] Invariant0.invariant' a) -> ([#"../12_zip.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a)
end
module C12Zip_Impl0_ProducesRefl_Impl
  type i
  type j
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Produces_Interface as Produces2 with
    type self = j,
    type Item0.item = Item1.item
  clone C12Zip_Common_Iterator_Invariant_Interface as Invariant2 with
    type self = j
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = j,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = j,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C12Zip_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Impl0_Produces as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Produces1.produces = Produces2.produces
  clone C12Zip_Impl0_Invariant as Invariant0 with
    type i = i,
    type j = j,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant2.invariant'
  let rec ghost function produces_refl [#"../12_zip.rs" 40 4 40 29] (a : C12Zip_Zip_Type.t_zip i j) : ()
    requires {[#"../12_zip.rs" 38 15 38 28] Invariant0.invariant' a}
    ensures { [#"../12_zip.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../12_zip.rs" 37 4 37 10] ()
end
module C12Zip_Impl0_ProducesTrans_Stub
  type i
  type j
  use seq.Seq
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone C12Zip_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type j = j
  function produces_trans [#"../12_zip.rs" 49 4 49 90] (a : C12Zip_Zip_Type.t_zip i j) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip i j) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip i j) : ()
    
end
module C12Zip_Impl0_ProducesTrans_Interface
  type i
  type j
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone C12Zip_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type j = j
  function produces_trans [#"../12_zip.rs" 49 4 49 90] (a : C12Zip_Zip_Type.t_zip i j) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip i j) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip i j) : ()
    
  axiom produces_trans_spec : forall a : C12Zip_Zip_Type.t_zip i j, ab : Seq.seq (Item0.item, Item1.item), b : C12Zip_Zip_Type.t_zip i j, bc : Seq.seq (Item0.item, Item1.item), c : C12Zip_Zip_Type.t_zip i j . ([#"../12_zip.rs" 43 15 43 28] Invariant0.invariant' a) -> ([#"../12_zip.rs" 44 15 44 28] Invariant0.invariant' b) -> ([#"../12_zip.rs" 45 15 45 28] Invariant0.invariant' c) -> ([#"../12_zip.rs" 46 15 46 32] Produces0.produces a ab b) -> ([#"../12_zip.rs" 47 15 47 32] Produces0.produces b bc c) -> ([#"../12_zip.rs" 48 14 48 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C12Zip_Impl0_ProducesTrans
  type i
  type j
  use seq.Seq
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone C12Zip_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type j = j
  function produces_trans [#"../12_zip.rs" 49 4 49 90] (a : C12Zip_Zip_Type.t_zip i j) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip i j) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip i j) : ()
    
   =
    [#"../12_zip.rs" 42 4 42 10] ()
  val produces_trans [#"../12_zip.rs" 49 4 49 90] (a : C12Zip_Zip_Type.t_zip i j) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip i j) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip i j) : ()
    requires {[#"../12_zip.rs" 43 15 43 28] Invariant0.invariant' a}
    requires {[#"../12_zip.rs" 44 15 44 28] Invariant0.invariant' b}
    requires {[#"../12_zip.rs" 45 15 45 28] Invariant0.invariant' c}
    requires {[#"../12_zip.rs" 46 15 46 32] Produces0.produces a ab b}
    requires {[#"../12_zip.rs" 47 15 47 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C12Zip_Zip_Type.t_zip i j, ab : Seq.seq (Item0.item, Item1.item), b : C12Zip_Zip_Type.t_zip i j, bc : Seq.seq (Item0.item, Item1.item), c : C12Zip_Zip_Type.t_zip i j . ([#"../12_zip.rs" 43 15 43 28] Invariant0.invariant' a) -> ([#"../12_zip.rs" 44 15 44 28] Invariant0.invariant' b) -> ([#"../12_zip.rs" 45 15 45 28] Invariant0.invariant' c) -> ([#"../12_zip.rs" 46 15 46 32] Produces0.produces a ab b) -> ([#"../12_zip.rs" 47 15 47 32] Produces0.produces b bc c) -> ([#"../12_zip.rs" 48 14 48 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C12Zip_Impl0_ProducesTrans_Impl
  type i
  type j
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Produces_Interface as Produces2 with
    type self = j,
    type Item0.item = Item1.item
  clone C12Zip_Common_Iterator_Invariant_Interface as Invariant2 with
    type self = j
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = j,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = j,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C12Zip_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Impl0_Produces as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Produces1.produces = Produces2.produces
  clone C12Zip_Impl0_Invariant as Invariant0 with
    type i = i,
    type j = j,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant2.invariant'
  let rec ghost function produces_trans [#"../12_zip.rs" 49 4 49 90] (a : C12Zip_Zip_Type.t_zip i j) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip i j) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip i j) : ()
    requires {[#"../12_zip.rs" 43 15 43 28] Invariant0.invariant' a}
    requires {[#"../12_zip.rs" 44 15 44 28] Invariant0.invariant' b}
    requires {[#"../12_zip.rs" 45 15 45 28] Invariant0.invariant' c}
    requires {[#"../12_zip.rs" 46 15 46 32] Produces0.produces a ab b}
    requires {[#"../12_zip.rs" 47 15 47 32] Produces0.produces b bc c}
    ensures { [#"../12_zip.rs" 48 14 48 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../12_zip.rs" 42 4 42 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C12Zip_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C12Zip_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  val next [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  use prelude.Int
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  use prelude.Int
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  use prelude.Int
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  use prelude.Int
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module C12Zip_Impl0_Next_Interface
  type i
  type j
  use prelude.Borrow
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone C12Zip_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type j = j
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C12Zip_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type j = j
  val next [#"../12_zip.rs" 56 4 56 44] (self : borrowed (C12Zip_Zip_Type.t_zip i j)) : Core_Option_Option_Type.t_option (Item0.item, Item1.item)
    requires {[#"../12_zip.rs" 51 4 51 40] Invariant0.invariant' ( * self)}
    ensures { [#"../12_zip.rs" 51 4 51 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../12_zip.rs" 52 14 55 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C12Zip_Impl0_Next
  type i
  type j
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = Core_Option_Option_Type.t_option Item1.item
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone C12Zip_Common_Iterator_Produces_Interface as Produces2 with
    type self = j,
    type Item0.item = Item1.item
  clone C12Zip_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Completed_Interface as Completed2 with
    type self = j
  clone C12Zip_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C12Zip_Common_Iterator_Invariant_Interface as Invariant2 with
    type self = j
  clone C12Zip_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = j,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = j,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve3 with
    type t1 = Core_Option_Option_Type.t_option Item0.item,
    type t2 = Core_Option_Option_Type.t_option Item1.item,
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Resolve1.resolve = Resolve5.resolve
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Item1.item
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Item0.item
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C12Zip_Zip_Type.t_zip i j
  clone C12Zip_Common_Iterator_Next_Interface as Next1 with
    type self = j,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Completed0.completed = Completed2.completed,
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item1.item
  clone C12Zip_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item
  clone C12Zip_Impl0_Produces as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Produces1.produces = Produces2.produces
  clone C12Zip_Impl0_Completed as Completed0 with
    type i = i,
    type j = j,
    predicate Completed0.completed = Completed1.completed,
    predicate Completed1.completed = Completed2.completed
  clone C12Zip_Impl0_Invariant as Invariant0 with
    type i = i,
    type j = j,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant2.invariant'
  let rec cfg next [#"../12_zip.rs" 56 4 56 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C12Zip_Zip_Type.t_zip i j)) : Core_Option_Option_Type.t_option (Item0.item, Item1.item)
    requires {[#"../12_zip.rs" 51 4 51 40] Invariant0.invariant' ( * self)}
    ensures { [#"../12_zip.rs" 51 4 51 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../12_zip.rs" 52 14 55 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (Item0.item, Item1.item);
  var self_1 : borrowed (C12Zip_Zip_Type.t_zip i j);
  var _5 : (Core_Option_Option_Type.t_option Item0.item, Core_Option_Option_Type.t_option Item1.item);
  var _6 : Core_Option_Option_Type.t_option Item0.item;
  var _7 : borrowed i;
  var _8 : Core_Option_Option_Type.t_option Item1.item;
  var _9 : borrowed j;
  var _10 : isize;
  var _11 : isize;
  var i1_12 : Item0.item;
  var i2_13 : Item1.item;
  var _14 : (Item0.item, Item1.item);
  var _15 : Item0.item;
  var _16 : Item1.item;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _7 <- borrow_mut (C12Zip_Zip_Type.zip_iter1 ( * self_1));
    self_1 <- { self_1 with current = (let C12Zip_Zip_Type.C_Zip a b =  * self_1 in C12Zip_Zip_Type.C_Zip ( ^ _7) b) };
    _6 <- ([#"../12_zip.rs" 57 15 57 32] Next0.next _7);
    goto BB1
  }
  BB1 {
    _9 <- borrow_mut (C12Zip_Zip_Type.zip_iter2 ( * self_1));
    self_1 <- { self_1 with current = (let C12Zip_Zip_Type.C_Zip a b =  * self_1 in C12Zip_Zip_Type.C_Zip a ( ^ _9)) };
    _8 <- ([#"../12_zip.rs" 57 34 57 51] Next1.next _9);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    _5 <- (_6, _8);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    switch (let (a, _) = _5 in a)
      | Core_Option_Option_Type.C_Some _ -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _0 <- Core_Option_Option_Type.C_None;
    goto BB13
  }
  BB6 {
    switch (let (_, a) = _5 in a)
      | Core_Option_Option_Type.C_Some _ -> goto BB7
      | _ -> goto BB5
      end
  }
  BB7 {
    assume { Resolve1.resolve i1_12 };
    i1_12 <- Core_Option_Option_Type.some_0 (let (a, _) = _5 in a);
    _5 <- (let (a, b) = _5 in (let Core_Option_Option_Type.C_Some a = let (a, _) = _5 in a in Core_Option_Option_Type.C_Some (any Item0.item), b));
    assume { Resolve2.resolve i2_13 };
    i2_13 <- Core_Option_Option_Type.some_0 (let (_, a) = _5 in a);
    _5 <- (let (a, b) = _5 in (a, let Core_Option_Option_Type.C_Some a = let (_, a) = _5 in a in Core_Option_Option_Type.C_Some (any Item1.item)));
    assume { Resolve1.resolve _15 };
    _15 <- i1_12;
    i1_12 <- any Item0.item;
    assume { Resolve2.resolve _16 };
    _16 <- i2_13;
    i2_13 <- any Item1.item;
    _14 <- (_15, _16);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    _0 <- Core_Option_Option_Type.C_Some _14;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    assume { Resolve3.resolve _5 };
    return _0
  }
  
end
module C12Zip_Impl0
  type i
  type j
  use seq.Seq
  use prelude.Borrow
  clone C12Zip_Common_Iterator_Completed_Interface as Completed2 with
    type self = j
  clone C12Zip_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = j
  clone C12Zip_Common_Iterator_Produces_Interface as Produces2 with
    type self = j,
    type Item0.item = Item1.item
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C12Zip_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Invariant_Interface as Invariant2 with
    type self = j
  clone C12Zip_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C12Zip_Impl0_Completed as Completed0 with
    type i = i,
    type j = j,
    predicate Completed0.completed = Completed1.completed,
    predicate Completed1.completed = Completed2.completed
  clone C12Zip_Impl0_Produces as Produces0 with
    type i = i,
    type j = j,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Produces1.produces = Produces2.produces
  clone C12Zip_Impl0_Invariant as Invariant0 with
    type i = i,
    type j = j,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant2.invariant'
  goal produces_refl_refn : [#"../12_zip.rs" 40 4 40 29] forall a : C12Zip_Zip_Type.t_zip i j . Invariant0.invariant' a -> Invariant0.invariant' a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal produces_trans_refn : [#"../12_zip.rs" 49 4 49 90] forall a : C12Zip_Zip_Type.t_zip i j . forall ab : Seq.seq (Item0.item, Item1.item) . forall b : C12Zip_Zip_Type.t_zip i j . forall bc : Seq.seq (Item0.item, Item1.item) . forall c : C12Zip_Zip_Type.t_zip i j . Produces0.produces b bc c /\ Produces0.produces a ab b /\ Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a -> Produces0.produces b bc c /\ Produces0.produces a ab b /\ Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal next_refn : [#"../12_zip.rs" 56 4 56 44] forall self : borrowed (C12Zip_Zip_Type.t_zip i j) . Invariant0.invariant' ( * self) -> Invariant0.invariant' ( * self) /\ (forall result : Core_Option_Option_Type.t_option (Item0.item, Item1.item) . match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end /\ Invariant0.invariant' ( ^ self) -> match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end /\ Invariant0.invariant' ( ^ self))
end
