
module Own_OwnResult_Type
  type t_ownresult 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  let function err_0 (self : t_ownresult 't 'e) : 'e = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ok _ -> any 'e
      | C_Err a -> a
      end
  let function ok_0 (self : t_ownresult 't 'e) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ok a -> a
      | C_Err _ -> any 't
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module Own_Impl4_Resolve_Stub
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate resolve [#"../own.rs" 14 4 14 28] (self : Own_OwnResult_Type.t_ownresult t e)
end
module Own_Impl4_Resolve_Interface
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate resolve [#"../own.rs" 14 4 14 28] (self : Own_OwnResult_Type.t_ownresult t e)
end
module Own_Impl4_Resolve
  type t
  type e
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = e
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate resolve [#"../own.rs" 14 4 14 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 15 8 18 9] match (self) with
      | Own_OwnResult_Type.C_Ok t -> Resolve0.resolve t
      | Own_OwnResult_Type.C_Err e -> Resolve1.resolve e
      end
  val resolve [#"../own.rs" 14 4 14 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve self }
    
end
module Own_Impl0_IsOk_Interface
  type t
  type e
  use prelude.Borrow
  use Own_OwnResult_Type as Own_OwnResult_Type
  val is_ok [#"../own.rs" 24 4 24 31] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { [#"../own.rs" 23 14 23 62] result = (exists t : t . self = Own_OwnResult_Type.C_Ok t) }
    
end
module Own_Impl0_IsOk
  type t
  type e
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Own_OwnResult_Type.t_ownresult t e
  let rec cfg is_ok [#"../own.rs" 24 4 24 31] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { [#"../own.rs" 23 14 23 62] result = (exists t : t . self = Own_OwnResult_Type.C_Ok t) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve self_1 };
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    _0 <- false;
    goto BB3
  }
  BB2 {
    _0 <- true;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Own_Impl0_IsErr_Interface
  type t
  type e
  use prelude.Borrow
  use Own_OwnResult_Type as Own_OwnResult_Type
  val is_err [#"../own.rs" 29 4 29 32] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { [#"../own.rs" 28 14 28 63] result = (exists e : e . self = Own_OwnResult_Type.C_Err e) }
    
end
module Own_Impl0_IsErr
  type t
  type e
  use prelude.Borrow
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl0_IsOk_Interface as IsOk0 with
    type t = t,
    type e = e
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Own_OwnResult_Type.t_ownresult t e
  let rec cfg is_err [#"../own.rs" 29 4 29 32] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { [#"../own.rs" 28 14 28 63] result = (exists e : e . self = Own_OwnResult_Type.C_Err e) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var _3 : bool;
  var _4 : Own_OwnResult_Type.t_ownresult t e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    assume { Resolve0.resolve self_1 };
    _3 <- ([#"../own.rs" 30 9 30 21] IsOk0.is_ok _4);
    goto BB1
  }
  BB1 {
    _0 <- not _3;
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Own_Impl0_Ok_Interface
  type t
  type e
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Own_OwnResult_Type as Own_OwnResult_Type
  val ok [#"../own.rs" 35 4 35 32] (self : Own_OwnResult_Type.t_ownresult t e) : Core_Option_Option_Type.t_option t
    ensures { [#"../own.rs" 33 4 33 75] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = Core_Option_Option_Type.C_Some t }
    ensures { [#"../own.rs" 34 4 34 75] (exists e : e . self = Own_OwnResult_Type.C_Err e) -> result = Core_Option_Option_Type.C_None }
    
end
module Own_Impl0_Ok
  type t
  type e
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg ok [#"../own.rs" 35 4 35 32] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : Core_Option_Option_Type.t_option t
    ensures { [#"../own.rs" 33 4 33 75] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = Core_Option_Option_Type.C_Some t }
    ensures { [#"../own.rs" 34 4 34 75] (exists e : e . self = Own_OwnResult_Type.C_Err e) -> result = Core_Option_Option_Type.C_None }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var _4 : isize;
  var x_5 : t;
  var _6 : t;
  var x_7 : e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve x_7 };
    x_7 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    _0 <- Core_Option_Option_Type.C_None;
    goto BB8
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve2.resolve x_5 };
    x_5 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any t));
    assume { Resolve2.resolve _6 };
    _6 <- x_5;
    x_5 <- any t;
    _0 <- Core_Option_Option_Type.C_Some _6;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve x_7 };
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Own_Impl0_Err_Interface
  type t
  type e
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Own_OwnResult_Type as Own_OwnResult_Type
  val err [#"../own.rs" 45 4 45 33] (self : Own_OwnResult_Type.t_ownresult t e) : Core_Option_Option_Type.t_option e
    ensures { [#"../own.rs" 43 4 43 74] (exists t : t . self = Own_OwnResult_Type.C_Ok t) -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../own.rs" 44 4 44 76] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Core_Option_Option_Type.C_Some e }
    
end
module Own_Impl0_Err
  type t
  type e
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg err [#"../own.rs" 45 4 45 33] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : Core_Option_Option_Type.t_option e
    ensures { [#"../own.rs" 43 4 43 74] (exists t : t . self = Own_OwnResult_Type.C_Ok t) -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../own.rs" 44 4 44 76] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Core_Option_Option_Type.C_Some e }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option e;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var _4 : isize;
  var x_5 : t;
  var x_6 : e;
  var _7 : e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve x_6 };
    x_6 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    assume { Resolve1.resolve _7 };
    _7 <- x_6;
    x_6 <- any e;
    _0 <- Core_Option_Option_Type.C_Some _7;
    goto BB7
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve2.resolve x_5 };
    x_5 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any t));
    _0 <- Core_Option_Option_Type.C_None;
    goto BB6
  }
  BB6 {
    assume { Resolve2.resolve x_5 };
    goto BB9
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Own_Impl0_AsRef_Interface
  type t
  type e
  use prelude.Borrow
  use Own_OwnResult_Type as Own_OwnResult_Type
  val as_ref [#"../own.rs" 55 4 55 45] (self : Own_OwnResult_Type.t_ownresult t e) : Own_OwnResult_Type.t_ownresult t e
    ensures { [#"../own.rs" 53 4 53 87] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 54 4 54 89] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
end
module Own_Impl0_AsRef
  type t
  type e
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Own_OwnResult_Type.t_ownresult t e
  let rec cfg as_ref [#"../own.rs" 55 4 55 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : Own_OwnResult_Type.t_ownresult t e
    ensures { [#"../own.rs" 53 4 53 87] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 54 4 54 89] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t e;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var _4 : isize;
  var x_5 : t;
  var _6 : t;
  var x_7 : e;
  var _8 : e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB3
      | Own_OwnResult_Type.C_Err _ -> goto BB1
      end
  }
  BB1 {
    x_7 <- Own_OwnResult_Type.err_0 self_1;
    assume { Resolve0.resolve self_1 };
    _8 <- x_7;
    assume { Resolve1.resolve x_7 };
    _0 <- Own_OwnResult_Type.C_Err _8;
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB3 {
    x_5 <- Own_OwnResult_Type.ok_0 self_1;
    assume { Resolve0.resolve self_1 };
    _6 <- x_5;
    assume { Resolve2.resolve x_5 };
    _0 <- Own_OwnResult_Type.C_Ok _6;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  use prelude.Int
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Own_Impl0_AsMut_Interface
  type t
  type e
  use prelude.Borrow
  use Own_OwnResult_Type as Own_OwnResult_Type
  val as_mut [#"../own.rs" 70 4 70 57] (self : borrowed (Own_OwnResult_Type.t_ownresult t e)) : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e)
    ensures { [#"../own.rs" 62 4 69 6] exists t : borrowed t .  * self = Own_OwnResult_Type.C_Ok ( * t) /\  ^ self = Own_OwnResult_Type.C_Ok ( ^ t) /\ result = Own_OwnResult_Type.C_Ok t \/ (exists e : borrowed e .  * self = Own_OwnResult_Type.C_Err ( * e) /\  ^ self = Own_OwnResult_Type.C_Err ( ^ e) /\ result = Own_OwnResult_Type.C_Err e) }
    
end
module Own_Impl0_AsMut
  type t
  type e
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Own_OwnResult_Type.t_ownresult t e
  let rec cfg as_mut [#"../own.rs" 70 4 70 57] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Own_OwnResult_Type.t_ownresult t e)) : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e)
    ensures { [#"../own.rs" 62 4 69 6] exists t : borrowed t .  * self = Own_OwnResult_Type.C_Ok ( * t) /\  ^ self = Own_OwnResult_Type.C_Ok ( ^ t) /\ result = Own_OwnResult_Type.C_Ok t \/ (exists e : borrowed e .  * self = Own_OwnResult_Type.C_Err ( * e) /\  ^ self = Own_OwnResult_Type.C_Err ( ^ e) /\ result = Own_OwnResult_Type.C_Err e) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e);
  var self_1 : borrowed (Own_OwnResult_Type.t_ownresult t e);
  var _3 : isize;
  var x_4 : borrowed t;
  var _5 : borrowed t;
  var x_6 : borrowed e;
  var _7 : borrowed e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB3
      | Own_OwnResult_Type.C_Err _ -> goto BB1
      end
  }
  BB1 {
    x_6 <- borrow_mut (Own_OwnResult_Type.err_0 ( * self_1));
    self_1 <- { self_1 with current = (let Own_OwnResult_Type.C_Err a =  * self_1 in Own_OwnResult_Type.C_Err ( ^ x_6)) };
    assume { Resolve0.resolve self_1 };
    _7 <- borrow_mut ( * x_6);
    x_6 <- { x_6 with current = ( ^ _7) };
    _0 <- Own_OwnResult_Type.C_Err _7;
    assume { Resolve1.resolve x_6 };
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB3 {
    x_4 <- borrow_mut (Own_OwnResult_Type.ok_0 ( * self_1));
    self_1 <- { self_1 with current = (let Own_OwnResult_Type.C_Ok a =  * self_1 in Own_OwnResult_Type.C_Ok ( ^ x_4)) };
    assume { Resolve0.resolve self_1 };
    _5 <- borrow_mut ( * x_4);
    x_4 <- { x_4 with current = ( ^ _5) };
    _0 <- Own_OwnResult_Type.C_Ok _5;
    assume { Resolve2.resolve x_4 };
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Own_Impl0_Unwrap_Interface
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  val unwrap [#"../own.rs" 79 4 81 29] (self : Own_OwnResult_Type.t_ownresult t e) : t
    requires {[#"../own.rs" 77 4 77 54] exists t : t . self = Own_OwnResult_Type.C_Ok t}
    ensures { [#"../own.rs" 78 14 78 43] Own_OwnResult_Type.C_Ok result = self }
    
end
module Own_Impl0_Unwrap
  type t
  type e
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg unwrap [#"../own.rs" 79 4 81 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : t
    requires {[#"../own.rs" 77 4 77 54] exists t : t . self = Own_OwnResult_Type.C_Ok t}
    ensures { [#"../own.rs" 78 14 78 43] Own_OwnResult_Type.C_Ok result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var _4 : isize;
  var t_5 : t;
  var _e_6 : e;
  var _7 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve _e_6 };
    _e_6 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    absurd
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve2.resolve t_5 };
    t_5 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any t));
    assume { Resolve2.resolve _0 };
    _0 <- t_5;
    t_5 <- any t;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Own_Impl0_Expect_Interface
  type t
  type e
  use prelude.Borrow
  use Own_OwnResult_Type as Own_OwnResult_Type
  val expect [#"../own.rs" 91 4 93 29] (self : Own_OwnResult_Type.t_ownresult t e) (msg : string) : t
    requires {[#"../own.rs" 89 4 89 54] exists t : t . self = Own_OwnResult_Type.C_Ok t}
    ensures { [#"../own.rs" 90 14 90 43] Own_OwnResult_Type.C_Ok result = self }
    
end
module Own_Impl0_Expect
  type t
  type e
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg expect [#"../own.rs" 91 4 93 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) (msg : string) : t
    requires {[#"../own.rs" 89 4 89 54] exists t : t . self = Own_OwnResult_Type.C_Ok t}
    ensures { [#"../own.rs" 90 14 90 43] Own_OwnResult_Type.C_Ok result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var msg_2 : string;
  var _5 : isize;
  var t_6 : t;
  var _e_7 : e;
  var _8 : ();
  {
    self_1 <- self;
    msg_2 <- msg;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve _e_7 };
    _e_7 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    absurd
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve2.resolve t_6 };
    t_6 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any t));
    assume { Resolve2.resolve _0 };
    _0 <- t_6;
    t_6 <- any t;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Own_Impl0_UnwrapErr_Interface
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  val unwrap_err [#"../own.rs" 103 4 105 29] (self : Own_OwnResult_Type.t_ownresult t e) : e
    requires {[#"../own.rs" 101 4 101 55] exists e : e . self = Own_OwnResult_Type.C_Err e}
    ensures { [#"../own.rs" 102 14 102 44] Own_OwnResult_Type.C_Err result = self }
    
end
module Own_Impl0_UnwrapErr
  type t
  type e
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg unwrap_err [#"../own.rs" 103 4 105 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : e
    requires {[#"../own.rs" 101 4 101 55] exists e : e . self = Own_OwnResult_Type.C_Err e}
    ensures { [#"../own.rs" 102 14 102 44] Own_OwnResult_Type.C_Err result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : e;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var _4 : isize;
  var _t_5 : t;
  var _6 : ();
  var e_7 : e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve e_7 };
    e_7 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    assume { Resolve1.resolve _0 };
    _0 <- e_7;
    e_7 <- any e;
    goto BB6
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve2.resolve _t_5 };
    _t_5 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any t));
    absurd
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Own_Impl0_UnwrapOr_Interface
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  val unwrap_or [#"../own.rs" 115 4 115 43] (self : Own_OwnResult_Type.t_ownresult t e) (default : t) : t
    ensures { [#"../own.rs" 113 4 113 69] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = t }
    ensures { [#"../own.rs" 114 4 114 78] (exists e : e . self = Own_OwnResult_Type.C_Err e) -> result = default }
    
end
module Own_Impl0_UnwrapOr
  type t
  type e
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = e
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = t
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  let rec cfg unwrap_or [#"../own.rs" 115 4 115 43] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) (default : t) : t
    ensures { [#"../own.rs" 113 4 113 69] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = t }
    ensures { [#"../own.rs" 114 4 114 78] (exists e : e . self = Own_OwnResult_Type.C_Err e) -> result = default }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var default_2 : t;
  var _5 : isize;
  var t_6 : t;
  var e_7 : e;
  {
    self_1 <- self;
    default_2 <- default;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve2.resolve e_7 };
    e_7 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    assume { Resolve1.resolve _0 };
    _0 <- default_2;
    default_2 <- any t;
    goto BB7
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve default_2 };
    absurd
  }
  BB5 {
    assume { Resolve1.resolve t_6 };
    t_6 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any t));
    assume { Resolve1.resolve _0 };
    _0 <- t_6;
    t_6 <- any t;
    goto BB6
  }
  BB6 {
    goto BB8
  }
  BB7 {
    assume { Resolve2.resolve e_7 };
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module CreusotContracts_Std1_Default_Default_IsDefault_Stub
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault_Interface
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module Core_Default_Default_Default_Interface
  type self
  clone CreusotContracts_Std1_Default_Default_IsDefault_Stub as IsDefault0 with
    type self = self
  val default (_1' : ()) : self
    ensures { IsDefault0.is_default result }
    
end
module Own_Impl0_UnwrapOrDefault_Interface
  type t
  type e
  clone CreusotContracts_Std1_Default_Default_IsDefault_Stub as IsDefault0 with
    type self = t
  use Own_OwnResult_Type as Own_OwnResult_Type
  val unwrap_or_default [#"../own.rs" 125 4 127 19] (self : Own_OwnResult_Type.t_ownresult t e) : t
    ensures { [#"../own.rs" 123 4 123 69] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = t }
    ensures { [#"../own.rs" 124 4 124 80] (exists e : e . self = Own_OwnResult_Type.C_Err e) -> IsDefault0.is_default result }
    
end
module Own_Impl0_UnwrapOrDefault
  type t
  type e
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = e
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = t
  clone CreusotContracts_Std1_Default_Default_IsDefault_Interface as IsDefault0 with
    type self = t
  clone Core_Default_Default_Default_Interface as Default0 with
    type self = t,
    predicate IsDefault0.is_default = IsDefault0.is_default
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  let rec cfg unwrap_or_default [#"../own.rs" 125 4 127 19] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : t
    ensures { [#"../own.rs" 123 4 123 69] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = t }
    ensures { [#"../own.rs" 124 4 124 80] (exists e : e . self = Own_OwnResult_Type.C_Err e) -> IsDefault0.is_default result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var _4 : isize;
  var x_5 : t;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    _0 <- ([#"../own.rs" 131 33 131 45] Default0.default ());
    goto BB7
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve1.resolve x_5 };
    x_5 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any t));
    assume { Resolve1.resolve _0 };
    _0 <- x_5;
    x_5 <- any t;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Own_Impl0_And_Interface
  type t
  type e
  type u
  use Own_OwnResult_Type as Own_OwnResult_Type
  val and [#"../own.rs" 137 4 137 64] (self : Own_OwnResult_Type.t_ownresult t e) (res : Own_OwnResult_Type.t_ownresult u e) : Own_OwnResult_Type.t_ownresult u e
    ensures { [#"../own.rs" 135 4 135 73] (exists t : t . self = Own_OwnResult_Type.C_Ok t) -> result = res }
    ensures { [#"../own.rs" 136 4 136 86] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
end
module Own_Impl0_And
  type t
  type e
  type u
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = u
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve1 with
    type t = u,
    type e = e,
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  let rec cfg and [#"../own.rs" 137 4 137 64] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) (res : Own_OwnResult_Type.t_ownresult u e) : Own_OwnResult_Type.t_ownresult u e
    ensures { [#"../own.rs" 135 4 135 73] (exists t : t . self = Own_OwnResult_Type.C_Ok t) -> result = res }
    ensures { [#"../own.rs" 136 4 136 86] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult u e;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var res_2 : Own_OwnResult_Type.t_ownresult u e;
  var _5 : isize;
  var x_6 : t;
  var e_7 : e;
  var _8 : e;
  {
    self_1 <- self;
    res_2 <- res;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve2.resolve e_7 };
    e_7 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    assume { Resolve2.resolve _8 };
    _8 <- e_7;
    e_7 <- any e;
    _0 <- Own_OwnResult_Type.C_Err _8;
    goto BB7
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve res_2 };
    absurd
  }
  BB5 {
    assume { Resolve3.resolve x_6 };
    x_6 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any t));
    assume { Resolve1.resolve _0 };
    _0 <- res_2;
    res_2 <- any Own_OwnResult_Type.t_ownresult u e;
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve x_6 };
    goto BB9
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Own_Impl0_Or_Interface
  type t
  type e
  type f
  use Own_OwnResult_Type as Own_OwnResult_Type
  val or [#"../own.rs" 147 4 147 63] (self : Own_OwnResult_Type.t_ownresult t e) (res : Own_OwnResult_Type.t_ownresult t f) : Own_OwnResult_Type.t_ownresult t f
    ensures { [#"../own.rs" 145 4 145 84] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 146 4 146 74] (exists e : e . self = Own_OwnResult_Type.C_Err e) -> result = res }
    
end
module Own_Impl0_Or
  type t
  type e
  type f
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = f
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve1 with
    type t = t,
    type e = f,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve4.resolve
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  let rec cfg or [#"../own.rs" 147 4 147 63] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) (res : Own_OwnResult_Type.t_ownresult t f) : Own_OwnResult_Type.t_ownresult t f
    ensures { [#"../own.rs" 145 4 145 84] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 146 4 146 74] (exists e : e . self = Own_OwnResult_Type.C_Err e) -> result = res }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t f;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var res_2 : Own_OwnResult_Type.t_ownresult t f;
  var _5 : isize;
  var v_6 : t;
  var _7 : t;
  var e_8 : e;
  {
    self_1 <- self;
    res_2 <- res;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve2.resolve e_8 };
    e_8 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    assume { Resolve1.resolve _0 };
    _0 <- res_2;
    res_2 <- any Own_OwnResult_Type.t_ownresult t f;
    goto BB8
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve res_2 };
    absurd
  }
  BB5 {
    assume { Resolve3.resolve v_6 };
    v_6 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any t));
    assume { Resolve3.resolve _7 };
    _7 <- v_6;
    v_6 <- any t;
    _0 <- Own_OwnResult_Type.C_Ok _7;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB9
  }
  BB8 {
    assume { Resolve2.resolve e_8 };
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Own_Impl1_Copied_Interface
  type t
  type e
  use prelude.Borrow
  use Own_OwnResult_Type as Own_OwnResult_Type
  val copied [#"../own.rs" 159 4 161 16] (self : Own_OwnResult_Type.t_ownresult t e) : Own_OwnResult_Type.t_ownresult t e
    ensures { [#"../own.rs" 157 4 157 86] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 158 4 158 86] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
end
module Own_Impl1_Copied
  type t
  type e
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg copied [#"../own.rs" 159 4 161 16] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : Own_OwnResult_Type.t_ownresult t e
    ensures { [#"../own.rs" 157 4 157 86] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 158 4 158 86] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t e;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var _4 : isize;
  var t_5 : t;
  var _6 : t;
  var e_7 : e;
  var _8 : e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve e_7 };
    e_7 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    assume { Resolve1.resolve _8 };
    _8 <- e_7;
    e_7 <- any e;
    _0 <- Own_OwnResult_Type.C_Err _8;
    goto BB6
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve2.resolve t_5 };
    t_5 <- Own_OwnResult_Type.ok_0 self_1;
    assume { Resolve3.resolve _6 };
    _6 <- t_5;
    assume { Resolve2.resolve t_5 };
    _0 <- Own_OwnResult_Type.C_Ok _6;
    goto BB8
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' (self : self) : self
    ensures { result = self }
    
end
module Own_Impl1_Cloned_Interface
  type t
  type e
  use prelude.Borrow
  use Own_OwnResult_Type as Own_OwnResult_Type
  val cloned [#"../own.rs" 172 4 174 17] (self : Own_OwnResult_Type.t_ownresult t e) : Own_OwnResult_Type.t_ownresult t e
    ensures { [#"../own.rs" 170 4 170 86] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 171 4 171 86] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
end
module Own_Impl1_Cloned
  type t
  type e
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone Core_Clone_Clone_Clone_Interface as Clone0 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve0 with
    type t = t,
    type e = e,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg cloned [#"../own.rs" 172 4 174 17] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : Own_OwnResult_Type.t_ownresult t e
    ensures { [#"../own.rs" 170 4 170 86] forall t : t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 171 4 171 86] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t e;
  var self_1 : Own_OwnResult_Type.t_ownresult t e;
  var _4 : isize;
  var t_5 : t;
  var _6 : t;
  var _7 : t;
  var e_8 : e;
  var _9 : e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve e_8 };
    e_8 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    assume { Resolve1.resolve _9 };
    _9 <- e_8;
    e_8 <- any e;
    _0 <- Own_OwnResult_Type.C_Err _9;
    goto BB8
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve2.resolve t_5 };
    t_5 <- Own_OwnResult_Type.ok_0 self_1;
    _7 <- t_5;
    assume { Resolve2.resolve t_5 };
    _6 <- ([#"../own.rs" 178 46 178 55] Clone0.clone' _7);
    goto BB6
  }
  BB6 {
    _0 <- Own_OwnResult_Type.C_Ok _6;
    goto BB7
  }
  BB7 {
    goto BB10
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Own_Impl2_Copied_Interface
  type t
  type e
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = t
  use Own_OwnResult_Type as Own_OwnResult_Type
  val copied [#"../own.rs" 187 4 189 16] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) : Own_OwnResult_Type.t_ownresult t e
    ensures { [#"../own.rs" 185 4 185 105] forall t : borrowed t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok ( * t) /\ Resolve0.resolve t }
    ensures { [#"../own.rs" 186 4 186 86] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
end
module Own_Impl2_Copied
  type t
  type e
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = e
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = t
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve1 with
    type t = borrowed t,
    type e = e,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  let rec cfg copied [#"../own.rs" 187 4 189 16] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) : Own_OwnResult_Type.t_ownresult t e
    ensures { [#"../own.rs" 185 4 185 105] forall t : borrowed t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok ( * t) /\ Resolve0.resolve t }
    ensures { [#"../own.rs" 186 4 186 86] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t e;
  var self_1 : Own_OwnResult_Type.t_ownresult (borrowed t) e;
  var _4 : isize;
  var t_5 : borrowed t;
  var _6 : t;
  var e_7 : e;
  var _8 : e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve2.resolve e_7 };
    e_7 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    assume { Resolve2.resolve _8 };
    _8 <- e_7;
    e_7 <- any e;
    _0 <- Own_OwnResult_Type.C_Err _8;
    goto BB6
  }
  BB4 {
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve0.resolve t_5 };
    t_5 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any borrowed t));
    assume { Resolve3.resolve _6 };
    _6 <-  * t_5;
    assume { Resolve0.resolve t_5 };
    _0 <- Own_OwnResult_Type.C_Ok _6;
    goto BB8
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Own_Impl2_Cloned_Interface
  type t
  type e
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = t
  use Own_OwnResult_Type as Own_OwnResult_Type
  val cloned [#"../own.rs" 200 4 202 17] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) : Own_OwnResult_Type.t_ownresult t e
    ensures { [#"../own.rs" 198 4 198 105] forall t : borrowed t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok ( * t) /\ Resolve0.resolve t }
    ensures { [#"../own.rs" 199 4 199 86] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
end
module Own_Impl2_Cloned
  type t
  type e
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone Core_Clone_Clone_Clone_Interface as Clone0 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = e
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = t
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve1 with
    type t = borrowed t,
    type e = e,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  let rec cfg cloned [#"../own.rs" 200 4 202 17] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) : Own_OwnResult_Type.t_ownresult t e
    ensures { [#"../own.rs" 198 4 198 105] forall t : borrowed t . self = Own_OwnResult_Type.C_Ok t -> result = Own_OwnResult_Type.C_Ok ( * t) /\ Resolve0.resolve t }
    ensures { [#"../own.rs" 199 4 199 86] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Own_OwnResult_Type.C_Err e }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t e;
  var self_1 : Own_OwnResult_Type.t_ownresult (borrowed t) e;
  var _4 : isize;
  var t_5 : borrowed t;
  var _6 : t;
  var _7 : t;
  var e_8 : e;
  var _9 : e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve2.resolve e_8 };
    e_8 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    assume { Resolve2.resolve _9 };
    _9 <- e_8;
    e_8 <- any e;
    _0 <- Own_OwnResult_Type.C_Err _9;
    goto BB8
  }
  BB4 {
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve0.resolve t_5 };
    t_5 <- Own_OwnResult_Type.ok_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (any borrowed t));
    _7 <-  * t_5;
    assume { Resolve0.resolve t_5 };
    _6 <- ([#"../own.rs" 206 46 206 55] Clone0.clone' _7);
    goto BB6
  }
  BB6 {
    _0 <- Own_OwnResult_Type.C_Ok _6;
    goto BB7
  }
  BB7 {
    goto BB10
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Own_Impl3_Transpose_Interface
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  val transpose [#"../own.rs" 216 4 216 53] (self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e) : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e)
    ensures { [#"../own.rs" 213 4 213 62] self = Own_OwnResult_Type.C_Ok (Core_Option_Option_Type.C_None) -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../own.rs" 214 4 214 96] forall t : t . self = Own_OwnResult_Type.C_Ok (Core_Option_Option_Type.C_Some t) -> result = Core_Option_Option_Type.C_Some (Own_OwnResult_Type.C_Ok t) }
    ensures { [#"../own.rs" 215 4 215 92] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Core_Option_Option_Type.C_Some (Own_OwnResult_Type.C_Err e) }
    
end
module Own_Impl3_Transpose
  type t
  type e
  use prelude.Int
  use prelude.IntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = e
  use Own_OwnResult_Type as Own_OwnResult_Type
  clone Own_Impl4_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option t,
    type e = e,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve0.resolve
  let rec cfg transpose [#"../own.rs" 216 4 216 53] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e) : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e)
    ensures { [#"../own.rs" 213 4 213 62] self = Own_OwnResult_Type.C_Ok (Core_Option_Option_Type.C_None) -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../own.rs" 214 4 214 96] forall t : t . self = Own_OwnResult_Type.C_Ok (Core_Option_Option_Type.C_Some t) -> result = Core_Option_Option_Type.C_Some (Own_OwnResult_Type.C_Ok t) }
    ensures { [#"../own.rs" 215 4 215 92] forall e : e . self = Own_OwnResult_Type.C_Err e -> result = Core_Option_Option_Type.C_Some (Own_OwnResult_Type.C_Err e) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e);
  var self_1 : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e;
  var _5 : isize;
  var _6 : isize;
  var x_7 : t;
  var _8 : Own_OwnResult_Type.t_ownresult t e;
  var _9 : t;
  var e_10 : e;
  var _11 : Own_OwnResult_Type.t_ownresult t e;
  var _12 : e;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    switch (self_1)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB6
      end
  }
  BB4 {
    switch (Own_OwnResult_Type.ok_0 self_1)
      | Core_Option_Option_Type.C_None -> goto BB11
      | Core_Option_Option_Type.C_Some _ -> goto BB7
      end
  }
  BB5 {
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB6 {
    assume { Resolve0.resolve e_10 };
    e_10 <- Own_OwnResult_Type.err_0 self_1;
    self_1 <- (let Own_OwnResult_Type.C_Err a = self_1 in Own_OwnResult_Type.C_Err (any e));
    assume { Resolve0.resolve _12 };
    _12 <- e_10;
    e_10 <- any e;
    _11 <- Own_OwnResult_Type.C_Err _12;
    goto BB12
  }
  BB7 {
    assume { Resolve2.resolve x_7 };
    x_7 <- Core_Option_Option_Type.some_0 (Own_OwnResult_Type.ok_0 self_1);
    self_1 <- (let Own_OwnResult_Type.C_Ok a = self_1 in Own_OwnResult_Type.C_Ok (let Core_Option_Option_Type.C_Some a = Own_OwnResult_Type.ok_0 self_1 in Core_Option_Option_Type.C_Some (any t)));
    assume { Resolve2.resolve _9 };
    _9 <- x_7;
    x_7 <- any t;
    _8 <- Own_OwnResult_Type.C_Ok _9;
    goto BB8
  }
  BB8 {
    _0 <- Core_Option_Option_Type.C_Some _8;
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB15
  }
  BB11 {
    _0 <- Core_Option_Option_Type.C_None;
    goto BB15
  }
  BB12 {
    _0 <- Core_Option_Option_Type.C_Some _11;
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Own_Impl4
  type t
  type e
end
